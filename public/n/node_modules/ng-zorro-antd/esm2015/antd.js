import { APP_INITIALIZER, ApplicationRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactory, ComponentFactoryResolver, ContentChild, ContentChildren, Directive, ElementRef, EventEmitter, Host, HostBinding, HostListener, Inject, Injectable, InjectionToken, Injector, Input, IterableDiffers, NgModule, NgZone, Optional, Output, Pipe, Renderer, Renderer2, SkipSelf, TemplateRef, Type, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation, forwardRef } from '@angular/core';
import { CommonModule, DOCUMENT } from '@angular/common';
import { fromEvent as fromEvent$1 } from 'rxjs/observable/fromEvent';
import { distinctUntilChanged as distinctUntilChanged$1 } from 'rxjs/operators/distinctUntilChanged';
import { throttleTime as throttleTime$1 } from 'rxjs/operators/throttleTime';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { FormsModule, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import moment from 'moment';
import { CdkConnectedOverlay, Overlay, OverlayModule } from '@angular/cdk/overlay';
import { BACKSPACE, DOWN_ARROW, ENTER, LEFT_ARROW, RIGHT_ARROW, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { debounceTime as debounceTime$1 } from 'rxjs/operators/debounceTime';
import { mapTo as mapTo$1 } from 'rxjs/operators/mapTo';
import { merge as merge$1 } from 'rxjs/operators/merge';
import { BehaviorSubject as BehaviorSubject$1 } from 'rxjs/BehaviorSubject';
import { merge as merge$3 } from 'rxjs/observable/merge';
import { filter as filter$1 } from 'rxjs/operators/filter';
import { map as map$1 } from 'rxjs/operators/map';
import { pluck as pluck$1 } from 'rxjs/operators/pluck';
import { takeUntil as takeUntil$1 } from 'rxjs/operators/takeUntil';
import { tap as tap$1 } from 'rxjs/operators/tap';
import { ObserversModule } from '@angular/cdk/observers';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { Directionality } from '@angular/cdk/bidi';
import { of as of$1 } from 'rxjs/observable/of';
import { auditTime as auditTime$1 } from 'rxjs/operators/auditTime';
import { startWith as startWith$1 } from 'rxjs/operators/startWith';
import { HttpClient, HttpClientModule, HttpEventType, HttpHeaders, HttpRequest, HttpResponse } from '@angular/common/http';
import { ComponentPortal } from '@angular/cdk/portal';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const availablePrefixs = ['moz', 'ms', 'webkit'];
/**
 * @return {?}
 */
function requestAnimationFramePolyfill() {
    let /** @type {?} */ lastTime = 0;
    return function (callback) {
        const /** @type {?} */ currTime = new Date().getTime();
        const /** @type {?} */ timeToCall = Math.max(0, 16 - (currTime - lastTime));
        const /** @type {?} */ id = window.setTimeout(() => { callback(currTime + timeToCall); }, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
    };
}
/**
 * @return {?}
 */
function getRequestAnimationFrame() {
    if (typeof window === 'undefined') {
        return () => null;
    }
    if (window.requestAnimationFrame) {
        // https://github.com/vuejs/vue/issues/4465
        return window.requestAnimationFrame.bind(window);
    }
    const /** @type {?} */ prefix = availablePrefixs.filter(key => `${key}RequestAnimationFrame` in window)[0];
    return prefix
        ? window[`${prefix}RequestAnimationFrame`]
        : requestAnimationFramePolyfill();
}
const reqAnimFrame = getRequestAnimationFrame();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} t
 * @param {?} b
 * @param {?} c
 * @param {?} d
 * @return {?}
 */
function easeInOutCubic(t, b, c, d) {
    const /** @type {?} */ cc = c - b;
    let /** @type {?} */ tt = t / (d / 2);
    if (tt < 1) {
        return cc / 2 * tt * tt * tt + b;
    }
    else {
        return cc / 2 * ((tt -= 2) * tt * tt + 2) + b;
    }
}
class NzScrollService {
    /**
     * @param {?} doc
     */
    constructor(doc) {
        this.doc = doc;
    }
    /**
     * 设置 `el` 滚动条位置
     * @param {?} el
     * @param {?=} topValue
     * @return {?}
     */
    setScrollTop(el, topValue = 0) {
        if (el === window) {
            this.doc.body.scrollTop = topValue;
            this.doc.documentElement.scrollTop = topValue;
        }
        else {
            (/** @type {?} */ (el)).scrollTop = topValue;
        }
    }
    /**
     * 获取 `el` 相对于视窗距离
     * @param {?} el
     * @return {?}
     */
    getOffset(el) {
        const /** @type {?} */ ret = {
            top: 0,
            left: 0
        };
        if (!el || !el.getClientRects().length)
            return ret;
        const /** @type {?} */ rect = el.getBoundingClientRect();
        if (rect.width || rect.height) {
            const /** @type {?} */ doc = el.ownerDocument.documentElement;
            ret.top = rect.top - doc.clientTop;
            ret.left = rect.left - doc.clientLeft;
        }
        else {
            ret.top = rect.top;
            ret.left = rect.left;
        }
        return ret;
    }
    /**
     * 获取 `el` 滚动条位置
     * @param {?=} el
     * @param {?=} top
     * @return {?}
     */
    getScroll(el, top = true) {
        const /** @type {?} */ target = el ? el : window;
        const /** @type {?} */ prop = top ? 'pageYOffset' : 'pageXOffset';
        const /** @type {?} */ method = top ? 'scrollTop' : 'scrollLeft';
        const /** @type {?} */ isWindow = target === window;
        let /** @type {?} */ ret = isWindow ? target[prop] : target[method];
        if (isWindow && typeof ret !== 'number') {
            ret = this.doc.documentElement[method];
        }
        return ret;
    }
    /**
     * 使用动画形式将 `el` 滚动至某位置
     *
     * @param {?} containerEl 容器，默认 `window`
     * @param {?=} targetTopValue 滚动至目标 `top` 值，默认：0，相当于顶部
     * @param {?=} easing 动作算法，默认：`easeInOutCubic`
     * @param {?=} callback 动画结束后回调
     * @return {?}
     */
    scrollTo(containerEl, targetTopValue = 0, easing, callback) {
        const /** @type {?} */ target = containerEl ? containerEl : window;
        const /** @type {?} */ scrollTop = this.getScroll(target);
        const /** @type {?} */ startTime = Date.now();
        const /** @type {?} */ frameFunc = () => {
            const /** @type {?} */ timestamp = Date.now();
            const /** @type {?} */ time = timestamp - startTime;
            this.setScrollTop(target, (easing || easeInOutCubic)(time, scrollTop, targetTopValue, 450));
            if (time < 450) {
                reqAnimFrame(frameFunc);
            }
            else {
                if (callback)
                    callback();
            }
        };
        reqAnimFrame(frameFunc);
    }
}
NzScrollService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzScrollService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
/**
 * @param {?} doc
 * @param {?} scrollService
 * @return {?}
 */
function SCROLL_SERVICE_PROVIDER_FACTORY(doc, scrollService) {
    return scrollService || new NzScrollService(doc);
}
const SCROLL_SERVICE_PROVIDER = {
    provide: NzScrollService,
    useFactory: SCROLL_SERVICE_PROVIDER_FACTORY,
    deps: [DOCUMENT, [new Optional(), new SkipSelf(), NzScrollService]]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAffixComponent {
    /**
     * @param {?} scrollSrv
     * @param {?} _el
     */
    constructor(scrollSrv, _el) {
        this.scrollSrv = scrollSrv;
        this._el = _el;
        this.didScroll = false;
        this.scrollTime = null;
        this.scroll$ = null;
        this.scrollWinInTarget$ = null;
        this.fixed = false;
        this.nzOffsetTop = 0;
        this.nzOffsetBottom = 0;
        this.nzChange = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.nzTarget) {
            this.registerScrollEvent();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.nzTarget) {
            this.registerScrollEvent();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.orgOffset = null;
        this.fixed = false;
    }
    /**
     * @return {?}
     */
    reCalculate() {
        const /** @type {?} */ elOffset = this.scrollSrv.getOffset(this._el.nativeElement);
        this.orgOffset = {
            top: elOffset.top + this.scrollSrv.getScroll(this.nzTarget),
            left: elOffset.left + this.scrollSrv.getScroll(this.nzTarget, false)
        };
        return this;
    }
    /**
     * @return {?}
     */
    process() {
        if (!this.orgOffset) {
            this.reCalculate();
        }
        const /** @type {?} */ containerScrollTop = this.scrollSrv.getScroll(this.nzTarget);
        const /** @type {?} */ fixTop = this.nzTarget ? this.scrollSrv.getOffset(this.nzTarget).top : 0;
        const /** @type {?} */ hasFixed = this.orgOffset.top - fixTop - containerScrollTop - this.nzOffsetTop <= 0;
        if (this.fixed === hasFixed) {
            return;
        }
        const /** @type {?} */ wrapEl = this.wrap.nativeElement;
        wrapEl.classList[hasFixed ? 'add' : 'remove']('ant-affix');
        if (hasFixed) {
            wrapEl.style.cssText = `top:${((+this.nzOffsetTop) + (+fixTop))}px;left:${this.orgOffset.left}px`;
        }
        else {
            wrapEl.style.cssText = ``;
        }
        this.fixed = hasFixed;
        this.nzChange.emit(hasFixed);
    }
    /**
     * @return {?}
     */
    removeListen() {
        if (this.scrollTime) {
            clearTimeout(this.scrollTime);
        }
        if (this.scroll$) {
            this.scroll$.unsubscribe();
        }
        if (this.scrollWinInTarget$) {
            this.scrollWinInTarget$.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    registerScrollEvent() {
        this.removeListen();
        this.reCalculate().process();
        // TODO: should refactor this logic
        this.scrollTime = window.setInterval(() => {
            if (this.didScroll) {
                this.didScroll = false;
                this.process();
            }
        }, 100);
        this.scroll$ = fromEvent$1(this.nzTarget || window, 'scroll')
            .subscribe(() => this.didScroll = true);
        if (this.nzTarget) {
            // 当 window 滚动位发生变动时，需要重新计算滚动容器
            this.scrollWinInTarget$ = fromEvent$1(window, 'scroll').pipe(throttleTime$1(50), distinctUntilChanged$1())
                .subscribe(e => {
                this.orgOffset = null;
                this.fixed = false;
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListen();
    }
}
NzAffixComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-affix',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div #wrap>
      <ng-content></ng-content>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-affix {
  position: fixed;
  z-index: 10;
}
`,
                    `nz-affix {
  display: block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzAffixComponent.ctorParameters = () => [
    { type: NzScrollService, },
    { type: ElementRef, },
];
NzAffixComponent.propDecorators = {
    "wrap": [{ type: ViewChild, args: ['wrap',] },],
    "nzTarget": [{ type: Input },],
    "nzOffsetTop": [{ type: Input },],
    "nzOffsetBottom": [{ type: Input },],
    "nzChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAffixModule {
}
NzAffixModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAffixComponent],
                exports: [NzAffixComponent],
                imports: [CommonModule],
                providers: [SCROLL_SERVICE_PROVIDER]
            },] },
];
/** @nocollapse */
NzAffixModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const fadeAnimation = trigger('fadeAnimation', [
    state('void', style({ opacity: 0 })),
    state('true', style({ opacity: 1 })),
    state('false', style({ opacity: 0 })),
    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),
    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return value === '' || (value && value !== 'false');
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAlertComponent {
    constructor() {
        this._banner = false;
        this._closeable = false;
        this._showIcon = false;
        this._display = true;
        this.antAlert = 'ant-alert';
        this.nzType = 'info';
        this.nzOnClose = new EventEmitter();
        this._classMap = {
            [`${this.antAlert}`]: true,
            [`${this.antAlert}-${this.nzType}`]: true,
            [`${this.antAlert}-no-icon`]: !this.nzShowIcon,
            [`${this.antAlert}-banner`]: this.nzBanner,
            [`${this.antAlert}-with-description`]: !!this.nzDescription
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzBanner(value) {
        this._banner = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzBanner() {
        return this._banner;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCloseable(value) {
        this._closeable = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCloseable() {
        return this._closeable;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowIcon(value) {
        this._showIcon = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowIcon() {
        return this._showIcon;
    }
    /**
     * @return {?}
     */
    closeAlert() {
        this._display = false;
        this.nzOnClose.emit(true);
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this._classMap = {
            [`${this.antAlert}`]: true,
            [`${this.antAlert}-${this.nzType}`]: true,
            [`${this.antAlert}-no-icon`]: !this.nzShowIcon,
            [`${this.antAlert}-banner`]: this.nzBanner,
            [`${this.antAlert}-with-description`]: !!this.nzDescription
        };
    }
}
NzAlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-alert',
                encapsulation: ViewEncapsulation.None,
                animations: [fadeAnimation],
                template: `
    <div [ngClass]="_classMap" *ngIf="_display" [@fadeAnimation]>
      <i
        class="ant-alert-icon anticon"
        [class.anticon-cross-circle-o]="nzType==='error'"
        [class.anticon-check-circle-o]="nzType==='success'"
        [class.anticon-info-circle-o]="nzType==='info'"
        [class.anticon-exclamation-circle-o]="nzType==='warning'"
        *ngIf="nzShowIcon&&nzDescription"></i>
      <i
        class="ant-alert-icon anticon"
        [class.anticon-cross-circle]="nzType==='error'"
        [class.anticon-check-circle]="nzType==='success'"
        [class.anticon-info-circle]="nzType==='info'"
        [class.anticon-exclamation-circle]="nzType==='warning'"
        *ngIf="nzShowIcon&&!nzDescription"></i>
      <ng-template [ngIf]="nzMessage">
        <span class="ant-alert-message">{{ nzMessage }}</span>
      </ng-template>
      <ng-template [ngIf]="!nzMessage">
        <ng-content select="[alert-body]"></ng-content>
      </ng-template>
      <ng-template [ngIf]="nzDescription">
        <span class="ant-alert-description">{{ nzDescription }}</span>
      </ng-template>
      <ng-template [ngIf]="!nzDescription">
        <ng-content select="alert-description"></ng-content>
      </ng-template>
      <ng-template [ngIf]="nzCloseable || nzCloseText">
        <a *ngIf="nzCloseable" (click)="closeAlert($event)" class="ant-alert-close-icon">
          <i class="anticon anticon-cross"></i>
        </a>
        <a *ngIf="nzCloseText" class="ant-alert-close-icon" (click)="closeAlert()">{{ nzCloseText }}</a>
      </ng-template>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-alert {
  position: relative;
  padding: 8px 48px 8px 38px;
  border-radius: 4px;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
  line-height: 1.5;
}
.ant-alert.ant-alert-no-icon {
  padding: 8px 48px 8px 16px;
}
.ant-alert-icon {
  font-size: 14px;
  top: 10px;
  left: 16px;
  position: absolute;
}
.ant-alert-description {
  font-size: 12px;
  line-height: 21px;
  display: none;
}
.ant-alert-success {
  border: 1px solid #cfefdf;
  background-color: #ebf8f2;
}
.ant-alert-success .ant-alert-icon {
  color: #00a854;
}
.ant-alert-info {
  border: 1px solid #d2eafb;
  background-color: #ecf6fd;
}
.ant-alert-info .ant-alert-icon {
  color: #108ee9;
}
.ant-alert-warning {
  border: 1px solid #fff3cf;
  background-color: #fffaeb;
}
.ant-alert-warning .ant-alert-icon {
  color: #ffbf00;
}
.ant-alert-error {
  border: 1px solid #fcdbd9;
  background-color: #fef0ef;
}
.ant-alert-error .ant-alert-icon {
  color: #f04134;
}
.ant-alert-close-icon {
  font-size: 12px;
  position: absolute;
  right: 16px;
  top: 10px;
  height: 12px;
  line-height: 12px;
  overflow: hidden;
  cursor: pointer;
}
.ant-alert-close-icon .anticon-cross {
  color: rgba(0, 0, 0, 0.43);
  transition: color .3s ease;
}
.ant-alert-close-icon .anticon-cross:hover {
  color: #404040;
}
.ant-alert-close-text {
  position: absolute;
  right: 16px;
}
.ant-alert-with-description {
  padding: 16px 16px 16px 60px;
  position: relative;
  border-radius: 4px;
  color: rgba(0, 0, 0, 0.65);
  line-height: 1.5;
}
.ant-alert-with-description.ant-alert-no-icon {
  padding: 16px;
}
.ant-alert-with-description .ant-alert-icon {
  position: absolute;
  top: 16px;
  left: 20px;
  font-size: 24px;
}
.ant-alert-with-description .ant-alert-close-icon {
  position: absolute;
  top: 16px;
  right: 16px;
  cursor: pointer;
  font-size: 12px;
}
.ant-alert-with-description .ant-alert-message {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
  display: block;
  margin-bottom: 4px;
}
.ant-alert-with-description .ant-alert-description {
  display: block;
}
.ant-alert.ant-alert-close {
  height: 0 !important;
  margin: 0;
  padding-top: 0;
  padding-bottom: 0;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  transform-origin: 50% 0;
}
.ant-alert-slide-up-leave {
  animation: antAlertSlideUpOut 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-alert-banner {
  border-radius: 0;
  border: 0;
  margin-bottom: 0;
}
@keyframes antAlertSlideUpIn {
  0% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0);
  }
  100% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
}
@keyframes antAlertSlideUpOut {
  0% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0);
  }
}
`,
                    `nz-alert {
  display: block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzAlertComponent.ctorParameters = () => [];
NzAlertComponent.propDecorators = {
    "nzType": [{ type: Input },],
    "nzDescription": [{ type: Input },],
    "nzCloseText": [{ type: Input },],
    "nzMessage": [{ type: Input },],
    "nzOnClose": [{ type: Output },],
    "nzBanner": [{ type: Input },],
    "nzCloseable": [{ type: Input },],
    "nzShowIcon": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAlertModule {
}
NzAlertModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAlertComponent],
                exports: [NzAlertComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzAlertModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAnchorComponent {
    /**
     * @param {?} scrollSrv
     * @param {?} _renderer
     * @param {?} doc
     */
    constructor(scrollSrv, _renderer, doc) {
        this.scrollSrv = scrollSrv;
        this._renderer = _renderer;
        this.links = [];
        this.scroll$ = null;
        this.target = null;
        this.animating = false;
        this._top = 0;
        this._visible = false;
        this.nzOffsetTop = 0;
        this.nzBounds = 5;
        this.nzScroll = new EventEmitter();
        this.doc = doc;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set nzTarget(el) {
        this.target = el;
        this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.scroll$) {
            this.registerScrollEvent();
        }
    }
    /**
     * @return {?}
     */
    getTarget() {
        return this.target || window;
    }
    /**
     * @return {?}
     */
    handleScroll() {
        if (this.animating) {
            return;
        }
        const /** @type {?} */ sections = [];
        this.links.forEach(comp => {
            comp.active = false;
            const /** @type {?} */ target = this.doc.querySelector(comp.nzHref);
            const /** @type {?} */ top = this.scrollSrv.getOffset(target).top;
            if (target && top < this.nzOffsetTop + this.nzBounds) {
                sections.push({
                    top,
                    comp
                });
            }
        });
        this._visible = !!sections.length;
        if (!this._visible) {
            return;
        }
        const /** @type {?} */ maxSection = sections.reduce((prev, curr) => curr.top > prev.top ? curr : prev);
        maxSection.comp.active = true;
        const /** @type {?} */ linkNode = /** @type {?} */ ((/** @type {?} */ (maxSection.comp.el.nativeElement)).querySelector('.ant-anchor-link-title'));
        this.ball.nativeElement.style.top = `${linkNode.offsetTop + linkNode.clientHeight / 2 - 4.5}px`;
        this.nzScroll.emit(maxSection.comp);
    }
    /**
     * @return {?}
     */
    removeListen() {
        if (this.scroll$) {
            this.scroll$.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    registerScrollEvent() {
        this.removeListen();
        // 由于页面刷新时滚动条位置的记忆
        // 倒置在dom未渲染完成，导致计算不正确（500ms用于延后执行解决）
        setTimeout(() => {
            this.handleScroll();
        }, 500);
        this.scroll$ = fromEvent$1(this.getTarget(), 'scroll').pipe(throttleTime$1(50), distinctUntilChanged$1())
            .subscribe(e => {
            this.handleScroll();
        });
    }
    /**
     * @param {?} linkComp
     * @return {?}
     */
    add(linkComp) {
        this.links.push(linkComp);
    }
    /**
     * 设置滚动条至 `linkComp` 所处位置
     * @param {?} linkComp
     * @return {?}
     */
    scrollTo(linkComp) {
        const /** @type {?} */ el = this.doc.querySelector(linkComp.nzHref);
        if (!el) {
            return;
        }
        this.animating = true;
        const /** @type {?} */ containerScrollTop = this.scrollSrv.getScroll(this.getTarget());
        const /** @type {?} */ elOffsetTop = this.scrollSrv.getOffset(el).top;
        const /** @type {?} */ targetScrollTop = containerScrollTop + elOffsetTop - this.nzOffsetTop;
        this.scrollSrv.scrollTo(this.getTarget(), targetScrollTop, null, () => {
            this.animating = false;
            this.handleScroll();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListen();
    }
}
NzAnchorComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-anchor',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-anchor-wrapper" #container>
      <div class="ant-anchor">
        <div class="ant-anchor-ink">
          <div class="ant-anchor-ink-ball" [class.visible]="_visible" #ball></div>
        </div>
        <ng-content></ng-content>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-anchor {
  position: relative;
}
.ant-anchor-wrapper {
  background-color: #fff;
}
.ant-anchor-ink {
  position: absolute;
  height: 100%;
  left: 0;
  top: 0;
}
.ant-anchor-ink:before {
  content: ' ';
  position: relative;
  width: 2px;
  height: 100%;
  display: block;
  background-color: #e9e9e9;
  margin: 0 auto;
}
.ant-anchor-ink-ball {
  display: none;
  position: absolute;
  width: 9px;
  height: 9px;
  border-radius: 9px;
  border: 3px solid #108ee9;
  background-color: #fff;
  left: 50%;
  transition: top 0.3s ease-in-out;
  transform: translateX(-50%);
}
.ant-anchor-ink-ball.visible {
  display: inline-block;
}
.ant-anchor.fixed .ant-anchor-ink .ant-anchor-ink-ball {
  display: none;
}
.ant-anchor-link {
  padding: 8px 0 8px 18px;
  line-height: 1;
}
.ant-anchor-link-title {
  display: block;
  position: relative;
  transition: all .3s;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  margin-bottom: 8px;
}
.ant-anchor-link-title:only-child {
  margin-bottom: 0;
}
.ant-anchor-link-active > .ant-anchor-link-title {
  color: #108ee9;
}
.ant-anchor-link .ant-anchor-link {
  padding-top: 6px;
  padding-bottom: 6px;
}
`,
                    `nz-link {
  display: block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzAnchorComponent.ctorParameters = () => [
    { type: NzScrollService, },
    { type: Renderer2, },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];
NzAnchorComponent.propDecorators = {
    "container": [{ type: ViewChild, args: ['container',] },],
    "ball": [{ type: ViewChild, args: ['ball',] },],
    "nzTarget": [{ type: Input },],
    "nzOffsetTop": [{ type: Input },],
    "nzBounds": [{ type: Input },],
    "nzScroll": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAnchorLinkComponent {
    /**
     * @param {?} el
     * @param {?} _anchorComp
     */
    constructor(el, _anchorComp) {
        this.el = el;
        this._anchorComp = _anchorComp;
        this.active = false;
        this._anchorComp.add(this);
    }
    /**
     * @return {?}
     */
    _onClick() {
        this._anchorComp.scrollTo(this);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    goToClick(e) {
        e.preventDefault();
        e.stopPropagation();
        this._anchorComp.scrollTo(this);
        // return false;
    }
}
NzAnchorLinkComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-link',
                encapsulation: ViewEncapsulation.None,
                template: `
    <a (click)="goToClick($event)" href="{{nzHref}}" class="ant-anchor-link-title">
      <span *ngIf="!nzTemplate">{{ nzTitle }}</span>
      <ng-template *ngIf="nzTemplate" [ngTemplateOutlet]="nzTemplate"></ng-template>
    </a>
    <ng-content></ng-content>
  `,
                host: {
                    '[class.ant-anchor-link]': 'true'
                }
            },] },
];
/** @nocollapse */
NzAnchorLinkComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzAnchorComponent, },
];
NzAnchorLinkComponent.propDecorators = {
    "nzHref": [{ type: Input },],
    "nzTitle": [{ type: Input },],
    "nzTemplate": [{ type: ContentChild, args: ['nzTemplate',] },],
    "active": [{ type: HostBinding, args: ['class.ant-anchor-link-active',] },],
    "_onClick": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAnchorModule {
}
NzAnchorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAnchorComponent, NzAnchorLinkComponent],
                exports: [NzAnchorComponent, NzAnchorLinkComponent],
                imports: [CommonModule],
                providers: [SCROLL_SERVICE_PROVIDER]
            },] },
];
/** @nocollapse */
NzAnchorModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAvatarComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._prefixCls = 'ant-avatar';
        this._classList = [];
        this._sizeMap = { large: 'lg', small: 'sm' };
        this._hasText = false;
        this._isSrcExist = true;
        this._hasIcon = false;
        this.nzShape = 'circle';
        this.nzSize = 'default';
        this._el = _elementRef.nativeElement;
        this._renderer.addClass(this._el, this._prefixCls);
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this._sizeMap[this.nzSize] && `${this._prefixCls}-${this._sizeMap[this.nzSize]}`,
            this.nzShape && `${this._prefixCls}-${this.nzShape}`,
            this.nzIcon && `${this._prefixCls}-icon`,
            this.nzSrc && `${this._prefixCls}-image`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
        return this;
    }
    /**
     * @return {?}
     */
    _imgError() {
        this._isSrcExist = false;
        // TODO(i): need force remove [nzSrc] if broken image?
        this._hasIcon = false;
        this._hasText = false;
        if (this.nzIcon) {
            this._hasIcon = true;
        }
        else if (this.nzText) {
            this._hasText = true;
        }
        this._setClassMap()._notifyCalc();
    }
    /**
     * @return {?}
     */
    _calcStringSize() {
        if (!this._hasText)
            return;
        const /** @type {?} */ el = this._textEl && this._textEl.nativeElement;
        if (!el)
            return;
        const /** @type {?} */ childrenWidth = el.offsetWidth;
        const /** @type {?} */ avatarWidth = this._el.getBoundingClientRect().width;
        const /** @type {?} */ scale = avatarWidth - 8 < childrenWidth ? (avatarWidth - 8) / childrenWidth : 1;
        if (scale === 1) {
            this._textStyles = {};
        }
        else {
            this._textStyles = {
                transform: `scale(${scale})`,
                position: 'absolute',
                display: 'inline-block',
                left: `calc(50% - ${Math.round(childrenWidth / 2)}px)`
            };
        }
    }
    /**
     * @return {?}
     */
    _notifyCalc() {
        // If use ngAfterViewChecked, always demands more computations, so......
        setTimeout(() => {
            this._calcStringSize();
        });
        return this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._hasText = !this.nzSrc && !!this.nzText;
        this._hasIcon = !this.nzSrc && !!this.nzIcon;
        this._setClassMap()._notifyCalc();
    }
}
NzAvatarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-avatar',
                encapsulation: ViewEncapsulation.None,
                template: `
  <i class="anticon anticon-{{nzIcon}}" *ngIf="nzIcon && _hasIcon"></i>
  <img [src]="nzSrc" *ngIf="nzSrc && _isSrcExist" (error)="_imgError($event)"/>
  <span class="ant-avatar-string" #textEl [ngStyle]="_textStyles" *ngIf="nzText && _hasText">{{ nzText }}</span>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-avatar {
  display: inline-block;
  text-align: center;
  background: #ccc;
  color: #fff;
  white-space: nowrap;
  position: relative;
  overflow: hidden;
  width: 32px;
  height: 32px;
  line-height: 32px;
  border-radius: 16px;
}
.ant-avatar > * {
  line-height: 32px;
}
.ant-avatar.ant-avatar-icon {
  font-size: 18px;
}
.ant-avatar-lg {
  width: 40px;
  height: 40px;
  line-height: 40px;
  border-radius: 20px;
}
.ant-avatar-lg > * {
  line-height: 40px;
}
.ant-avatar-lg.ant-avatar-icon {
  font-size: 24px;
}
.ant-avatar-sm {
  width: 24px;
  height: 24px;
  line-height: 24px;
  border-radius: 12px;
}
.ant-avatar-sm > * {
  line-height: 24px;
}
.ant-avatar-sm.ant-avatar-icon {
  font-size: 14px;
}
.ant-avatar-square {
  border-radius: 4px;
}
.ant-avatar > img {
  width: 100%;
  height: 100%;
  display: block;
}
`,
                    ``
                ]
            },] },
];
/** @nocollapse */
NzAvatarComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzAvatarComponent.propDecorators = {
    "_textEl": [{ type: ViewChild, args: ['textEl',] },],
    "nzShape": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzText": [{ type: Input },],
    "nzSrc": [{ type: Input },],
    "nzIcon": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzAvatarModule {
}
NzAvatarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzAvatarComponent],
                exports: [NzAvatarComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzAvatarModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBackTopComponent {
    /**
     * @param {?} scrollSrv
     * @param {?} _renderer
     */
    constructor(scrollSrv, _renderer) {
        this.scrollSrv = scrollSrv;
        this._renderer = _renderer;
        this.scroll$ = null;
        this.target = null;
        this._display = false;
        this.nzVisibilityHeight = 400;
        this.nzClick = new EventEmitter();
    }
    /**
     * @param {?} el
     * @return {?}
     */
    set nzTarget(el) {
        this.target = el;
        this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.scroll$)
            this.registerScrollEvent();
    }
    /**
     * @return {?}
     */
    clickBackTop() {
        this.scrollSrv.scrollTo(this.getTarget(), 0);
        this.nzClick.emit(true);
    }
    /**
     * @return {?}
     */
    getTarget() {
        return this.target || window;
    }
    /**
     * @return {?}
     */
    handleScroll() {
        this._display = this.scrollSrv.getScroll(this.getTarget()) > this.nzVisibilityHeight;
    }
    /**
     * @return {?}
     */
    removeListen() {
        if (this.scroll$)
            this.scroll$.unsubscribe();
    }
    /**
     * @return {?}
     */
    registerScrollEvent() {
        this.removeListen();
        this.handleScroll();
        this.scroll$ = fromEvent$1(this.getTarget(), 'scroll').pipe(throttleTime$1(50), distinctUntilChanged$1())
            .subscribe(e => {
            this.handleScroll();
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeListen();
    }
}
NzBackTopComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-back-top',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        transition(':enter', [
                            style({ opacity: 0 }),
                            animate(300, style({ opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ opacity: 1 }),
                            animate(300, style({ opacity: 0 }))
                        ])
                    ])
                ],
                template: `
    <div class="ant-back-top" (click)="clickBackTop()" [@enterLeave] *ngIf="_display">
      <ng-template #defaultContent>
        <div class="ant-back-top-content"><i class="anticon anticon-to-top ant-back-top-icon"></i></div>
      </ng-template>
      <ng-template [ngTemplateOutlet]="nzTemplate || defaultContent"></ng-template>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-back-top {
  z-index: 10;
  position: fixed;
  right: 100px;
  bottom: 50px;
  height: 40px;
  width: 40px;
  cursor: pointer;
}
.ant-back-top-content {
  height: 40px;
  width: 40px;
  border-radius: 20px;
  background-color: rgba(64, 64, 64, 0.4);
  color: #fff;
  text-align: center;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-back-top-content:hover {
  background-color: rgba(64, 64, 64, 0.6);
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-back-top-icon {
  font-size: 20px;
  margin-top: 10px;
}
`,
                    ``
                ]
            },] },
];
/** @nocollapse */
NzBackTopComponent.ctorParameters = () => [
    { type: NzScrollService, },
    { type: Renderer2, },
];
NzBackTopComponent.propDecorators = {
    "nzTemplate": [{ type: ContentChild, args: ['nzTemplate',] },],
    "nzVisibilityHeight": [{ type: Input },],
    "nzTarget": [{ type: Input },],
    "nzClick": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBackTopModule {
}
NzBackTopModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzBackTopComponent],
                exports: [NzBackTopComponent],
                imports: [CommonModule],
                providers: [SCROLL_SERVICE_PROVIDER]
            },] },
];
/** @nocollapse */
NzBackTopModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBadgeComponent {
    constructor() {
        this._showDot = false;
        this._showZero = false;
        this.countArray = [];
        this.countSingleArray = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
        this.nzOverflowCount = 99;
    }
    /**
     * @return {?}
     */
    get setNoWrapper() {
        return !this.content;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowZero(value) {
        this._showZero = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowZero() {
        return this._showZero;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDot(value) {
        this._showDot = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDot() {
        return this._showDot;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCount(value) {
        if (value < 0) {
            this.count = 0;
        }
        else {
            this.count = value;
        }
        this.countArray = this.count.toString().split('');
    }
    /**
     * @return {?}
     */
    get nzCount() {
        return this.count;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.maxNumberArray = this.nzOverflowCount.toString().split('');
    }
}
NzBadgeComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-badge',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        transition('void => *', [
                            style({ opacity: 0 }),
                            animate('0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46)')
                        ]),
                        transition('* => void', [
                            style({ opacity: 1 }),
                            animate('0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46)')
                        ])
                    ])
                ],
                template: `
    <ng-template *ngIf="content" [ngTemplateOutlet]="content"></ng-template>
    <span class="ant-badge-status-dot ant-badge-status-{{nzStatus}}" *ngIf="nzStatus"></span>
    <span class="ant-badge-status-text" *ngIf="nzText">{{ nzText }}</span>
    <sup [@enterLeave]
         [ngStyle]="nzStyle"
         *ngIf="(nzDot)||(nzCount>0)||((nzCount==0)&&nzShowZero)"
         data-show="true"
         class="ant-scroll-number"
         [class.ant-badge-count]="!nzDot"
         [class.ant-badge-dot]="nzDot">
      <ng-template ngFor
                   [ngForOf]="maxNumberArray"
                   let-number
                   let-i="index"><span *ngIf="nzCount<=nzOverflowCount"
                                       class="ant-scroll-number-only"
                                       [style.transform]="'translateY('+((-countArray[i]*100))+'%)'">
        <ng-template [ngIf]="(!nzDot)&&(countArray[i]!=null)">
          <p *ngFor="let p of countSingleArray" [class.current]="p==countArray[i]">{{ p }}</p>
        </ng-template>
        </span></ng-template>
      <ng-template [ngIf]="nzCount>nzOverflowCount">{{ nzOverflowCount }}+</ng-template>
    </sup>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-badge {
  position: relative;
  display: inline-block;
  line-height: 1;
  vertical-align: middle;
}
.ant-badge-count {
  position: absolute;
  transform: translateX(-50%);
  top: -10px;
  height: 20px;
  border-radius: 10px;
  min-width: 20px;
  background: #f04134;
  color: #fff;
  line-height: 20px;
  text-align: center;
  padding: 0 6px;
  font-size: 12px;
  white-space: nowrap;
  transform-origin: -10% center;
  font-family: tahoma;
}
.ant-badge-count a,
.ant-badge-count a:hover {
  color: #fff;
}
.ant-badge-dot {
  position: absolute;
  transform: translateX(-50%);
  transform-origin: 0 center;
  top: -4px;
  height: 8px;
  width: 8px;
  border-radius: 100%;
  background: #f04134;
  z-index: 10;
  box-shadow: 0 0 0 1px #fff;
}
.ant-badge-status {
  line-height: inherit;
  vertical-align: baseline;
}
.ant-badge-status-dot {
  width: 8px;
  height: 8px;
  display: inline-block;
  border-radius: 50%;
}
.ant-badge-status-success {
  background-color: #00a854;
}
.ant-badge-status-processing {
  background-color: #108ee9;
  position: relative;
}
.ant-badge-status-processing:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #108ee9;
  content: '';
  animation: antStatusProcessing 1.2s infinite ease-in-out;
}
.ant-badge-status-default {
  background-color: #d9d9d9;
}
.ant-badge-status-error {
  background-color: #f04134;
}
.ant-badge-status-warning {
  background-color: #ffbf00;
}
.ant-badge-status-text {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
  margin-left: 8px;
}
.ant-badge-zoom-appear,
.ant-badge-zoom-enter {
  animation: antZoomBadgeIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  animation-fill-mode: both;
}
.ant-badge-zoom-leave {
  animation: antZoomBadgeOut 0.3s cubic-bezier(0.71, -0.46, 0.88, 0.6);
  animation-fill-mode: both;
}
.ant-badge-not-a-wrapper .ant-badge-count {
  top: auto;
  display: block;
  position: relative;
  transform: none !important;
}
@keyframes antStatusProcessing {
  0% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  100% {
    transform: scale(2.4);
    opacity: 0;
  }
}
.ant-scroll-number {
  overflow: hidden;
}
.ant-scroll-number-only {
  display: inline-block;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  height: 20px;
}
.ant-scroll-number-only > p {
  height: 20px;
}
@keyframes antZoomBadgeIn {
  0% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
  100% {
    transform: scale(1) translateX(-50%);
  }
}
@keyframes antZoomBadgeOut {
  0% {
    transform: scale(1) translateX(-50%);
  }
  100% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-badge {
  position: relative;
  display: inline-block;
  line-height: 1;
  vertical-align: middle;
}
.ant-badge-count {
  position: absolute;
  transform: translateX(-50%);
  top: -10px;
  height: 20px;
  border-radius: 10px;
  min-width: 20px;
  background: #f04134;
  color: #fff;
  line-height: 20px;
  text-align: center;
  padding: 0 6px;
  font-size: 12px;
  white-space: nowrap;
  transform-origin: -10% center;
  font-family: tahoma;
}
.ant-badge-count a,
.ant-badge-count a:hover {
  color: #fff;
}
.ant-badge-dot {
  position: absolute;
  transform: translateX(-50%);
  transform-origin: 0 center;
  top: -4px;
  height: 8px;
  width: 8px;
  border-radius: 100%;
  background: #f04134;
  z-index: 10;
  box-shadow: 0 0 0 1px #fff;
}
.ant-badge-status {
  line-height: inherit;
  vertical-align: baseline;
}
.ant-badge-status-dot {
  width: 8px;
  height: 8px;
  display: inline-block;
  border-radius: 50%;
}
.ant-badge-status-success {
  background-color: #00a854;
}
.ant-badge-status-processing {
  background-color: #108ee9;
  position: relative;
}
.ant-badge-status-processing:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #108ee9;
  content: '';
  animation: antStatusProcessing 1.2s infinite ease-in-out;
}
.ant-badge-status-default {
  background-color: #d9d9d9;
}
.ant-badge-status-error {
  background-color: #f04134;
}
.ant-badge-status-warning {
  background-color: #ffbf00;
}
.ant-badge-status-text {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
  margin-left: 8px;
}
.ant-badge-zoom-appear,
.ant-badge-zoom-enter {
  animation: antZoomBadgeIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  animation-fill-mode: both;
}
.ant-badge-zoom-leave {
  animation: antZoomBadgeOut 0.3s cubic-bezier(0.71, -0.46, 0.88, 0.6);
  animation-fill-mode: both;
}
.ant-badge-not-a-wrapper .ant-badge-count {
  top: auto;
  display: block;
  position: relative;
  transform: none !important;
}
@keyframes antStatusProcessing {
  0% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  100% {
    transform: scale(2.4);
    opacity: 0;
  }
}
.ant-scroll-number {
  overflow: hidden;
}
.ant-scroll-number-only {
  display: inline-block;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  height: 20px;
}
.ant-scroll-number-only > p {
  height: 20px;
}
@keyframes antZoomBadgeIn {
  0% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
  100% {
    transform: scale(1) translateX(-50%);
  }
}
@keyframes antZoomBadgeOut {
  0% {
    transform: scale(1) translateX(-50%);
  }
  100% {
    opacity: 0;
    transform: scale(0) translateX(-50%);
  }
}
.ant-badge-count {
  position: absolute;
  transform: translateX(50%);
  right: 0;
}
.ant-badge-dot {
  position: absolute;
  transform: translateX(50%);
  right: 0;
}
`
                ],
                host: {
                    '[class.ant-badge]': 'true'
                }
            },] },
];
/** @nocollapse */
NzBadgeComponent.ctorParameters = () => [];
NzBadgeComponent.propDecorators = {
    "content": [{ type: ContentChild, args: ['content',] },],
    "setNoWrapper": [{ type: HostBinding, args: ['class.ant-badge-not-a-wrapper',] },],
    "nzOverflowCount": [{ type: Input },],
    "nzShowZero": [{ type: Input },],
    "nzDot": [{ type: Input },],
    "nzText": [{ type: Input },],
    "nzStyle": [{ type: Input },],
    "nzStatus": [{ type: Input }, { type: HostBinding, args: ['class.ant-badge-status',] },],
    "nzCount": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBadgeModule {
}
NzBadgeModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzBadgeComponent],
                exports: [NzBadgeComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzBadgeModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBreadCrumbComponent {
    constructor() {
        this.nzSeparator = '/';
    }
}
NzBreadCrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-breadcrumb',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-breadcrumb {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-breadcrumb a {
  color: rgba(0, 0, 0, 0.65);
  transition: color .3s;
}
.ant-breadcrumb a:hover {
  color: #49a9ee;
}
.ant-breadcrumb > span:last-child {
  font-weight: 500;
  color: rgba(0, 0, 0, 0.65);
}
.ant-breadcrumb > span:last-child .ant-breadcrumb-separator {
  display: none;
}
.ant-breadcrumb-separator {
  margin: 0 8px;
  color: rgba(0, 0, 0, 0.3);
}
.ant-breadcrumb-link > .anticon + span {
  margin-left: 4px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-breadcrumb {
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-breadcrumb a {
  color: rgba(0, 0, 0, 0.65);
  transition: color .3s;
}
.ant-breadcrumb a:hover {
  color: #49a9ee;
}
.ant-breadcrumb > span:last-child {
  font-weight: 500;
  color: rgba(0, 0, 0, 0.65);
}
.ant-breadcrumb > span:last-child .ant-breadcrumb-separator {
  display: none;
}
.ant-breadcrumb-separator {
  margin: 0 8px;
  color: rgba(0, 0, 0, 0.3);
}
.ant-breadcrumb-link > .anticon + span {
  margin-left: 4px;
}
.ant-breadcrumb {
  display: block;
}
.ant-breadcrumb > nz-breadcrumb-item:last-child {
  font-weight: bold;
  color: rgba(0, 0, 0, 0.65);
}
.ant-breadcrumb > nz-breadcrumb-item:last-child .ant-breadcrumb-separator {
  display: none;
}
`
                ],
                host: {
                    '[class.ant-breadcrumb]': 'true'
                }
            },] },
];
/** @nocollapse */
NzBreadCrumbComponent.ctorParameters = () => [];
NzBreadCrumbComponent.propDecorators = {
    "nzSeparator": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBreadCrumbItemComponent {
    /**
     * @param {?} nzBreadCrumbComponent
     */
    constructor(nzBreadCrumbComponent) {
        this.nzBreadCrumbComponent = nzBreadCrumbComponent;
    }
}
NzBreadCrumbItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-breadcrumb-item',
                template: `
    <span class="ant-breadcrumb-link">
      <ng-content></ng-content>
    </span>
    <span class="ant-breadcrumb-separator">{{ nzBreadCrumbComponent?.nzSeparator }}</span>`
            },] },
];
/** @nocollapse */
NzBreadCrumbItemComponent.ctorParameters = () => [
    { type: NzBreadCrumbComponent, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzBreadCrumbModule {
}
NzBreadCrumbModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NzBreadCrumbComponent, NzBreadCrumbItemComponent],
                exports: [NzBreadCrumbComponent, NzBreadCrumbItemComponent]
            },] },
];
/** @nocollapse */
NzBreadCrumbModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzButtonGroupComponent {
    constructor() {
        this._prefixCls = 'ant-btn-group';
        this._sizeMap = { large: 'lg', small: 'sm' };
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this._sizeMap[this.nzSize]}`]: this._sizeMap[this.nzSize]
        };
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this._sizeMap[this.nzSize]}`]: this._sizeMap[this.nzSize]
        };
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** trim text node between button */
        Array.from(this._groupWrapper.nativeElement.childNodes).forEach((node) => {
            if (node.nodeType === 3) {
                this._groupWrapper.nativeElement.removeChild(node);
            }
        });
    }
}
NzButtonGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-button-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_classMap" #groupWrapper>
      <ng-content></ng-content>
    </div>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NzButtonGroupComponent.ctorParameters = () => [];
NzButtonGroupComponent.propDecorators = {
    "_groupWrapper": [{ type: ViewChild, args: ['groupWrapper',] },],
    "nzSize": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzButtonComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._ghost = false;
        this._loading = false;
        this._classList = [];
        this._iconOnly = false;
        this._clicked = false;
        this._prefixCls = 'ant-btn';
        this._sizeMap = { large: 'lg', small: 'sm' };
        this._el = this._elementRef.nativeElement;
        this.nativeElement = this._elementRef.nativeElement;
        this._renderer.addClass(this._el, this._prefixCls);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzGhost(value) {
        this._ghost = toBoolean(value);
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzGhost() {
        return this._ghost;
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        this._type = value;
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzShape() {
        return this._shape;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShape(value) {
        this._shape = value;
        this._setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLoading(value) {
        this._loading = toBoolean(value);
        this._setClassMap();
        this._setIconDisplay(value);
    }
    /**
     * @return {?}
     */
    get nzLoading() {
        return this._loading;
    }
    /**
     * toggle button clicked animation
     * @return {?}
     */
    _onClick() {
        this._clicked = true;
        this._setClassMap();
        setTimeout(() => {
            this._clicked = false;
            this._setClassMap();
        }, 300);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _setIconDisplay(value) {
        const /** @type {?} */ innerI = this._iconElement;
        if (innerI) {
            this._renderer.setStyle(innerI, 'display', value ? 'none' : 'inline-block');
        }
    }
    /**
     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this.nzType && `${this._prefixCls}-${this.nzType}`,
            this.nzShape && `${this._prefixCls}-${this.nzShape}`,
            this._sizeMap[this.nzSize] && `${this._prefixCls}-${this._sizeMap[this.nzSize]}`,
            this.nzLoading && `${this._prefixCls}-loading`,
            this._clicked && `${this._prefixCls}-clicked`,
            this._iconOnly && `${this._prefixCls}-icon-only`,
            this.nzGhost && `${this._prefixCls}-background-ghost`,
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._iconElement = this._innerIElement;
        /** check if host children only has i element */
        if (this._iconElement && this._el.children.length === 1 && (this._iconElement.isEqualNode(this._el.children[0]))) {
            this._iconOnly = true;
            this._setClassMap();
        }
        this._setIconDisplay(this.nzLoading);
    }
    /**
     * @return {?}
     */
    get _innerIElement() {
        return this._el.querySelector('i');
    }
}
NzButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-button]',
                encapsulation: ViewEncapsulation.None,
                template: `<i class="anticon anticon-spin anticon-loading" *ngIf="nzLoading"></i> <ng-content></ng-content> `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  font-size: 12px;
  border-radius: 4px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
}
.ant-btn > .anticon {
  line-height: 1;
}
.ant-btn,
.ant-btn:active,
.ant-btn:focus {
  outline: 0;
}
.ant-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-btn.disabled,
.ant-btn[disabled] {
  cursor: not-allowed;
}
.ant-btn.disabled > *,
.ant-btn[disabled] > * {
  pointer-events: none;
}
.ant-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-btn > a:only-child {
  color: currentColor;
}
.ant-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn:hover,
.ant-btn:focus {
  color: #108ee9;
  background-color: #fff;
  border-color: #108ee9;
}
.ant-btn:hover > a:only-child,
.ant-btn:focus > a:only-child {
  color: currentColor;
}
.ant-btn:hover > a:only-child:after,
.ant-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn:active,
.ant-btn.active {
  color: #0e77ca;
  background-color: #fff;
  border-color: #0e77ca;
}
.ant-btn:active > a:only-child,
.ant-btn.active > a:only-child {
  color: currentColor;
}
.ant-btn:active > a:only-child:after,
.ant-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn.disabled,
.ant-btn[disabled],
.ant-btn.disabled:hover,
.ant-btn[disabled]:hover,
.ant-btn.disabled:focus,
.ant-btn[disabled]:focus,
.ant-btn.disabled:active,
.ant-btn[disabled]:active,
.ant-btn.disabled.active,
.ant-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn.disabled > a:only-child,
.ant-btn[disabled] > a:only-child,
.ant-btn.disabled:hover > a:only-child,
.ant-btn[disabled]:hover > a:only-child,
.ant-btn.disabled:focus > a:only-child,
.ant-btn[disabled]:focus > a:only-child,
.ant-btn.disabled:active > a:only-child,
.ant-btn[disabled]:active > a:only-child,
.ant-btn.disabled.active > a:only-child,
.ant-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn.disabled > a:only-child:after,
.ant-btn[disabled] > a:only-child:after,
.ant-btn.disabled:hover > a:only-child:after,
.ant-btn[disabled]:hover > a:only-child:after,
.ant-btn.disabled:focus > a:only-child:after,
.ant-btn[disabled]:focus > a:only-child:after,
.ant-btn.disabled:active > a:only-child:after,
.ant-btn[disabled]:active > a:only-child:after,
.ant-btn.disabled.active > a:only-child:after,
.ant-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn:hover,
.ant-btn:focus,
.ant-btn:active,
.ant-btn.active {
  background: #fff;
}
.ant-btn > i,
.ant-btn > span {
  pointer-events: none;
}
.ant-btn-primary {
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-btn-primary > a:only-child {
  color: currentColor;
}
.ant-btn-primary > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-primary:hover,
.ant-btn-primary:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-btn-primary:hover > a:only-child,
.ant-btn-primary:focus > a:only-child {
  color: currentColor;
}
.ant-btn-primary:hover > a:only-child:after,
.ant-btn-primary:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-primary:active,
.ant-btn-primary.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-btn-primary:active > a:only-child,
.ant-btn-primary.active > a:only-child {
  color: currentColor;
}
.ant-btn-primary:active > a:only-child:after,
.ant-btn-primary.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-primary.disabled,
.ant-btn-primary[disabled],
.ant-btn-primary.disabled:hover,
.ant-btn-primary[disabled]:hover,
.ant-btn-primary.disabled:focus,
.ant-btn-primary[disabled]:focus,
.ant-btn-primary.disabled:active,
.ant-btn-primary[disabled]:active,
.ant-btn-primary.disabled.active,
.ant-btn-primary[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-primary.disabled > a:only-child,
.ant-btn-primary[disabled] > a:only-child,
.ant-btn-primary.disabled:hover > a:only-child,
.ant-btn-primary[disabled]:hover > a:only-child,
.ant-btn-primary.disabled:focus > a:only-child,
.ant-btn-primary[disabled]:focus > a:only-child,
.ant-btn-primary.disabled:active > a:only-child,
.ant-btn-primary[disabled]:active > a:only-child,
.ant-btn-primary.disabled.active > a:only-child,
.ant-btn-primary[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-primary.disabled > a:only-child:after,
.ant-btn-primary[disabled] > a:only-child:after,
.ant-btn-primary.disabled:hover > a:only-child:after,
.ant-btn-primary[disabled]:hover > a:only-child:after,
.ant-btn-primary.disabled:focus > a:only-child:after,
.ant-btn-primary[disabled]:focus > a:only-child:after,
.ant-btn-primary.disabled:active > a:only-child:after,
.ant-btn-primary[disabled]:active > a:only-child:after,
.ant-btn-primary.disabled.active > a:only-child:after,
.ant-btn-primary[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-group .ant-btn-primary:not(:first-child):not(:last-child) {
  border-right-color: #0e77ca;
  border-left-color: #0e77ca;
}
.ant-btn-group .ant-btn-primary:not(:first-child):not(:last-child):disabled {
  border-color: #d9d9d9;
}
.ant-btn-group .ant-btn-primary:first-child:not(:last-child) {
  border-right-color: #0e77ca;
}
.ant-btn-group .ant-btn-primary:first-child:not(:last-child)[disabled] {
  border-right-color: #d9d9d9;
}
.ant-btn-group .ant-btn-primary:last-child:not(:first-child),
.ant-btn-group .ant-btn-primary + .ant-btn-primary {
  border-left-color: #0e77ca;
}
.ant-btn-group .ant-btn-primary:last-child:not(:first-child)[disabled],
.ant-btn-group .ant-btn-primary + .ant-btn-primary[disabled] {
  border-left-color: #d9d9d9;
}
.ant-btn-ghost {
  color: rgba(0, 0, 0, 0.65);
  background-color: transparent;
  border-color: #d9d9d9;
}
.ant-btn-ghost > a:only-child {
  color: currentColor;
}
.ant-btn-ghost > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-ghost:hover,
.ant-btn-ghost:focus {
  color: #108ee9;
  background-color: transparent;
  border-color: #108ee9;
}
.ant-btn-ghost:hover > a:only-child,
.ant-btn-ghost:focus > a:only-child {
  color: currentColor;
}
.ant-btn-ghost:hover > a:only-child:after,
.ant-btn-ghost:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-ghost:active,
.ant-btn-ghost.active {
  color: #0e77ca;
  background-color: transparent;
  border-color: #0e77ca;
}
.ant-btn-ghost:active > a:only-child,
.ant-btn-ghost.active > a:only-child {
  color: currentColor;
}
.ant-btn-ghost:active > a:only-child:after,
.ant-btn-ghost.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-ghost.disabled,
.ant-btn-ghost[disabled],
.ant-btn-ghost.disabled:hover,
.ant-btn-ghost[disabled]:hover,
.ant-btn-ghost.disabled:focus,
.ant-btn-ghost[disabled]:focus,
.ant-btn-ghost.disabled:active,
.ant-btn-ghost[disabled]:active,
.ant-btn-ghost.disabled.active,
.ant-btn-ghost[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-ghost.disabled > a:only-child,
.ant-btn-ghost[disabled] > a:only-child,
.ant-btn-ghost.disabled:hover > a:only-child,
.ant-btn-ghost[disabled]:hover > a:only-child,
.ant-btn-ghost.disabled:focus > a:only-child,
.ant-btn-ghost[disabled]:focus > a:only-child,
.ant-btn-ghost.disabled:active > a:only-child,
.ant-btn-ghost[disabled]:active > a:only-child,
.ant-btn-ghost.disabled.active > a:only-child,
.ant-btn-ghost[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-ghost.disabled > a:only-child:after,
.ant-btn-ghost[disabled] > a:only-child:after,
.ant-btn-ghost.disabled:hover > a:only-child:after,
.ant-btn-ghost[disabled]:hover > a:only-child:after,
.ant-btn-ghost.disabled:focus > a:only-child:after,
.ant-btn-ghost[disabled]:focus > a:only-child:after,
.ant-btn-ghost.disabled:active > a:only-child:after,
.ant-btn-ghost[disabled]:active > a:only-child:after,
.ant-btn-ghost.disabled.active > a:only-child:after,
.ant-btn-ghost[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-style: dashed;
}
.ant-btn-dashed > a:only-child {
  color: currentColor;
}
.ant-btn-dashed > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed:hover,
.ant-btn-dashed:focus {
  color: #108ee9;
  background-color: #fff;
  border-color: #108ee9;
}
.ant-btn-dashed:hover > a:only-child,
.ant-btn-dashed:focus > a:only-child {
  color: currentColor;
}
.ant-btn-dashed:hover > a:only-child:after,
.ant-btn-dashed:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed:active,
.ant-btn-dashed.active {
  color: #0e77ca;
  background-color: #fff;
  border-color: #0e77ca;
}
.ant-btn-dashed:active > a:only-child,
.ant-btn-dashed.active > a:only-child {
  color: currentColor;
}
.ant-btn-dashed:active > a:only-child:after,
.ant-btn-dashed.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-dashed.disabled,
.ant-btn-dashed[disabled],
.ant-btn-dashed.disabled:hover,
.ant-btn-dashed[disabled]:hover,
.ant-btn-dashed.disabled:focus,
.ant-btn-dashed[disabled]:focus,
.ant-btn-dashed.disabled:active,
.ant-btn-dashed[disabled]:active,
.ant-btn-dashed.disabled.active,
.ant-btn-dashed[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-dashed.disabled > a:only-child,
.ant-btn-dashed[disabled] > a:only-child,
.ant-btn-dashed.disabled:hover > a:only-child,
.ant-btn-dashed[disabled]:hover > a:only-child,
.ant-btn-dashed.disabled:focus > a:only-child,
.ant-btn-dashed[disabled]:focus > a:only-child,
.ant-btn-dashed.disabled:active > a:only-child,
.ant-btn-dashed[disabled]:active > a:only-child,
.ant-btn-dashed.disabled.active > a:only-child,
.ant-btn-dashed[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-dashed.disabled > a:only-child:after,
.ant-btn-dashed[disabled] > a:only-child:after,
.ant-btn-dashed.disabled:hover > a:only-child:after,
.ant-btn-dashed[disabled]:hover > a:only-child:after,
.ant-btn-dashed.disabled:focus > a:only-child:after,
.ant-btn-dashed[disabled]:focus > a:only-child:after,
.ant-btn-dashed.disabled:active > a:only-child:after,
.ant-btn-dashed[disabled]:active > a:only-child:after,
.ant-btn-dashed.disabled.active > a:only-child:after,
.ant-btn-dashed[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger {
  color: #f04134;
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-danger > a:only-child {
  color: currentColor;
}
.ant-btn-danger > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger:hover,
.ant-btn-danger:focus {
  color: #fff;
  background-color: #f04134;
  border-color: #f04134;
}
.ant-btn-danger:hover > a:only-child,
.ant-btn-danger:focus > a:only-child {
  color: currentColor;
}
.ant-btn-danger:hover > a:only-child:after,
.ant-btn-danger:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger:active,
.ant-btn-danger.active {
  color: #fff;
  background-color: #d73435;
  border-color: #d73435;
}
.ant-btn-danger:active > a:only-child,
.ant-btn-danger.active > a:only-child {
  color: currentColor;
}
.ant-btn-danger:active > a:only-child:after,
.ant-btn-danger.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-danger.disabled,
.ant-btn-danger[disabled],
.ant-btn-danger.disabled:hover,
.ant-btn-danger[disabled]:hover,
.ant-btn-danger.disabled:focus,
.ant-btn-danger[disabled]:focus,
.ant-btn-danger.disabled:active,
.ant-btn-danger[disabled]:active,
.ant-btn-danger.disabled.active,
.ant-btn-danger[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-danger.disabled > a:only-child,
.ant-btn-danger[disabled] > a:only-child,
.ant-btn-danger.disabled:hover > a:only-child,
.ant-btn-danger[disabled]:hover > a:only-child,
.ant-btn-danger.disabled:focus > a:only-child,
.ant-btn-danger[disabled]:focus > a:only-child,
.ant-btn-danger.disabled:active > a:only-child,
.ant-btn-danger[disabled]:active > a:only-child,
.ant-btn-danger.disabled.active > a:only-child,
.ant-btn-danger[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-danger.disabled > a:only-child:after,
.ant-btn-danger[disabled] > a:only-child:after,
.ant-btn-danger.disabled:hover > a:only-child:after,
.ant-btn-danger[disabled]:hover > a:only-child:after,
.ant-btn-danger.disabled:focus > a:only-child:after,
.ant-btn-danger[disabled]:focus > a:only-child:after,
.ant-btn-danger.disabled:active > a:only-child:after,
.ant-btn-danger[disabled]:active > a:only-child:after,
.ant-btn-danger.disabled.active > a:only-child:after,
.ant-btn-danger[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-circle,
.ant-btn-circle-outline {
  width: 28px;
  padding: 0;
  font-size: 14px;
  border-radius: 50%;
  height: 28px;
}
.ant-btn-circle.ant-btn-lg,
.ant-btn-circle-outline.ant-btn-lg {
  width: 32px;
  padding: 0;
  font-size: 16px;
  border-radius: 50%;
  height: 32px;
}
.ant-btn-circle.ant-btn-sm,
.ant-btn-circle-outline.ant-btn-sm {
  width: 22px;
  padding: 0;
  font-size: 12px;
  border-radius: 50%;
  height: 22px;
}
.ant-btn:before {
  position: absolute;
  top: -1px;
  left: -1px;
  bottom: -1px;
  right: -1px;
  background: #fff;
  opacity: 0.35;
  content: '';
  border-radius: inherit;
  z-index: 1;
  transition: opacity .2s;
  pointer-events: none;
  display: none;
}
.ant-btn .anticon {
  transition: margin-left 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-btn.ant-btn-loading:before {
  display: block;
}
.ant-btn.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only) {
  padding-left: 29px;
  pointer-events: none;
  position: relative;
}
.ant-btn.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only) .anticon {
  margin-left: -14px;
}
.ant-btn-sm.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only) {
  padding-left: 24px;
}
.ant-btn-sm.ant-btn-loading:not(.ant-btn-circle):not(.ant-btn-circle-outline):not(.ant-btn-icon-only) .anticon {
  margin-left: -17px;
}
.ant-btn-group {
  position: relative;
  display: inline-block;
}
.ant-btn-group > .ant-btn {
  position: relative;
  z-index: 1;
}
.ant-btn-group > .ant-btn:hover,
.ant-btn-group > .ant-btn:focus,
.ant-btn-group > .ant-btn:active,
.ant-btn-group > .ant-btn.active {
  z-index: 2;
}
.ant-btn-group > .ant-btn:disabled {
  z-index: 0;
}
.ant-btn-group-lg > .ant-btn {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-btn-group-sm > .ant-btn {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-btn-group-sm > .ant-btn > .anticon {
  font-size: 12px;
}
.ant-btn-group .ant-btn + .ant-btn,
.ant-btn + .ant-btn-group,
.ant-btn-group + .ant-btn,
.ant-btn-group + .ant-btn-group {
  margin-left: -1px;
}
.ant-btn-group .ant-btn:not(:first-child):not(:last-child) {
  border-radius: 0;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-btn-group > .ant-btn:first-child {
  margin-left: 0;
}
.ant-btn-group > .ant-btn:first-child:not(:last-child) {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  padding-right: 8px;
}
.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  padding-left: 8px;
}
.ant-btn-group > .ant-btn-group {
  float: left;
}
.ant-btn-group > .ant-btn-group:not(:first-child):not(:last-child) > .ant-btn {
  border-radius: 0;
}
.ant-btn-group > .ant-btn-group:first-child:not(:last-child) > .ant-btn:last-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  padding-right: 8px;
}
.ant-btn-group > .ant-btn-group:last-child:not(:first-child) > .ant-btn:first-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  padding-left: 8px;
}
.ant-btn:not(.ant-btn-circle):not(.ant-btn-circle-outline).ant-btn-icon-only {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-btn:focus > span,
.ant-btn:active > span {
  position: relative;
}
.ant-btn > .anticon + span,
.ant-btn > span + .anticon {
  margin-left: 0.5em;
}
.ant-btn-clicked:after {
  content: '';
  position: absolute;
  top: -1px;
  left: -1px;
  bottom: -1px;
  right: -1px;
  border-radius: inherit;
  border: 0 solid #108ee9;
  opacity: 0.4;
  animation: buttonEffect .4s;
  display: block;
}
.ant-btn-danger.ant-btn-clicked:after {
  border-color: #f04134;
}
.ant-btn-background-ghost {
  background: transparent !important;
  border-color: #fff;
  color: #fff;
}
.ant-btn-background-ghost.ant-btn-primary {
  color: #108ee9;
  background-color: transparent;
  border-color: #108ee9;
}
.ant-btn-background-ghost.ant-btn-primary > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-primary:hover,
.ant-btn-background-ghost.ant-btn-primary:focus {
  color: #49a9ee;
  background-color: transparent;
  border-color: #49a9ee;
}
.ant-btn-background-ghost.ant-btn-primary:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-primary:focus > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-primary:active,
.ant-btn-background-ghost.ant-btn-primary.active {
  color: #0e77ca;
  background-color: transparent;
  border-color: #0e77ca;
}
.ant-btn-background-ghost.ant-btn-primary:active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-primary.disabled,
.ant-btn-background-ghost.ant-btn-primary[disabled],
.ant-btn-background-ghost.ant-btn-primary.disabled:hover,
.ant-btn-background-ghost.ant-btn-primary[disabled]:hover,
.ant-btn-background-ghost.ant-btn-primary.disabled:focus,
.ant-btn-background-ghost.ant-btn-primary[disabled]:focus,
.ant-btn-background-ghost.ant-btn-primary.disabled:active,
.ant-btn-background-ghost.ant-btn-primary[disabled]:active,
.ant-btn-background-ghost.ant-btn-primary.disabled.active,
.ant-btn-background-ghost.ant-btn-primary[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-background-ghost.ant-btn-primary.disabled > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled] > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled]:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled]:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled:active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled]:active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary.disabled.active > a:only-child,
.ant-btn-background-ghost.ant-btn-primary[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-primary.disabled > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled] > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled]:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled]:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled]:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary.disabled.active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-primary[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger {
  color: #f04134;
  background-color: transparent;
  border-color: #f04134;
}
.ant-btn-background-ghost.ant-btn-danger > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger:hover,
.ant-btn-background-ghost.ant-btn-danger:focus {
  color: #f46e65;
  background-color: transparent;
  border-color: #f46e65;
}
.ant-btn-background-ghost.ant-btn-danger:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-danger:focus > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger:active,
.ant-btn-background-ghost.ant-btn-danger.active {
  color: #d73435;
  background-color: transparent;
  border-color: #d73435;
}
.ant-btn-background-ghost.ant-btn-danger:active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-btn-background-ghost.ant-btn-danger.disabled,
.ant-btn-background-ghost.ant-btn-danger[disabled],
.ant-btn-background-ghost.ant-btn-danger.disabled:hover,
.ant-btn-background-ghost.ant-btn-danger[disabled]:hover,
.ant-btn-background-ghost.ant-btn-danger.disabled:focus,
.ant-btn-background-ghost.ant-btn-danger[disabled]:focus,
.ant-btn-background-ghost.ant-btn-danger.disabled:active,
.ant-btn-background-ghost.ant-btn-danger[disabled]:active,
.ant-btn-background-ghost.ant-btn-danger.disabled.active,
.ant-btn-background-ghost.ant-btn-danger[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-btn-background-ghost.ant-btn-danger.disabled > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled] > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled]:hover > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled]:focus > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled:active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled]:active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger.disabled.active > a:only-child,
.ant-btn-background-ghost.ant-btn-danger[disabled].active > a:only-child {
  color: currentColor;
}
.ant-btn-background-ghost.ant-btn-danger.disabled > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled] > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled]:hover > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled]:focus > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled]:active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger.disabled.active > a:only-child:after,
.ant-btn-background-ghost.ant-btn-danger[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
@keyframes buttonEffect {
  to {
    opacity: 0;
    top: -6px;
    left: -6px;
    bottom: -6px;
    right: -6px;
    border-width: 6px;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzButtonComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzButtonComponent.propDecorators = {
    "nzGhost": [{ type: Input },],
    "nzType": [{ type: Input },],
    "nzShape": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzLoading": [{ type: Input },],
    "_onClick": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzButtonModule {
}
NzButtonModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzButtonComponent, NzButtonGroupComponent],
                exports: [NzButtonComponent, NzButtonGroupComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzButtonModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoggerService {
    /**
     * @param {?} _loggerState
     */
    constructor(_loggerState) {
        this._loggerState = _loggerState;
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    log(...args) {
        if (this._loggerState) {
            // console.log(...args);
            console.log.apply(console, arguments);
        }
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    warn(...args) {
        if (this._loggerState) {
            // console.warn(...args);
            console.warn.apply(console, arguments);
        }
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    error(...args) {
        if (this._loggerState) {
            // console.error(...args);
            console.error.apply(console, arguments);
        }
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    info(...args) {
        if (this._loggerState) {
            // console.log(...args);
            console.log.apply(console, arguments);
        }
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    debug(...args) {
        if (this._loggerState) {
            // console.log('[NG-ZORRO-DEBUG]', ...args);
            const /** @type {?} */ arrs = Array.prototype.slice.call(arguments);
            console.log.apply(console, ['[NG-ZORRO-DEBUG]'].concat(arrs));
        }
    }
}
LoggerService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LoggerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NZ_LOGGER_STATE,] },] },
];
const NZ_LOGGER_STATE = new InjectionToken('nz-logger-state');
/**
 * @param {?} exist
 * @param {?} loggerState
 * @return {?}
 */
function LOGGER_SERVICE_PROVIDER_FACTORY(exist, loggerState) { return exist || new LoggerService(loggerState); }
const LOGGER_SERVICE_PROVIDER = {
    provide: LoggerService,
    useFactory: LOGGER_SERVICE_PROVIDER_FACTORY,
    deps: [[new Optional(), new SkipSelf(), LoggerService], NZ_LOGGER_STATE]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoggerModule {
}
LoggerModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: NZ_LOGGER_STATE, useValue: false },
                    LOGGER_SERVICE_PROVIDER,
                ],
            },] },
];
/** @nocollapse */
LoggerModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const zhCN = {
    locale: 'zh-CN',
    Pagination: {
        itemsPerPage: '%num% 条/页',
        jumpTo: '跳至',
        page: '页',
        forwardPage: '向前 %num% 页',
        backwardPage: '向后 %num% 页',
        prevPage: '上一页',
        nextPage: '下一页',
        firstPage: '第一页',
        lastPage: '最后一页: %page%',
        totalItems: '共 %total% 条',
    },
    DateTime: {
        clear: '清除',
        chooseMonth: '选择月份',
        chooseYear: '选择年份',
        nYear: '%num%年',
        nMonth: '%num%月',
        nDay: '%num%日',
        prevYear: '上一年',
        nextYear: '下一年',
        prevMonth: '上个月',
        nextMonth: '下个月',
        prevDecade: '上一年代',
        nextDecade: '下一年代',
        chooseDecade: '选择年代',
        chooseTime: '选择时间',
        chooseDate: '选择日期',
        chooseTimePlease: '请选择时间',
        chooseDatePlease: '请选择日期',
        chooseStartDatePlease: '开始日期',
        chooseEndDatePlease: '结束日期',
        thisMoment: '此刻',
        today: '今天',
        ok: '确 定',
    },
    Modal: {
        okText: '确定',
        cancelText: '取消',
        understood: '知道了',
    },
    Table: {
        emptyText: '没有数据',
    },
    Select: {
        notFoundContent: '无法找到',
    },
    Transfer: {
        titles: ',',
        notFoundContent: '无匹配结果',
        searchPlaceholder: '请输入',
        itemUnit: '项目',
        itemsUnit: '项目',
    },
    Upload: {
        uploading: '文件上传中',
        removeFile: '删除文件',
        uploadError: '上传错误',
        previewFile: '预览文件',
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const enUS = {
    locale: 'en-US',
    Pagination: {
        itemsPerPage: '%num% / page',
        jumpTo: 'Goto',
        page: '',
        forwardPage: '%num% pages forward',
        backwardPage: '%num% pages backward',
        prevPage: 'Previous page',
        nextPage: 'Next page',
        firstPage: 'First page',
        lastPage: 'Last page: %page%',
        totalItems: '%total% items',
    },
    DateTime: {
        clear: 'Clear',
        chooseMonth: 'Choose a month',
        chooseYear: 'Choose a year',
        chooseDecade: 'Choose a decade',
        nYear: '%num%',
        nMonth: '%num%',
        nDay: '%num%',
        prevYear: 'Previous year',
        nextYear: 'Next year',
        prevMonth: 'Previous month',
        nextMonth: 'Next month',
        prevDecade: 'Previous decade',
        nextDecade: 'Next decade',
        chooseTime: 'Select time',
        chooseDate: 'Select date',
        chooseTimePlease: 'Select time',
        chooseDatePlease: 'Select date',
        chooseStartDatePlease: 'Start date',
        chooseEndDatePlease: 'End date',
        thisMoment: 'This moment',
        today: 'Today',
        ok: 'Ok',
    },
    Modal: {
        okText: 'OK',
        cancelText: 'Cancel',
        understood: 'Got it',
    },
    Table: {
        emptyText: 'No data',
    },
    Select: {
        notFoundContent: 'Not Found',
    },
    Transfer: {
        titles: ',',
        notFoundContent: 'Not Found',
        searchPlaceholder: 'Search here',
        itemUnit: 'item',
        itemsUnit: 'items',
    },
    Upload: {
        uploading: 'Uploading...',
        removeFile: 'Remove',
        uploadError: 'Error',
        previewFile: 'Preview',
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const trTR = {
    locale: 'tr-TR',
    Pagination: {
        itemsPerPage: '%num% / sayfa',
        jumpTo: 'Goto',
        page: '',
        forwardPage: '%num% sayfa ileri',
        backwardPage: '%num% sayfa geri',
        prevPage: 'Önceki sayfa',
        nextPage: 'Sonraki sayfa',
        firstPage: 'İlk Sayfa',
        lastPage: 'Son sayfa: %page%',
        totalItems: '%total% öğe',
    },
    DateTime: {
        clear: 'Temiz',
        chooseMonth: 'Bir ay seçin',
        chooseYear: 'Bir yıl seçin',
        chooseDecade: 'On Yıl seçin',
        nYear: '%num%',
        nMonth: '%num%',
        nDay: '%num%',
        prevYear: 'Önceki yıl',
        nextYear: 'Sonraki yıl',
        prevMonth: 'Önceki ay',
        nextMonth: 'Sonraki ay',
        prevDecade: 'Önceki on yıl',
        nextDecade: 'Sonraki on yıl',
        chooseTime: 'Saat seçin',
        chooseDate: 'Tarih seçin',
        chooseTimePlease: 'Saat seçin',
        chooseDatePlease: 'Tarih seçin',
        chooseStartDatePlease: 'Başlangıç tarihi',
        chooseEndDatePlease: 'Bitiş tarihi',
        thisMoment: 'Şimdi',
        today: 'Bugün',
        ok: 'Tamam',
    },
    Modal: {
        okText: 'Tamam',
        cancelText: 'İptal',
        understood: 'Anladım',
    },
    Table: {
        emptyText: 'Veri yok',
    },
    Select: {
        notFoundContent: 'Bulunamadı',
    },
    Transfer: {
        titles: ',',
        notFoundContent: 'Bulunamadı',
        searchPlaceholder: 'Burada ara',
        itemUnit: 'öğe',
        itemsUnit: 'öğeler',
    },
    Upload: {
        uploading: 'Yükleniyor...',
        removeFile: `Dosyayı kaldır`,
        uploadError: 'Yükleme Hatası',
        previewFile: `Dosyayı Önizle`,
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const zhTW = {
    locale: 'zh-TW',
    Pagination: {
        itemsPerPage: '%num% 條/頁',
        jumpTo: '跳至',
        page: '頁',
        forwardPage: '向前 %num% 頁',
        backwardPage: '向後 %num% 頁',
        prevPage: '上一頁',
        nextPage: '下一頁',
        firstPage: '第一頁',
        lastPage: '最后一頁: %page%',
        totalItems: '共 %total% 條',
    },
    DateTime: {
        clear: '清除',
        chooseMonth: '選擇月份',
        chooseYear: '選擇年份',
        nYear: '%num%年',
        nMonth: '%num%月',
        nDay: '%num%日',
        prevYear: '上一年',
        nextYear: '下一年',
        prevMonth: '上个月',
        nextMonth: '下个月',
        prevDecade: '上一年代',
        nextDecade: '下一年代',
        chooseDecade: '選擇年代',
        chooseTime: '選擇時間',
        chooseDate: '選擇日期',
        chooseTimePlease: '请選擇時間',
        chooseDatePlease: '请選擇日期',
        chooseStartDatePlease: '開始日期',
        chooseEndDatePlease: '結束日期',
        thisMoment: '此刻',
        today: '今天',
        ok: '確 定',
    },
    Modal: {
        okText: '確定',
        cancelText: '取消',
        understood: 'OK',
    },
    Table: {
        emptyText: '目前尚無資料',
    },
    Select: {
        notFoundContent: '查無此資料',
    },
    Transfer: {
        titles: ',',
        notFoundContent: '查無此資料',
        searchPlaceholder: '搜尋資料',
        itemUnit: '項目',
        itemsUnit: '項目',
    },
    Upload: {
        uploading: '正在上傳...',
        removeFile: '刪除檔案',
        uploadError: '上傳失敗',
        previewFile: '檔案預覽',
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ruRU = {
    locale: 'ru-RU',
    Pagination: {
        itemsPerPage: '%num% / страниц',
        jumpTo: 'Перейти',
        page: '',
        forwardPage: '%num% страниц вперед',
        backwardPage: '%num% страниц назад',
        prevPage: 'Предыдущая страница',
        nextPage: 'Следующая страница',
        firstPage: 'Первая страница',
        lastPage: 'Последняя страница: %page%',
        totalItems: 'Всего %total%',
    },
    DateTime: {
        clear: 'Очистить',
        chooseMonth: 'Выберите месяц',
        chooseYear: 'Выберите год',
        chooseDecade: 'Выберите десятилетие',
        nYear: '%num%',
        nMonth: '%num%',
        nDay: '%num%',
        prevYear: 'Предыдущий год',
        nextYear: 'Следующий год',
        prevMonth: 'Предыдущий месяц',
        nextMonth: 'Следующий месяц',
        prevDecade: 'Предыдущее десятилетие',
        nextDecade: 'Следующее десятилетие',
        chooseTime: 'Выберите время',
        chooseDate: 'Выберите дату',
        chooseTimePlease: 'Выберите время',
        chooseDatePlease: 'Выберите дату',
        chooseStartDatePlease: 'Дата начала',
        chooseEndDatePlease: 'Дата окончания',
        thisMoment: 'Сейчас',
        today: 'Сегодня',
        ok: 'Ок',
    },
    Modal: {
        okText: 'Ок',
        cancelText: 'Отмена',
        understood: 'Ок',
    },
    Table: {
        emptyText: 'Нет данных',
    },
    Select: {
        notFoundContent: 'Ничего не найдено',
    },
    Transfer: {
        titles: ',',
        notFoundContent: 'Нет данных',
        searchPlaceholder: 'Поиск',
        itemUnit: 'элемент',
        itemsUnit: 'элементов',
    },
    Upload: {
        uploading: 'Закачиваю...',
        removeFile: 'Удалить файл',
        uploadError: 'Ошибка при закачке',
        previewFile: 'Предпросмотр файла',
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzLocale {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const NZ_LOCALE = new InjectionToken('nz-locale');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzLocaleService {
    /**
     * @param {?} locale
     * @param {?} _logger
     */
    constructor(locale, _logger) {
        this._logger = _logger;
        this.setLocale(locale);
    }
    /**
     * @param {?} path
     * @param {?=} data
     * @return {?}
     */
    translate(path, data) {
        this._logger.debug(`[NzLocaleService] Translating(${this._locale.locale}): ${path}`);
        let /** @type {?} */ content = /** @type {?} */ (this._getObjectPath(this._locale, path));
        if (typeof content === 'string') {
            if (data) {
                Object.keys(data).forEach((key) => content = content.replace(new RegExp(`%${key}%`, 'g'), data[key]));
            }
            return content;
        }
        return path;
    }
    /**
     * Set/Change current locale globally throughout the WHOLE application
     * [NOTE] If called at runtime, rendered interface may not change along with the locale change (because this do not trigger another render schedule)
     * @param {?} locale The translating letters
     * @return {?}
     */
    setLocale(locale) {
        moment.locale(locale.locale);
        this._locale = locale;
    }
    /**
     * @return {?}
     */
    getLocale() {
        return this._locale;
    }
    /**
     * @param {?} obj
     * @param {?} path
     * @return {?}
     */
    _getObjectPath(obj, path) {
        let /** @type {?} */ res = obj;
        const /** @type {?} */ paths = path.split('.');
        const /** @type {?} */ depth = paths.length;
        let /** @type {?} */ index = 0;
        while (res && index < depth) {
            res = res[paths[index++]];
        }
        return index === depth ? res : null;
    }
}
NzLocaleService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzLocaleService.ctorParameters = () => [
    { type: NzLocale, decorators: [{ type: Inject, args: [NZ_LOCALE,] },] },
    { type: LoggerService, },
];
/**
 * @param {?} exist
 * @param {?} locale
 * @param {?} logger
 * @return {?}
 */
function NZ_LOCALE_SERVICE_PROVIDER_FACTORY(exist, locale, logger) {
    return exist || new NzLocaleService(locale, logger);
}
const NZ_LOCALE_SERVICE_PROVIDER = {
    provide: NzLocaleService,
    useFactory: NZ_LOCALE_SERVICE_PROVIDER_FACTORY,
    deps: [[new Optional(), new SkipSelf(), NzLocaleService], NZ_LOCALE, LoggerService],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTranslatePipe {
    /**
     * @param {?} _locale
     */
    constructor(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} path
     * @param {?=} keyValue
     * @return {?}
     */
    transform(path, keyValue) {
        return this._locale.translate(path, keyValue);
    }
}
NzTranslatePipe.decorators = [
    { type: Pipe, args: [{
                name: 'nzTranslate'
            },] },
];
/** @nocollapse */
NzTranslatePipe.ctorParameters = () => [
    { type: NzLocaleService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ɵ0 = zhCN;
class NzLocaleModule {
}
NzLocaleModule.decorators = [
    { type: NgModule, args: [{
                imports: [LoggerModule],
                declarations: [NzTranslatePipe],
                exports: [NzTranslatePipe],
                providers: [
                    { provide: NZ_LOCALE, useValue: ɵ0 },
                    NZ_LOCALE_SERVICE_PROVIDER,
                ],
            },] },
];
/** @nocollapse */
NzLocaleModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRadioGroupComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._prefixCls = 'ant-radio-group';
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.radios = [];
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @return {?}
     */
    get isLarge() {
        return this._size === 'large';
    }
    /**
     * @return {?}
     */
    get isSmall() {
        return this._size === 'small';
    }
    /**
     * @param {?} radio
     * @return {?}
     */
    addRadio(radio) {
        this.radios.push(radio);
        radio.nzChecked = radio.nzValue === this._value;
    }
    /**
     * @return {?}
     */
    checkRadios() {
        this.radios.forEach((item) => {
            item.nzChecked = item.nzValue === this._value;
        });
    }
    /**
     * @param {?} radio
     * @return {?}
     */
    selectRadio(radio) {
        this.updateValue(radio.nzValue);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        this.onChange(value);
        this.checkRadios();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** trim text node between radio button */
        Array.from(this._el.childNodes).forEach(node => {
            if (node.nodeType === 3) {
                this._el.removeChild(node);
            }
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._value = value;
        this.checkRadios();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.radios.forEach((radio) => {
            radio.nzDisabled = isDisabled;
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._render.addClass(this._el, `${this._prefixCls}`);
    }
}
NzRadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-radio-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzRadioGroupComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-radio-group {
  display: inline-block;
  font-size: 12px;
}
.ant-radio-wrapper {
  font-size: 12px;
  display: inline-block;
  position: relative;
  white-space: nowrap;
  margin-right: 8px;
  cursor: pointer;
}
.ant-radio {
  white-space: nowrap;
  outline: none;
  display: inline-block;
  position: relative;
  line-height: 1;
  vertical-align: text-bottom;
  cursor: pointer;
}
.ant-radio-wrapper:hover .ant-radio .ant-radio-inner,
.ant-radio:hover .ant-radio-inner,
.ant-radio-focused .ant-radio-inner {
  border-color: #108ee9;
}
.ant-radio-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #108ee9;
  content: '';
  animation: antRadioEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-radio:hover:after,
.ant-radio-wrapper:hover .ant-radio:after {
  visibility: visible;
}
.ant-radio-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border-width: 1px;
  border-style: solid;
  border-radius: 14px;
  border-color: #d9d9d9;
  background-color: #fff;
  transition: all 0.3s;
}
.ant-radio-inner:after {
  position: absolute;
  width: 6px;
  height: 6px;
  left: 3px;
  top: 3px;
  border-radius: 4px;
  display: table;
  border-top: 0;
  border-left: 0;
  content: ' ';
  background-color: #108ee9;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  top: 0;
  bottom: 0;
  right: 0;
}
.ant-radio-checked .ant-radio-inner {
  border-color: #108ee9;
}
.ant-radio-checked .ant-radio-inner:after {
  transform: scale(1);
  opacity: 1;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-disabled .ant-radio-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-radio-disabled .ant-radio-inner:after {
  background-color: #ccc;
}
.ant-radio-disabled .ant-radio-input {
  cursor: not-allowed;
}
.ant-radio-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
span.ant-radio + * {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-radio-button-wrapper {
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
  position: relative;
}
.ant-radio-button-wrapper a {
  color: rgba(0, 0, 0, 0.65);
}
.ant-radio-button-wrapper > .ant-radio-button {
  margin-left: 0;
  display: block;
  width: 0;
  height: 0;
}
.ant-radio-group-large .ant-radio-button-wrapper {
  height: 32px;
  line-height: 30px;
}
.ant-radio-group-small .ant-radio-button-wrapper {
  height: 22px;
  line-height: 20px;
  padding: 0 12px;
}
.ant-radio-group-small .ant-radio-button-wrapper:first-child {
  border-radius: 2px 0 0 2px;
}
.ant-radio-group-small .ant-radio-button-wrapper:last-child {
  border-radius: 0 2px 2px 0;
}
.ant-radio-button-wrapper:not(:first-child)::before {
  content: "";
  display: block;
  top: 0;
  left: -1px;
  width: 1px;
  height: 100%;
  position: absolute;
  background-color: #d9d9d9;
}
.ant-radio-button-wrapper:first-child {
  border-radius: 4px 0 0 4px;
  border-left: 1px solid #d9d9d9;
}
.ant-radio-button-wrapper:last-child {
  border-radius: 0 4px 4px 0;
}
.ant-radio-button-wrapper:first-child:last-child {
  border-radius: 4px;
}
.ant-radio-button-wrapper:hover,
.ant-radio-button-wrapper-focused {
  color: #108ee9;
  position: relative;
}
.ant-radio-button-wrapper .ant-radio-inner,
.ant-radio-button-wrapper input[type="checkbox"],
.ant-radio-button-wrapper input[type="radio"] {
  opacity: 0;
  filter: alpha(opacity=0);
  width: 0;
  height: 0;
}
.ant-radio-button-wrapper-checked {
  background: #fff;
  border-color: #108ee9;
  color: #108ee9;
  box-shadow: -1px 0 0 0 #108ee9;
  z-index: 1;
}
.ant-radio-button-wrapper-checked::before {
  background-color: #108ee9 !important;
  opacity: 0.1;
}
.ant-radio-button-wrapper-checked:first-child {
  border-color: #108ee9;
  box-shadow: none !important;
}
.ant-radio-button-wrapper-checked:hover {
  border-color: #49a9ee;
  box-shadow: -1px 0 0 0 #49a9ee;
  color: #49a9ee;
}
.ant-radio-button-wrapper-checked:active {
  border-color: #0e77ca;
  box-shadow: -1px 0 0 0 #0e77ca;
  color: #0e77ca;
}
.ant-radio-button-wrapper-disabled {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child,
.ant-radio-button-wrapper-disabled:hover {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child {
  border-left-color: #d9d9d9;
}
.ant-radio-button-wrapper-disabled.ant-radio-button-wrapper-checked {
  color: #fff;
  background-color: #e6e6e6;
  border-color: #d9d9d9;
  box-shadow: none;
}
@keyframes antRadioEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzRadioGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzRadioGroupComponent.propDecorators = {
    "nzSize": [{ type: Input },],
    "isLarge": [{ type: HostBinding, args: ['class.ant-radio-group-large',] },],
    "isSmall": [{ type: HostBinding, args: ['class.ant-radio-group-small',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRadioComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     * @param {?} _nzRadioGroup
     */
    constructor(_elementRef, _renderer, _nzRadioGroup) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._nzRadioGroup = _nzRadioGroup;
        this._focused = false;
        this._checked = false;
        this._disabled = false;
        this._prefixCls = 'ant-radio';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._inputPrefixCls = `${this._prefixCls}-input`;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzChecked(value) {
        this._checked = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this._disabled) {
            if (this._nzRadioGroup) {
                this._checked = true;
                this.setClassMap();
                this._nzRadioGroup.selectRadio(this);
            }
            else {
                this.updateValue(!this._checked);
            }
        }
    }
    /**
     * @return {?}
     */
    nzFocus() {
        this._focused = true;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    nzBlur() {
        this._focused = false;
        this.setClassMap();
        if (this._nzRadioGroup)
            this._nzRadioGroup.onTouched();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked,
            [`${this._prefixCls}-focused`]: this._focused,
            [`${this._prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._nzRadioGroup)
            this._nzRadioGroup.addRadio(this);
        this._renderer.addClass(this._el, `${this._prefixCls}-wrapper`);
        this.setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (value === this._checked) {
            return;
        }
        this.onChange(value);
        this._focused = false;
        this._checked = value;
        this.setClassMap();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._checked = value;
        this.setClassMap();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
NzRadioComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-radio]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap">
      <span [ngClass]="_innerPrefixCls"></span>
      <input type="radio" [ngClass]="_inputPrefixCls" [(ngModel)]="nzChecked" (focus)="nzFocus()" (blur)="nzBlur()">
    </span>
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-radio-group {
  display: inline-block;
  font-size: 12px;
}
.ant-radio-wrapper {
  font-size: 12px;
  display: inline-block;
  position: relative;
  white-space: nowrap;
  margin-right: 8px;
  cursor: pointer;
}
.ant-radio {
  white-space: nowrap;
  outline: none;
  display: inline-block;
  position: relative;
  line-height: 1;
  vertical-align: text-bottom;
  cursor: pointer;
}
.ant-radio-wrapper:hover .ant-radio .ant-radio-inner,
.ant-radio:hover .ant-radio-inner,
.ant-radio-focused .ant-radio-inner {
  border-color: #108ee9;
}
.ant-radio-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #108ee9;
  content: '';
  animation: antRadioEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-radio:hover:after,
.ant-radio-wrapper:hover .ant-radio:after {
  visibility: visible;
}
.ant-radio-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border-width: 1px;
  border-style: solid;
  border-radius: 14px;
  border-color: #d9d9d9;
  background-color: #fff;
  transition: all 0.3s;
}
.ant-radio-inner:after {
  position: absolute;
  width: 6px;
  height: 6px;
  left: 3px;
  top: 3px;
  border-radius: 4px;
  display: table;
  border-top: 0;
  border-left: 0;
  content: ' ';
  background-color: #108ee9;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  top: 0;
  bottom: 0;
  right: 0;
}
.ant-radio-checked .ant-radio-inner {
  border-color: #108ee9;
}
.ant-radio-checked .ant-radio-inner:after {
  transform: scale(1);
  opacity: 1;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-disabled .ant-radio-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-radio-disabled .ant-radio-inner:after {
  background-color: #ccc;
}
.ant-radio-disabled .ant-radio-input {
  cursor: not-allowed;
}
.ant-radio-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
span.ant-radio + * {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-radio-button-wrapper {
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
  position: relative;
}
.ant-radio-button-wrapper a {
  color: rgba(0, 0, 0, 0.65);
}
.ant-radio-button-wrapper > .ant-radio-button {
  margin-left: 0;
  display: block;
  width: 0;
  height: 0;
}
.ant-radio-group-large .ant-radio-button-wrapper {
  height: 32px;
  line-height: 30px;
}
.ant-radio-group-small .ant-radio-button-wrapper {
  height: 22px;
  line-height: 20px;
  padding: 0 12px;
}
.ant-radio-group-small .ant-radio-button-wrapper:first-child {
  border-radius: 2px 0 0 2px;
}
.ant-radio-group-small .ant-radio-button-wrapper:last-child {
  border-radius: 0 2px 2px 0;
}
.ant-radio-button-wrapper:not(:first-child)::before {
  content: "";
  display: block;
  top: 0;
  left: -1px;
  width: 1px;
  height: 100%;
  position: absolute;
  background-color: #d9d9d9;
}
.ant-radio-button-wrapper:first-child {
  border-radius: 4px 0 0 4px;
  border-left: 1px solid #d9d9d9;
}
.ant-radio-button-wrapper:last-child {
  border-radius: 0 4px 4px 0;
}
.ant-radio-button-wrapper:first-child:last-child {
  border-radius: 4px;
}
.ant-radio-button-wrapper:hover,
.ant-radio-button-wrapper-focused {
  color: #108ee9;
  position: relative;
}
.ant-radio-button-wrapper .ant-radio-inner,
.ant-radio-button-wrapper input[type="checkbox"],
.ant-radio-button-wrapper input[type="radio"] {
  opacity: 0;
  filter: alpha(opacity=0);
  width: 0;
  height: 0;
}
.ant-radio-button-wrapper-checked {
  background: #fff;
  border-color: #108ee9;
  color: #108ee9;
  box-shadow: -1px 0 0 0 #108ee9;
  z-index: 1;
}
.ant-radio-button-wrapper-checked::before {
  background-color: #108ee9 !important;
  opacity: 0.1;
}
.ant-radio-button-wrapper-checked:first-child {
  border-color: #108ee9;
  box-shadow: none !important;
}
.ant-radio-button-wrapper-checked:hover {
  border-color: #49a9ee;
  box-shadow: -1px 0 0 0 #49a9ee;
  color: #49a9ee;
}
.ant-radio-button-wrapper-checked:active {
  border-color: #0e77ca;
  box-shadow: -1px 0 0 0 #0e77ca;
  color: #0e77ca;
}
.ant-radio-button-wrapper-disabled {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child,
.ant-radio-button-wrapper-disabled:hover {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child {
  border-left-color: #d9d9d9;
}
.ant-radio-button-wrapper-disabled.ant-radio-button-wrapper-checked {
  color: #fff;
  background-color: #e6e6e6;
  border-color: #d9d9d9;
  box-shadow: none;
}
@keyframes antRadioEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
`
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzRadioComponent),
                        multi: true
                    }
                ]
            },] },
];
// endregion
/** @nocollapse */
NzRadioComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NzRadioGroupComponent, decorators: [{ type: Optional },] },
];
NzRadioComponent.propDecorators = {
    "nzChecked": [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-wrapper-checked',] },],
    "nzValue": [{ type: Input },],
    "nzDisabled": [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-wrapper-disabled',] },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRadioButtonComponent extends NzRadioComponent {
    constructor() {
        super(...arguments);
        this._checked = false;
        this._disabled = false;
        this._prefixCls = 'ant-radio-button';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._inputPrefixCls = `${this._prefixCls}-input`;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzChecked(value) {
        this._checked = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
}
NzRadioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-radio-button]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap">
      <span [ngClass]="_innerPrefixCls"></span>
      <input type="radio" [ngClass]="_inputPrefixCls" [(ngModel)]="nzChecked" (focus)="nzFocus()" (blur)="nzBlur()">
    </span>
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-radio-group {
  display: inline-block;
  font-size: 12px;
}
.ant-radio-wrapper {
  font-size: 12px;
  display: inline-block;
  position: relative;
  white-space: nowrap;
  margin-right: 8px;
  cursor: pointer;
}
.ant-radio {
  white-space: nowrap;
  outline: none;
  display: inline-block;
  position: relative;
  line-height: 1;
  vertical-align: text-bottom;
  cursor: pointer;
}
.ant-radio-wrapper:hover .ant-radio .ant-radio-inner,
.ant-radio:hover .ant-radio-inner,
.ant-radio-focused .ant-radio-inner {
  border-color: #108ee9;
}
.ant-radio-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  border: 1px solid #108ee9;
  content: '';
  animation: antRadioEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-radio:hover:after,
.ant-radio-wrapper:hover .ant-radio:after {
  visibility: visible;
}
.ant-radio-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border-width: 1px;
  border-style: solid;
  border-radius: 14px;
  border-color: #d9d9d9;
  background-color: #fff;
  transition: all 0.3s;
}
.ant-radio-inner:after {
  position: absolute;
  width: 6px;
  height: 6px;
  left: 3px;
  top: 3px;
  border-radius: 4px;
  display: table;
  border-top: 0;
  border-left: 0;
  content: ' ';
  background-color: #108ee9;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  top: 0;
  bottom: 0;
  right: 0;
}
.ant-radio-checked .ant-radio-inner {
  border-color: #108ee9;
}
.ant-radio-checked .ant-radio-inner:after {
  transform: scale(1);
  opacity: 1;
  transition: all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-radio-disabled .ant-radio-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-radio-disabled .ant-radio-inner:after {
  background-color: #ccc;
}
.ant-radio-disabled .ant-radio-input {
  cursor: not-allowed;
}
.ant-radio-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
span.ant-radio + * {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-radio-button-wrapper {
  margin: 0;
  height: 28px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  display: inline-block;
  transition: all 0.3s ease;
  cursor: pointer;
  border: 1px solid #d9d9d9;
  border-left: 0;
  background: #fff;
  padding: 0 16px;
  position: relative;
}
.ant-radio-button-wrapper a {
  color: rgba(0, 0, 0, 0.65);
}
.ant-radio-button-wrapper > .ant-radio-button {
  margin-left: 0;
  display: block;
  width: 0;
  height: 0;
}
.ant-radio-group-large .ant-radio-button-wrapper {
  height: 32px;
  line-height: 30px;
}
.ant-radio-group-small .ant-radio-button-wrapper {
  height: 22px;
  line-height: 20px;
  padding: 0 12px;
}
.ant-radio-group-small .ant-radio-button-wrapper:first-child {
  border-radius: 2px 0 0 2px;
}
.ant-radio-group-small .ant-radio-button-wrapper:last-child {
  border-radius: 0 2px 2px 0;
}
.ant-radio-button-wrapper:not(:first-child)::before {
  content: "";
  display: block;
  top: 0;
  left: -1px;
  width: 1px;
  height: 100%;
  position: absolute;
  background-color: #d9d9d9;
}
.ant-radio-button-wrapper:first-child {
  border-radius: 4px 0 0 4px;
  border-left: 1px solid #d9d9d9;
}
.ant-radio-button-wrapper:last-child {
  border-radius: 0 4px 4px 0;
}
.ant-radio-button-wrapper:first-child:last-child {
  border-radius: 4px;
}
.ant-radio-button-wrapper:hover,
.ant-radio-button-wrapper-focused {
  color: #108ee9;
  position: relative;
}
.ant-radio-button-wrapper .ant-radio-inner,
.ant-radio-button-wrapper input[type="checkbox"],
.ant-radio-button-wrapper input[type="radio"] {
  opacity: 0;
  filter: alpha(opacity=0);
  width: 0;
  height: 0;
}
.ant-radio-button-wrapper-checked {
  background: #fff;
  border-color: #108ee9;
  color: #108ee9;
  box-shadow: -1px 0 0 0 #108ee9;
  z-index: 1;
}
.ant-radio-button-wrapper-checked::before {
  background-color: #108ee9 !important;
  opacity: 0.1;
}
.ant-radio-button-wrapper-checked:first-child {
  border-color: #108ee9;
  box-shadow: none !important;
}
.ant-radio-button-wrapper-checked:hover {
  border-color: #49a9ee;
  box-shadow: -1px 0 0 0 #49a9ee;
  color: #49a9ee;
}
.ant-radio-button-wrapper-checked:active {
  border-color: #0e77ca;
  box-shadow: -1px 0 0 0 #0e77ca;
  color: #0e77ca;
}
.ant-radio-button-wrapper-disabled {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child,
.ant-radio-button-wrapper-disabled:hover {
  border-color: #d9d9d9;
  background-color: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-radio-button-wrapper-disabled:first-child {
  border-left-color: #d9d9d9;
}
.ant-radio-button-wrapper-disabled.ant-radio-button-wrapper-checked {
  color: #fff;
  background-color: #e6e6e6;
  border-color: #d9d9d9;
  box-shadow: none;
}
@keyframes antRadioEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzRadioButtonComponent.ctorParameters = () => [];
NzRadioButtonComponent.propDecorators = {
    "nzDisabled": [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-button-wrapper-disabled',] },],
    "nzChecked": [{ type: Input }, { type: HostBinding, args: ['class.ant-radio-button-wrapper-checked',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRadioModule {
}
NzRadioModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                exports: [NzRadioComponent, NzRadioButtonComponent, NzRadioGroupComponent],
                declarations: [NzRadioComponent, NzRadioButtonComponent, NzRadioGroupComponent]
            },] },
];
/** @nocollapse */
NzRadioModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const dropDownAnimation = trigger('dropDownAnimation', [
    state('bottom', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 0%'
    })),
    transition('void => bottom', [
        style({
            opacity: 0,
            transform: 'scaleY(0)',
            transformOrigin: '0% 0%'
        }),
        animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')
    ]),
    state('top', style({
        opacity: 1,
        transform: 'scaleY(1)',
        transformOrigin: '0% 100%'
    })),
    transition('void => top', [
        style({
            opacity: 0,
            transform: 'scaleY(0)',
            transformOrigin: '0% 100%'
        }),
        animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')
    ]),
    transition('* => void', [
        animate('250ms 100ms linear', style({ opacity: 0 }))
    ])
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const tagAnimation = trigger('tagAnimation', [
    state('*', style({ opacity: 1, transform: 'scale(1)' })),
    transition('void => *', [
        style({ opacity: 0, transform: 'scale(0)' }),
        animate('150ms linear')
    ]),
    state('void', style({ opacity: 0, transform: 'scale(0)' })),
    transition('* => void', [
        style({ opacity: 1, transform: 'scale(1)' }),
        animate('150ms linear')
    ])
]);

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzOptionPipe {
    /**
     * @param {?} options
     * @param {?} value
     * @return {?}
     */
    transform(options, value) {
        if (value.searchText) {
            let /** @type {?} */ _options = options.filter(option => option.nzLabel && (option.nzLabel.toLowerCase().indexOf(value.searchText.toLowerCase()) !== -1));
            if (value.tags) {
                _options = options.filter(option => option.nzLabel && (option.nzLabel.toLowerCase() === value.searchText.toLowerCase()));
            }
            if (_options.length) {
                return _options;
            }
            else {
                return [/** @type {?} */ (({
                        nzValue: value.value,
                        _value: value.value,
                        nzDisabled: value.disabled,
                        _disabled: value.disabled,
                        nzLabel: value.notFoundContent,
                        _label: value.notFoundContent,
                    }))];
            }
        }
        else {
            return options;
        }
    }
}
NzOptionPipe.decorators = [
    { type: Pipe, args: [{ name: 'nzOptionPipe' },] },
];
/** @nocollapse */
NzOptionPipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSelectComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     * @param {?} _locale
     */
    constructor(_elementRef, _renderer, _locale) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._locale = _locale;
        this._allowClear = false;
        this._disabled = false;
        this._isTags = false;
        this._isMultiple = false;
        this._keepUnListOptions = false;
        this._showSearch = false;
        this._isOpen = false;
        this._prefixCls = 'ant-select';
        this._classList = [];
        this._dropDownPrefixCls = `${this._prefixCls}-dropdown`;
        this._selectionPrefixCls = `${this._prefixCls}-selection`;
        this._placeholder = 'placeholder';
        this._notFoundContent = this._locale.translate('Select.notFoundContent');
        this._searchText = '';
        this._triggerWidth = 0;
        this._selectedOptions = new Set();
        this._options = [];
        this._cacheOptions = [];
        this._filterOptions = [];
        this._tagsOptions = [];
        this._isMultiInit = false;
        this._dropDownPosition = 'bottom';
        this._composing = false;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.nzSearchChange = new EventEmitter();
        this.nzOpenChange = new EventEmitter();
        this.nzScrollToBottom = new EventEmitter();
        this.nzFilter = true;
        this.nzMaxMultiple = Infinity;
        /**
         * new nz-option insert or new tags insert
         */
        this.addOption = (option) => {
            this._options.push(option);
            if (!this._isTags) {
                if (option.nzValue) {
                    this.updateSelectedOption(this._value);
                }
                else {
                    this.forceUpdateSelectedOption(this._value);
                }
            }
        };
        /**
         * cancel select multiple option
         */
        this.unSelectMultipleOption = (option, $event, emitChange = true) => {
            this._operatingMultipleOption = option;
            this._selectedOptions.delete(option);
            if (emitChange) {
                this.emitMultipleOptions();
            }
            // 对Tag进行特殊处理
            if (this._isTags && (this._options.indexOf(option) !== -1) && (this._tagsOptions.indexOf(option) !== -1)) {
                this.removeOption(option);
                this._tagsOptions.splice(this._tagsOptions.indexOf(option), 1);
            }
            if ($event) {
                $event.preventDefault();
                $event.stopPropagation();
            }
        };
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAllowClear(value) {
        this._allowClear = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAllowClear() {
        return this._allowClear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzKeepUnListOptions(value) {
        this._keepUnListOptions = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzKeepUnListOptions() {
        return this._keepUnListOptions;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMode(value) {
        this._mode = value;
        if (this._mode === 'multiple') {
            this.nzMultiple = true;
        }
        else if (this._mode === 'tags') {
            this.nzTags = true;
        }
        else if (this._mode === 'combobox') {
            this.nzShowSearch = true;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMultiple(value) {
        this._isMultiple = toBoolean(value);
        if (this._isMultiple) {
            this.nzShowSearch = true;
        }
    }
    /**
     * @return {?}
     */
    get nzMultiple() {
        return this._isMultiple;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPlaceHolder(value) {
        this._placeholder = value;
    }
    /**
     * @return {?}
     */
    get nzPlaceHolder() {
        return this._placeholder;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzNotFoundContent(value) {
        this._notFoundContent = value;
    }
    /**
     * @return {?}
     */
    get nzNotFoundContent() {
        return this._notFoundContent;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = { large: 'lg', small: 'sm' }[value];
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowSearch(value) {
        this._showSearch = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowSearch() {
        return this._showSearch;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTags(value) {
        const /** @type {?} */ isTags = toBoolean(value);
        this._isTags = isTags;
        this.nzMultiple = isTags;
    }
    /**
     * @return {?}
     */
    get nzTags() {
        return this._isTags;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this.closeDropDown();
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOpen(value) {
        const /** @type {?} */ isOpen = toBoolean(value);
        if (this._isOpen === isOpen) {
            return;
        }
        if (isOpen) {
            this.scrollToActive();
            this._setTriggerWidth();
        }
        this._isOpen = isOpen;
        this.nzOpenChange.emit(this._isOpen);
        this.setClassMap();
        if (this._isOpen) {
            setTimeout(() => {
                this.checkDropDownScroll();
            });
        }
    }
    /**
     * @return {?}
     */
    get nzOpen() {
        return this._isOpen;
    }
    /**
     * nz-option remove or tags remove
     * @param {?} option
     * @return {?}
     */
    removeOption(option) {
        this._options.splice(this._options.indexOf(option), 1);
        if (!this._isTags) {
            this.forceUpdateSelectedOption(this._value);
        }
    }
    /**
     * dropdown position changed
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        this._dropDownPosition = position.connectionPair.originY;
    }
    /**
     * @return {?}
     */
    compositionStart() {
        this._composing = true;
    }
    /**
     * @return {?}
     */
    compositionEnd() {
        this._composing = false;
    }
    /**
     * clear single selected option
     * @param {?=} $event
     * @return {?}
     */
    clearSelect($event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this._selectedOption = null;
        this.nzValue = null;
        this.onChange(null);
    }
    /**
     * click dropdown option by user
     * @param {?} option
     * @param {?=} $event
     * @return {?}
     */
    clickOption(option, $event) {
        if (!option) {
            return;
        }
        this.chooseOption(option, true, $event);
        this.clearSearchText();
        if (!this._isMultiple) {
            this.nzOpen = false;
        }
    }
    /**
     * choose option
     * @param {?} option
     * @param {?=} isUserClick
     * @param {?=} $event
     * @return {?}
     */
    chooseOption(option, isUserClick = false, $event) {
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
        this._activeFilterOption = option;
        if (option && !option.nzDisabled) {
            if (!this.nzMultiple) {
                this._selectedOption = option;
                this._value = option.nzValue;
                if (isUserClick) {
                    this.onChange(option.nzValue);
                }
            }
            else {
                if (isUserClick) {
                    this.isInSet(this._selectedOptions, option) ? this.unSelectMultipleOption(option) : this.selectMultipleOption(option);
                }
            }
        }
    }
    /**
     * @param {?} element
     * @param {?} text
     * @return {?}
     */
    updateWidth(element, text) {
        if (text) {
            /** wait for scroll width change */
            setTimeout(_ => {
                this._renderer.setStyle(element, 'width', `${element.scrollWidth}px`);
            });
        }
        else {
            this._renderer.removeStyle(element, 'width');
        }
    }
    /**
     * determine if option in set
     * @param {?} set
     * @param {?} option
     * @return {?}
     */
    isInSet(set, option) {
        return ((/** @type {?} */ (Array.from(set))).find((data) => data.nzValue === option.nzValue));
    }
    /**
     * select multiple option
     * @param {?} option
     * @param {?=} $event
     * @return {?}
     */
    selectMultipleOption(option, $event) {
        /** if tags do push to tag option */
        if (this._isTags && (this._options.indexOf(option) === -1) && (this._tagsOptions.indexOf(option) === -1)) {
            this.addOption(option);
            this._tagsOptions.push(option);
        }
        this._operatingMultipleOption = option;
        if (this._selectedOptions.size < this.nzMaxMultiple) {
            this._selectedOptions.add(option);
        }
        this.emitMultipleOptions();
        if ($event) {
            $event.preventDefault();
            $event.stopPropagation();
        }
    }
    /**
     * emit multiple options
     * @return {?}
     */
    emitMultipleOptions() {
        if (this._isMultiInit) {
            return;
        }
        const /** @type {?} */ arrayOptions = Array.from(this._selectedOptions);
        this._value = arrayOptions.map(item => item.nzValue);
        this.onChange(this._value);
    }
    /**
     * update selected option when add remove option etc
     * @param {?} currentModelValue
     * @param {?=} triggerByNgModel
     * @return {?}
     */
    updateSelectedOption(currentModelValue, triggerByNgModel = false) {
        if (currentModelValue == null) {
            return;
        }
        if (this.nzMultiple) {
            const /** @type {?} */ selectedOptions = this._options.filter((item) => {
                return (item != null) && (currentModelValue.indexOf(item.nzValue) !== -1);
            });
            if ((this.nzKeepUnListOptions || this.nzTags) && (!triggerByNgModel)) {
                const /** @type {?} */ _selectedOptions = Array.from(this._selectedOptions);
                selectedOptions.forEach(option => {
                    const /** @type {?} */ _exist = _selectedOptions.some(item => item._value === option._value);
                    if (!_exist) {
                        this._selectedOptions.add(option);
                    }
                });
            }
            else {
                this._selectedOptions = new Set();
                selectedOptions.forEach(option => {
                    this._selectedOptions.add(option);
                });
            }
        }
        else {
            const /** @type {?} */ selectedOption = this._options.filter((item) => {
                return (item != null) && (item.nzValue === currentModelValue);
            });
            this.chooseOption(selectedOption[0]);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    forceUpdateSelectedOption(value) {
        /** trigger dirty check */
        setTimeout(_ => {
            this.updateSelectedOption(value);
        });
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    /**
     * @param {?=} emitChange
     * @return {?}
     */
    clearAllSelectedOption(emitChange = true) {
        this._selectedOptions.forEach(item => {
            this.unSelectMultipleOption(item, null, emitChange);
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyEnterEvent(event) {
        /** when composing end */
        if (!this._composing && this._isOpen) {
            event.preventDefault();
            event.stopPropagation();
            this.updateFilterOption(false);
            this.clickOption(this._activeFilterOption);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleKeyBackspaceEvent(event) {
        if ((!this._searchText) && (!this._composing) && (this._isMultiple)) {
            event.preventDefault();
            const /** @type {?} */ lastOption = Array.from(this._selectedOptions).pop();
            this.unSelectMultipleOption(lastOption);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleKeyDownEvent($event) {
        if (this._isOpen) {
            $event.preventDefault();
            $event.stopPropagation();
            this._activeFilterOption = this.nextOption(this._activeFilterOption, this._filterOptions.filter(w => !w.nzDisabled));
            this.scrollToActive();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handleKeyUpEvent($event) {
        if (this._isOpen) {
            $event.preventDefault();
            $event.stopPropagation();
            this._activeFilterOption = this.preOption(this._activeFilterOption, this._filterOptions.filter(w => !w.nzDisabled));
            this.scrollToActive();
        }
    }
    /**
     * @param {?} option
     * @param {?} options
     * @return {?}
     */
    preOption(option, options) {
        return options[options.indexOf(option) - 1] || options[options.length - 1];
    }
    /**
     * @param {?} option
     * @param {?} options
     * @return {?}
     */
    nextOption(option, options) {
        return options[options.indexOf(option) + 1] || options[0];
    }
    /**
     * @return {?}
     */
    clearSearchText() {
        this._searchText = '';
        this.updateFilterOption();
    }
    /**
     * @param {?=} updateActiveFilter
     * @return {?}
     */
    updateFilterOption(updateActiveFilter = true) {
        if (this.nzFilter) {
            this._filterOptions = new NzOptionPipe().transform(this._options, {
                'searchText': this._searchText,
                'tags': this._isTags,
                'notFoundContent': this._isTags ? this._searchText : this._notFoundContent,
                'disabled': !this._isTags,
                'value': this._isTags ? this._searchText : 'disabled'
            });
        }
        else {
            this._filterOptions = this._options;
        }
        /** TODO: cause pre & next key selection not work */
        if (updateActiveFilter && !this._selectedOption) {
            this._activeFilterOption = this._filterOptions[0];
        }
    }
    /**
     * @param {?} searchValue
     * @return {?}
     */
    onSearchChange(searchValue) {
        this.nzSearchChange.emit(searchValue);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this._disabled) {
            this.nzOpen = !this.nzOpen;
            if (this.nzShowSearch) {
                /** wait for search display */
                setTimeout(_ => {
                    this.searchInputElementRef.nativeElement.focus();
                });
            }
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        const /** @type {?} */ keyCode = e.keyCode;
        if (keyCode === TAB && this.nzOpen) {
            this.nzOpen = false;
            return;
        }
        if ((keyCode !== DOWN_ARROW && keyCode !== ENTER) || this.nzOpen) {
            return;
        }
        e.preventDefault();
        if (!this._disabled) {
            this.nzOpen = true;
            if (this.nzShowSearch) {
                /** wait for search display */
                setTimeout(_ => {
                    this.searchInputElementRef.nativeElement.focus();
                });
            }
        }
    }
    /**
     * @return {?}
     */
    closeDropDown() {
        if (!this.nzOpen) {
            return;
        }
        this.onTouched();
        if (this.nzMultiple) {
            this._renderer.removeStyle(this.searchInputElementRef.nativeElement, 'width');
        }
        this.clearSearchText();
        this.nzOpen = false;
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this._prefixCls,
            (this._mode === 'combobox') && `${this._prefixCls}-combobox`,
            (!this._disabled) && `${this._prefixCls}-enabled`,
            (this._disabled) && `${this._prefixCls}-disabled`,
            this._isOpen && `${this._prefixCls}-open`,
            this._showSearch && `${this._prefixCls}-show-search`,
            this._size && `${this._prefixCls}-${this._size}`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
        this._selectionClassMap = {
            [this._selectionPrefixCls]: true,
            [`${this._selectionPrefixCls}--single`]: !this.nzMultiple,
            [`${this._selectionPrefixCls}--multiple`]: this.nzMultiple
        };
    }
    /**
     * @return {?}
     */
    setDropDownClassMap() {
        this._dropDownClassMap = {
            [this._dropDownPrefixCls]: true,
            ['component-select']: this._mode === 'combobox',
            [`${this._dropDownPrefixCls}--single`]: !this.nzMultiple,
            [`${this._dropDownPrefixCls}--multiple`]: this.nzMultiple,
            [`${this._dropDownPrefixCls}-placement-bottomLeft`]: this._dropDownPosition === 'bottom',
            [`${this._dropDownPrefixCls}-placement-topLeft`]: this._dropDownPosition === 'top'
        };
    }
    /**
     * @return {?}
     */
    scrollToActive() {
        /** wait for dropdown display */
        setTimeout(_ => {
            if (this._activeFilterOption && this._activeFilterOption.nzValue) {
                const /** @type {?} */ index = this._filterOptions.findIndex(option => option.nzValue === this._activeFilterOption.nzValue);
                try {
                    const /** @type {?} */ scrollPane = /** @type {?} */ (this.dropdownUl.nativeElement.children[index]);
                    // TODO: scrollIntoViewIfNeeded is not a standard API, why doing so?
                    /* tslint:disable-next-line:no-any */
                    (/** @type {?} */ (scrollPane)).scrollIntoViewIfNeeded(false);
                }
                catch (/** @type {?} */ e) {
                }
            }
        });
    }
    /**
     * @return {?}
     */
    flushComponentState() {
        this.updateFilterOption();
        if (!this.nzMultiple) {
            this.updateSelectedOption(this._value);
        }
        else {
            if (this._value) {
                this.updateSelectedOption(this._value);
            }
        }
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this._getTriggerRect().width;
        /** should remove after after https://github.com/angular/material2/pull/8765 merged **/
        if (this._cdkOverlay && this._cdkOverlay.overlayRef) {
            this._cdkOverlay.overlayRef.updateSize({
                width: this._triggerWidth
            });
        }
    }
    /**
     * @return {?}
     */
    _getTriggerRect() {
        return this.trigger.nativeElement.getBoundingClientRect();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._updateValue(value, false);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @param {?} ul
     * @return {?}
     */
    dropDownScroll(ul) {
        if (ul && (ul.scrollHeight - ul.scrollTop === ul.clientHeight)) {
            this.nzScrollToBottom.emit(true);
        }
    }
    /**
     * @return {?}
     */
    checkDropDownScroll() {
        if (this.dropdownUl && (this.dropdownUl.nativeElement.scrollHeight === this.dropdownUl.nativeElement.clientHeight)) {
            this.nzScrollToBottom.emit(true);
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._value != null) {
            this.flushComponentState();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateFilterOption();
        this.setClassMap();
        this.setDropDownClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this._cacheOptions !== this._options) {
            /** update filter option after every content check cycle */
            this.updateFilterOption();
            this._cacheOptions = this._options;
        }
        else {
            this.updateFilterOption(false);
        }
    }
    /**
     * @param {?} value
     * @param {?=} emitChange
     * @return {?}
     */
    _updateValue(value, emitChange = true) {
        if (this._value === value) {
            return;
        }
        if ((value == null) && this.nzMultiple) {
            this._value = [];
        }
        else {
            this._value = value;
        }
        if (!this.nzMultiple) {
            if (value == null) {
                this._selectedOption = null;
            }
            else {
                this.updateSelectedOption(value);
            }
        }
        else {
            if (value) {
                if (value.length === 0) {
                    this.clearAllSelectedOption(emitChange);
                }
                else {
                    this.updateSelectedOption(value, true);
                }
            }
            else if (value == null) {
                this.clearAllSelectedOption(emitChange);
            }
        }
    }
}
NzSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-select',
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzSelectComponent),
                        multi: true
                    }
                ],
                animations: [
                    dropDownAnimation,
                    tagAnimation
                ],
                template: `
    <div
      tabindex="0"
      #trigger
      cdkOverlayOrigin
      #origin="cdkOverlayOrigin"
      [ngClass]="_selectionClassMap"
      (keydown.Enter)="handleKeyEnterEvent($event)"
      (keydown.Backspace)="handleKeyBackspaceEvent($event)"
      (keydown.ArrowUp)="handleKeyUpEvent($event)"
      (keydown.ArrowDown)="handleKeyDownEvent($event)">
      <div class="ant-select-selection__rendered" *ngIf="!nzShowSearch">
        <div class="ant-select-selection__placeholder">
          <ng-template [ngIf]="!_selectedOption">
            {{ nzPlaceHolder }}
          </ng-template>
        </div>
        <div class="ant-select-selection-selected-value">
          {{ _selectedOption?.nzLabel }}
        </div>
      </div>
      <div class="ant-select-selection__rendered" *ngIf="nzShowSearch">
        <div
          [hidden]="_searchText||(!nzOpen&&_selectedOption)||_selectedOptions.size"
          class="ant-select-selection__placeholder">
          <ng-template [ngIf]="(!_composing)&&_selectedOption">
            {{ _selectedOption.nzLabel }}
          </ng-template>
          <ng-template [ngIf]="(!_composing)&&(!_selectedOption)">
            {{ nzPlaceHolder }}
          </ng-template>
        </div>
        <ul *ngIf="nzMultiple">
          <li
            *ngFor="let option of _selectedOptions"
            [@tagAnimation] [attr.title]="option?.nzValue"
            class="ant-select-selection__choice" style="-webkit-user-select: none;">
            <div class="ant-select-selection__choice__content">{{ option?.nzLabel }}</div><!----><span class="ant-select-selection__choice__remove" (click)="unSelectMultipleOption(option,$event)"></span>
          </li>
          <li class="ant-select-search ant-select-search--inline">
            <div class="ant-select-search__field__wrap">
              <input
                class="ant-select-search__field"
                (compositionstart)="compositionStart()"
                (compositionend)="compositionEnd();updateWidth(searchInput,_searchText);"
                [(ngModel)]="_searchText"
                (ngModelChange)="updateFilterOption();onSearchChange($event);"
                (keydown)="updateWidth(searchInput,_searchText)"
                (input)="updateWidth(searchInput,_searchText)"
                (blur)="onTouched()"
                #searchInput>
              <span class="ant-select-search__field__mirror"></span></div>
          </li>
        </ul>
        <div
          *ngIf="!nzMultiple"
          class="ant-select-selection-selected-value"
          [hidden]="!(_selectedOption?.nzLabel)||nzOpen">
          {{ _selectedOption?.nzLabel }}
        </div>
        <div *ngIf="!nzMultiple" [hidden]="!nzOpen" class="ant-select-search ant-select-search--inline">
          <div class="ant-select-search__field__wrap">
            <input
              class="ant-select-search__field"
              (blur)="onTouched()"
              (compositionstart)="compositionStart()"
              (compositionend)="compositionEnd()"
              [(ngModel)]="_searchText"
              (ngModelChange)="updateFilterOption();onSearchChange($event);"
              #searchInput>
            <span class="ant-select-search__field__mirror"></span>
          </div>
        </div>
      </div>
      <span
        (click)="onTouched();clearSelect($event)"
        class="ant-select-selection__clear"
        style="-webkit-user-select: none;"
        *ngIf="_selectedOption?.nzLabel&&nzAllowClear&&!nzMultiple">
      </span>
      <span class="ant-select-arrow"><b></b></span></div>
    <ng-template
      cdkConnectedOverlay
      cdkConnectedOverlayHasBackdrop
      [cdkConnectedOverlayOrigin]="origin"
      (backdropClick)="closeDropDown()"
      (detach)="closeDropDown();"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayWidth]="_triggerWidth"
      [cdkConnectedOverlayOpen]="_isOpen"
    >
      <div
        [ngClass]="_dropDownClassMap" [@dropDownAnimation]="_dropDownPosition">
        <div style="overflow: auto;">
          <ul class="ant-select-dropdown-menu ant-select-dropdown-menu-vertical ant-select-dropdown-menu-root" #dropdownUl (scroll)="dropDownScroll(dropdownUl)">
            <li
              *ngFor="let option of _filterOptions"
              [class.ant-select-dropdown-menu-item-disabled]="option.nzDisabled"
              [class.ant-select-dropdown-menu-item-active]="option.nzValue == _activeFilterOption?.nzValue"
              [class.ant-select-dropdown-menu-item-selected]="(option.nzValue==(_selectedOption?.nzValue))||(isInSet(_selectedOptions,option))"
              class="ant-select-dropdown-menu-item"
              (click)="clickOption(option,$event)">
              <ng-template
                *ngIf="option.nzOptionTemplate"
                [ngTemplateOutlet]="option.nzOptionTemplate">
              </ng-template>
              <ng-template [ngIf]="!option.nzOptionTemplate">
                {{ option.nzLabel }}
              </ng-template>
            </li>
          </ul>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-select {
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-select > ul > li > a {
  padding: 0;
  background-color: #fff;
}
.ant-select-arrow {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: absolute;
  top: 50%;
  right: 8px;
  line-height: 1;
  margin-top: -6px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
.ant-select-arrow:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-arrow {
  filter: none;
}
:root .ant-select-arrow {
  font-size: 12px;
}
.ant-select-arrow * {
  display: none;
}
.ant-select-arrow:before {
  content: '\\e61d';
  transition: transform 0.2s ease;
}
.ant-select-selection {
  outline: none;
  user-select: none;
  box-sizing: border-box;
  display: block;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection:hover {
  border-color: #49a9ee;
}
.ant-select-focused .ant-select-selection,
.ant-select-selection:focus,
.ant-select-selection:active {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-select-selection__clear {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  opacity: 0;
  position: absolute;
  right: 8px;
  z-index: 1;
  background: #fff;
  top: 50%;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  cursor: pointer;
  transition: color 0.3s ease, opacity 0.15s ease;
}
.ant-select-selection__clear:before {
  display: block;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-select-selection__clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-select-selection:hover .ant-select-selection__clear {
  opacity: 1;
}
.ant-select-selection-selected-value {
  float: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%;
  padding-right: 14px;
}
.ant-select-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-disabled .ant-select-selection {
  background: #f7f7f7;
  cursor: not-allowed;
}
.ant-select-disabled .ant-select-selection:hover,
.ant-select-disabled .ant-select-selection:focus,
.ant-select-disabled .ant-select-selection:active {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-select-disabled .ant-select-selection__clear {
  display: none;
  visibility: hidden;
  pointer-events: none;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice {
  background: #eee;
  color: #aaa;
  padding-right: 10px;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice__remove {
  display: none;
}
.ant-select-selection--single {
  height: 28px;
  position: relative;
  cursor: pointer;
}
.ant-select-selection__rendered {
  display: block;
  margin-left: 7px;
  margin-right: 7px;
  position: relative;
  line-height: 26px;
}
.ant-select-selection__rendered:after {
  content: '.';
  visibility: hidden;
  pointer-events: none;
  display: inline-block;
  width: 0;
}
.ant-select-lg .ant-select-selection--single {
  height: 32px;
}
.ant-select-lg .ant-select-selection__rendered {
  line-height: 30px;
}
.ant-select-lg .ant-select-selection--multiple {
  min-height: 32px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 24px;
  line-height: 24px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__clear {
  top: 16px;
}
.ant-select-sm .ant-select-selection--single {
  height: 22px;
}
.ant-select-sm .ant-select-selection__rendered {
  line-height: 20px;
}
.ant-select-sm .ant-select-selection--multiple {
  min-height: 22px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 14px;
  line-height: 14px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__clear {
  top: 11px;
}
.ant-select-disabled .ant-select-selection__choice__remove {
  color: rgba(0, 0, 0, 0.25);
  cursor: default;
}
.ant-select-disabled .ant-select-selection__choice__remove:hover {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-search__field__wrap {
  display: inline-block;
  position: relative;
}
.ant-select-selection__placeholder,
.ant-select-search__field__placeholder {
  position: absolute;
  top: 50%;
  left: 0;
  right: 9px;
  color: #bfbfbf;
  line-height: 20px;
  height: 20px;
  max-width: 100%;
  margin-top: -10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: left;
}
.ant-select-search__field__placeholder {
  left: 8px;
}
.ant-select-search__field__mirror {
  position: absolute;
  top: 0;
  left: -9999px;
  white-space: pre;
  pointer-events: none;
}
.ant-select-search--inline {
  position: absolute;
  height: 100%;
  width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline {
  float: left;
  position: static;
}
.ant-select-search--inline .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-search--inline .ant-select-search__field {
  border-width: 0;
  font-size: 100%;
  height: 100%;
  width: 100%;
  background: transparent;
  outline: 0;
  border-radius: 4px;
  line-height: 1;
}
.ant-select-search--inline > i {
  float: right;
}
.ant-select-selection--multiple {
  min-height: 28px;
  cursor: text;
  padding-bottom: 3px;
  zoom: 1;
}
.ant-select-selection--multiple:before,
.ant-select-selection--multiple:after {
  content: " ";
  display: table;
}
.ant-select-selection--multiple:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-select-selection--multiple .ant-select-search--inline {
  width: auto;
  padding: 0;
  max-width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline .ant-select-search__field {
  max-width: 100%;
  width: 0.75em;
}
.ant-select-selection--multiple .ant-select-selection__rendered {
  margin-left: 5px;
  margin-bottom: -3px;
  height: auto;
}
.ant-select-selection--multiple > ul > li,
.ant-select-selection--multiple .ant-select-selection__rendered > ul > li {
  margin-top: 3px;
  height: 20px;
  line-height: 20px;
}
.ant-select-selection--multiple .ant-select-selection__choice {
  color: rgba(0, 0, 0, 0.65);
  background-color: #f3f3f3;
  border-radius: 4px;
  cursor: default;
  float: left;
  margin-right: 4px;
  max-width: 99%;
  position: relative;
  overflow: hidden;
  transition: padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  padding: 0 20px 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__disabled {
  padding: 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__content {
  display: inline-block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  transition: margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: rgba(0, 0, 0, 0.43);
  line-height: inherit;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  position: absolute;
  right: 4px;
  padding: 0 0 0 8px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  filter: none;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-size: 12px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:hover {
  color: #404040;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  content: "\\e633";
}
.ant-select-selection--multiple .ant-select-selection__clear {
  top: 14px;
}
.ant-select-allow-clear .ant-select-selection--multiple .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-open .ant-select-arrow {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
  -ms-transform: rotate(180deg);
}
.ant-select-open .ant-select-arrow:before {
  transform: rotate(180deg);
}
.ant-select-open .ant-select-selection {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-select-combobox .ant-select-arrow {
  display: none;
}
.ant-select-combobox .ant-select-search--inline {
  height: 100%;
  width: 100%;
  float: none;
}
.ant-select-combobox .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-combobox .ant-select-search__field {
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 1;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  box-shadow: none;
}
.ant-select-combobox.ant-select-allow-clear .ant-select-selection:hover .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-dropdown {
  background-color: #fff;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  box-sizing: border-box;
  z-index: 1050;
  left: -9999px;
  top: -9999px;
  position: absolute;
  outline: none;
  overflow: hidden;
  font-size: 12px;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-bottomLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpIn;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-topLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownIn;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpOut;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownOut;
}
.ant-select-dropdown-hidden {
  display: none;
}
.ant-select-dropdown-menu {
  outline: none;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
  max-height: 250px;
  overflow: auto;
}
.ant-select-dropdown-menu-item-group-list {
  margin: 0;
  padding: 0;
}
.ant-select-dropdown-menu-item-group-list > .ant-select-dropdown-menu-item {
  padding-left: 16px;
}
.ant-select-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
  padding: 8px;
}
.ant-select-dropdown-menu-item {
  position: relative;
  display: block;
  padding: 7px 8px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: background 0.3s ease;
}
.ant-select-dropdown-menu-item:hover {
  background-color: #ecf6fd;
}
.ant-select-dropdown-menu-item-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-selected,
.ant-select-dropdown-menu-item-selected:hover {
  background-color: #f7f7f7;
  font-weight: 600;
  color: rgba(0, 0, 0, 0.65);
}
.ant-select-dropdown-menu-item-active {
  background-color: #ecf6fd;
}
.ant-select-dropdown-menu-item-divider {
  height: 1px;
  margin: 1px 0;
  overflow: hidden;
  background-color: #e5e5e5;
  line-height: 0;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e632";
  color: transparent;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  transition: all 0.2s ease;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 8px;
  font-weight: bold;
  text-shadow: 0 0.1px 0, 0.1px 0 0, 0 -0.1px 0, -0.1px 0;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  filter: none;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-size: 12px;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:hover:after {
  color: #ddd;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-disabled:after {
  display: none;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:after,
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:hover:after {
  color: #108ee9;
  display: inline-block;
}
.ant-select-dropdown-container-open .ant-select-dropdown,
.ant-select-dropdown-open .ant-select-dropdown {
  display: block;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-select {
  box-sizing: border-box;
  display: inline-block;
  position: relative;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-select > ul > li > a {
  padding: 0;
  background-color: #fff;
}
.ant-select-arrow {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: absolute;
  top: 50%;
  right: 8px;
  line-height: 1;
  margin-top: -6px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
.ant-select-arrow:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-arrow {
  filter: none;
}
:root .ant-select-arrow {
  font-size: 12px;
}
.ant-select-arrow * {
  display: none;
}
.ant-select-arrow:before {
  content: '\\e61d';
  transition: transform 0.2s ease;
}
.ant-select-selection {
  outline: none;
  user-select: none;
  box-sizing: border-box;
  display: block;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection:hover {
  border-color: #49a9ee;
}
.ant-select-focused .ant-select-selection,
.ant-select-selection:focus,
.ant-select-selection:active {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-select-selection__clear {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  opacity: 0;
  position: absolute;
  right: 8px;
  z-index: 1;
  background: #fff;
  top: 50%;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  cursor: pointer;
  transition: color 0.3s ease, opacity 0.15s ease;
}
.ant-select-selection__clear:before {
  display: block;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-select-selection__clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-select-selection:hover .ant-select-selection__clear {
  opacity: 1;
}
.ant-select-selection-selected-value {
  float: left;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  max-width: 100%;
  padding-right: 14px;
}
.ant-select-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-disabled .ant-select-selection {
  background: #f7f7f7;
  cursor: not-allowed;
}
.ant-select-disabled .ant-select-selection:hover,
.ant-select-disabled .ant-select-selection:focus,
.ant-select-disabled .ant-select-selection:active {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-select-disabled .ant-select-selection__clear {
  display: none;
  visibility: hidden;
  pointer-events: none;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice {
  background: #eee;
  color: #aaa;
  padding-right: 10px;
}
.ant-select-disabled .ant-select-selection--multiple .ant-select-selection__choice__remove {
  display: none;
}
.ant-select-selection--single {
  height: 28px;
  position: relative;
  cursor: pointer;
}
.ant-select-selection__rendered {
  display: block;
  margin-left: 7px;
  margin-right: 7px;
  position: relative;
  line-height: 26px;
}
.ant-select-selection__rendered:after {
  content: '.';
  visibility: hidden;
  pointer-events: none;
  display: inline-block;
  width: 0;
}
.ant-select-lg .ant-select-selection--single {
  height: 32px;
}
.ant-select-lg .ant-select-selection__rendered {
  line-height: 30px;
}
.ant-select-lg .ant-select-selection--multiple {
  min-height: 32px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 24px;
  line-height: 24px;
}
.ant-select-lg .ant-select-selection--multiple .ant-select-selection__clear {
  top: 16px;
}
.ant-select-sm .ant-select-selection--single {
  height: 22px;
}
.ant-select-sm .ant-select-selection__rendered {
  line-height: 20px;
}
.ant-select-sm .ant-select-selection--multiple {
  min-height: 22px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__rendered li {
  height: 14px;
  line-height: 14px;
}
.ant-select-sm .ant-select-selection--multiple .ant-select-selection__clear {
  top: 11px;
}
.ant-select-disabled .ant-select-selection__choice__remove {
  color: rgba(0, 0, 0, 0.25);
  cursor: default;
}
.ant-select-disabled .ant-select-selection__choice__remove:hover {
  color: rgba(0, 0, 0, 0.25);
}
.ant-select-search__field__wrap {
  display: inline-block;
  position: relative;
}
.ant-select-selection__placeholder,
.ant-select-search__field__placeholder {
  position: absolute;
  top: 50%;
  left: 0;
  right: 9px;
  color: #bfbfbf;
  line-height: 20px;
  height: 20px;
  max-width: 100%;
  margin-top: -10px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  text-align: left;
}
.ant-select-search__field__placeholder {
  left: 8px;
}
.ant-select-search__field__mirror {
  position: absolute;
  top: 0;
  left: -9999px;
  white-space: pre;
  pointer-events: none;
}
.ant-select-search--inline {
  position: absolute;
  height: 100%;
  width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline {
  float: left;
  position: static;
}
.ant-select-search--inline .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-search--inline .ant-select-search__field {
  border-width: 0;
  font-size: 100%;
  height: 100%;
  width: 100%;
  background: transparent;
  outline: 0;
  border-radius: 4px;
  line-height: 1;
}
.ant-select-search--inline > i {
  float: right;
}
.ant-select-selection--multiple {
  min-height: 28px;
  cursor: text;
  padding-bottom: 3px;
  zoom: 1;
}
.ant-select-selection--multiple:before,
.ant-select-selection--multiple:after {
  content: " ";
  display: table;
}
.ant-select-selection--multiple:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-select-selection--multiple .ant-select-search--inline {
  width: auto;
  padding: 0;
  max-width: 100%;
}
.ant-select-selection--multiple .ant-select-search--inline .ant-select-search__field {
  max-width: 100%;
  width: 0.75em;
}
.ant-select-selection--multiple .ant-select-selection__rendered {
  margin-left: 5px;
  margin-bottom: -3px;
  height: auto;
}
.ant-select-selection--multiple > ul > li,
.ant-select-selection--multiple .ant-select-selection__rendered > ul > li {
  margin-top: 3px;
  height: 20px;
  line-height: 20px;
}
.ant-select-selection--multiple .ant-select-selection__choice {
  color: rgba(0, 0, 0, 0.65);
  background-color: #f3f3f3;
  border-radius: 4px;
  cursor: default;
  float: left;
  margin-right: 4px;
  max-width: 99%;
  position: relative;
  overflow: hidden;
  transition: padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  padding: 0 20px 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__disabled {
  padding: 0 10px;
}
.ant-select-selection--multiple .ant-select-selection__choice__content {
  display: inline-block;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 100%;
  transition: margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  color: rgba(0, 0, 0, 0.43);
  line-height: inherit;
  cursor: pointer;
  font-weight: bold;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  position: absolute;
  right: 4px;
  padding: 0 0 0 8px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  filter: none;
}
:root .ant-select-selection--multiple .ant-select-selection__choice__remove {
  font-size: 12px;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:hover {
  color: #404040;
}
.ant-select-selection--multiple .ant-select-selection__choice__remove:before {
  content: "\\e633";
}
.ant-select-selection--multiple .ant-select-selection__clear {
  top: 14px;
}
.ant-select-allow-clear .ant-select-selection--multiple .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-open .ant-select-arrow {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
  -ms-transform: rotate(180deg);
}
.ant-select-open .ant-select-arrow:before {
  transform: rotate(180deg);
}
.ant-select-open .ant-select-selection {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-select-combobox .ant-select-arrow {
  display: none;
}
.ant-select-combobox .ant-select-search--inline {
  height: 100%;
  width: 100%;
  float: none;
}
.ant-select-combobox .ant-select-search__field__wrap {
  width: 100%;
  height: 100%;
}
.ant-select-combobox .ant-select-search__field {
  width: 100%;
  height: 100%;
  position: relative;
  z-index: 1;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  box-shadow: none;
}
.ant-select-combobox.ant-select-allow-clear .ant-select-selection:hover .ant-select-selection__rendered {
  margin-right: 20px;
}
.ant-select-dropdown {
  background-color: #fff;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  border-radius: 4px;
  box-sizing: border-box;
  z-index: 1050;
  left: -9999px;
  top: -9999px;
  position: absolute;
  outline: none;
  overflow: hidden;
  font-size: 12px;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-bottomLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpIn;
}
.ant-select-dropdown.slide-up-enter.slide-up-enter-active.ant-select-dropdown-placement-topLeft,
.ant-select-dropdown.slide-up-appear.slide-up-appear-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownIn;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-bottomLeft {
  animation-name: antSlideUpOut;
}
.ant-select-dropdown.slide-up-leave.slide-up-leave-active.ant-select-dropdown-placement-topLeft {
  animation-name: antSlideDownOut;
}
.ant-select-dropdown-hidden {
  display: none;
}
.ant-select-dropdown-menu {
  outline: none;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
  max-height: 250px;
  overflow: auto;
}
.ant-select-dropdown-menu-item-group-list {
  margin: 0;
  padding: 0;
}
.ant-select-dropdown-menu-item-group-list > .ant-select-dropdown-menu-item {
  padding-left: 16px;
}
.ant-select-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
  padding: 8px;
}
.ant-select-dropdown-menu-item {
  position: relative;
  display: block;
  padding: 7px 8px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  overflow: hidden;
  text-overflow: ellipsis;
  transition: background 0.3s ease;
}
.ant-select-dropdown-menu-item:hover {
  background-color: #ecf6fd;
}
.ant-select-dropdown-menu-item-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-select-dropdown-menu-item-selected,
.ant-select-dropdown-menu-item-selected:hover {
  background-color: #f7f7f7;
  font-weight: 600;
  color: rgba(0, 0, 0, 0.65);
}
.ant-select-dropdown-menu-item-active {
  background-color: #ecf6fd;
}
.ant-select-dropdown-menu-item-divider {
  height: 1px;
  margin: 1px 0;
  overflow: hidden;
  background-color: #e5e5e5;
  line-height: 0;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e632";
  color: transparent;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  transition: all 0.2s ease;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 8px;
  font-weight: bold;
  text-shadow: 0 0.1px 0, 0.1px 0 0, 0 -0.1px 0, -0.1px 0;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  filter: none;
}
:root .ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:after {
  font-size: 12px;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item:hover:after {
  color: #ddd;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-disabled:after {
  display: none;
}
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:after,
.ant-select-dropdown.ant-select-dropdown--multiple .ant-select-dropdown-menu-item-selected:hover:after {
  color: #108ee9;
  display: inline-block;
}
.ant-select-dropdown-container-open .ant-select-dropdown,
.ant-select-dropdown-open .ant-select-dropdown {
  display: block;
}
nz-select .ant-select {
  width: 100%;
}
.ant-select-dropdown {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
.ant-select-dropdown.ant-select-dropdown-placement-topLeft {
  top: -100%;
  transform: translateY(-100%) !important;
}
.ant-select-dropdown-menu-item {
  line-height: 1.5;
}
`
                ]
            },] },
];
/** @nocollapse */
NzSelectComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NzLocaleService, },
];
NzSelectComponent.propDecorators = {
    "searchInputElementRef": [{ type: ViewChild, args: ['searchInput',] },],
    "trigger": [{ type: ViewChild, args: ['trigger',] },],
    "dropdownUl": [{ type: ViewChild, args: ['dropdownUl',] },],
    "nzSearchChange": [{ type: Output },],
    "nzOpenChange": [{ type: Output },],
    "nzScrollToBottom": [{ type: Output },],
    "nzFilter": [{ type: Input },],
    "nzMaxMultiple": [{ type: Input },],
    "_cdkOverlay": [{ type: ViewChild, args: [CdkConnectedOverlay,] },],
    "nzAllowClear": [{ type: Input },],
    "nzKeepUnListOptions": [{ type: Input },],
    "nzMode": [{ type: Input },],
    "nzMultiple": [{ type: Input },],
    "nzPlaceHolder": [{ type: Input },],
    "nzNotFoundContent": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzShowSearch": [{ type: Input },],
    "nzTags": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "nzOpen": [{ type: Input },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
    "onKeyDown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzOptionComponent {
    /**
     * @param {?} _nzSelect
     */
    constructor(_nzSelect) {
        this._nzSelect = _nzSelect;
        this._disabled = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLabel(value) {
        if (this._label === value) {
            return;
        }
        this._label = value;
    }
    /**
     * @return {?}
     */
    get nzLabel() {
        return this._label;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._nzSelect.addOption(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._nzSelect.removeOption(this);
    }
}
NzOptionComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-option',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NzOptionComponent.ctorParameters = () => [
    { type: NzSelectComponent, },
];
NzOptionComponent.propDecorators = {
    "nzOptionTemplate": [{ type: ContentChild, args: ['nzOptionTemplate',] },],
    "nzValue": [{ type: Input },],
    "nzLabel": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSelectModule {
}
NzSelectModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, OverlayModule, NzLocaleModule],
                declarations: [NzOptionPipe, NzOptionComponent, NzSelectComponent],
                exports: [NzOptionPipe, NzOptionComponent, NzSelectComponent]
            },] },
];
/** @nocollapse */
NzSelectModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/** @enum {number} */
const RangePart = { Start: 0, End: 1, };
RangePart[RangePart.Start] = "Start";
RangePart[RangePart.End] = "End";
class NzCalendarComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _localeService
     */
    constructor(_elementRef, _localeService) {
        this._elementRef = _elementRef;
        this._localeService = _localeService;
        this._clearTime = true;
        this._datePicker = false;
        this._fullScreen = true;
        this._showHeader = true;
        this._isRange = false;
        this._weeksCalendar = [];
        this._quartersCalendar = [];
        this._listOfWeekName = [];
        this._listOfMonthName = [];
        this._listOfYearName = [];
        this._yearUnit = '年';
        this._monthUnit = '月';
        this._showMonth = moment(new Date()).month();
        this._showYear = moment(new Date()).year();
        this._value = new Date();
        this._rangeValue = [null, null];
        this._locale = this._localeService.getLocale().locale;
        this.nzClickDay = new EventEmitter();
        this.nzClickMonth = new EventEmitter();
        this.nzHoverDay = new EventEmitter();
        this.nzClearTime = true;
        this.nzMode = 'year';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzFullScreen(value) {
        this._fullScreen = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzFullScreen() {
        return this._fullScreen;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowHeader(value) {
        this._showHeader = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowHeader() {
        return this._showHeader;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIsRange(value) {
        this._isRange = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIsRange() {
        return this._isRange;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabledDate(value) {
        this._disabledDate = value;
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzDisabledDate() {
        return this._disabledDate;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDatePicker(value) {
        this._datePicker = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDatePicker() {
        return this._datePicker;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value || new Date();
        this._showMonth = moment(this._value).month();
        this._showYear = moment(this._value).year();
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || new Date();
    }
    /**
     * @return {?}
     */
    get nzRangeValue() {
        return this._rangeValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzRangeValue(value) {
        this._rangeValue = value;
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzHoveringSelectValue() {
        return this._hoveringSelectValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzHoveringSelectValue(value) {
        if (this._hoveringSelectValue === value) {
            return;
        }
        this._hoveringSelectValue = value;
        this._buildCalendar();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowYear(value) {
        this._showYear = value;
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzShowYear() {
        return this._showYear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowMonth(value) {
        this._showMonth = value;
        this._buildCalendar();
    }
    /**
     * @return {?}
     */
    get nzShowMonth() {
        return this._showMonth;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLocale(value) {
        this._locale = value;
        moment.locale(this._locale);
    }
    /**
     * @return {?}
     */
    get nzLocale() {
        return this._locale;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _removeTime(date) {
        if (this.nzClearTime) {
            return date.hour(0).minute(0).second(0).millisecond(0);
        }
        else {
            return date;
        }
    }
    /**
     * @param {?} $event
     * @param {?} day
     * @return {?}
     */
    _clickDay($event, day) {
        $event.preventDefault();
        $event.stopPropagation();
        if (day.disabled) {
            return;
        }
        this.nzClickDay.emit(day);
    }
    /**
     * @param {?} $event
     * @param {?} month
     * @return {?}
     */
    _clickMonth($event, month) {
        $event.preventDefault();
        $event.stopPropagation();
        if (month.disabled) {
            return;
        }
        this.nzClickMonth.emit(month);
    }
    /**
     * @param {?} $event
     * @param {?} day
     * @return {?}
     */
    _onDayHover($event, day) {
        $event.preventDefault();
        $event.stopPropagation();
        if (day.disabled || day.date.isSame(this._hoveringSelectValue)) {
            return;
        }
        this.nzHoverDay.emit(day);
    }
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    _isSelectedDay(date, month) {
        if (this.nzIsRange) {
            return (date.isSame(this._rangeValue[RangePart.Start], 'day')
                || date.isSame(this._rangeValue[RangePart.End], 'day')
                || date.isSame(this._hoveringSelectValue, 'day'))
                && date.month() === month.month();
        }
        else {
            return date.isSame(this.nzValue, 'day');
        }
    }
    /**
     * @param {?} date
     * @param {?} month
     * @return {?}
     */
    _isInRange(date, month) {
        let /** @type {?} */ ghostDate;
        if (this.nzIsRange && date.month() === month.month()) {
            if (this._rangeValue.every(e => moment(e).isValid())) {
                return date.isBetween.apply(date, this._rangeValue);
            }
            ghostDate = this._rangeValue.find(e => moment(e).isValid());
            if (ghostDate && this._hoveringSelectValue) {
                const /** @type {?} */ start = moment.min(moment(ghostDate), moment(this._hoveringSelectValue)).toDate();
                const /** @type {?} */ end = moment.max(moment(ghostDate), moment(this._hoveringSelectValue)).toDate();
                return date.isBetween(start, end);
            }
            return false;
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    _buildMonth(d) {
        const /** @type {?} */ weeks = [];
        const /** @type {?} */ _rawDate = this._removeTime(d);
        const /** @type {?} */ start = _rawDate.clone().date(1).day(0);
        const /** @type {?} */ month = _rawDate.clone();
        let /** @type {?} */ done = false;
        const /** @type {?} */ date = start.clone();
        let /** @type {?} */ monthIndex = date.month();
        let /** @type {?} */ count = 0;
        while (!done) {
            weeks.push({ days: this._buildWeek(date.clone(), month) });
            date.add(1, 'w');
            done = count++ > 4;
            monthIndex = date.month();
        }
        return weeks;
    }
    /**
     * @param {?} firstDate
     * @param {?} month
     * @return {?}
     */
    _buildWeek(firstDate, month) {
        let /** @type {?} */ date = firstDate;
        const /** @type {?} */ days = [];
        for (let /** @type {?} */ i = 0; i < 7; i++) {
            days.push({
                number: date.date(),
                isLastMonth: date.month() < month.month(),
                isNextMonth: date.month() > month.month(),
                isCurrentDay: date.isSame(new Date(), 'day'),
                isSelectedDay: this._isSelectedDay(date, month),
                isInRange: this._isInRange(date, month),
                title: date.format('YYYY-MM-DD'),
                date,
                disabled: this.nzDisabledDate && this.nzDisabledDate(date.toDate()),
                firstDisabled: this.nzDisabledDate && this.nzDisabledDate(date.toDate()) && (date.day() === 0 || (date.day() !== 0 && this.nzDisabledDate && !this.nzDisabledDate(date.clone().subtract(1, 'day').toDate()))),
                lastDisabled: this.nzDisabledDate && this.nzDisabledDate(date.toDate()) && (date.day() === 6 || (date.day() !== 6 && this.nzDisabledDate && !this.nzDisabledDate(date.clone().add(1, 'day').toDate())))
            });
            date = date.clone();
            date.add(1, 'd');
        }
        return days;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    _buildYears(date) {
        const /** @type {?} */ quarters = [];
        let /** @type {?} */ months = [];
        for (let /** @type {?} */ i = 0; i < 12; i++) {
            months.push({
                index: i,
                name: this._listOfMonthName[i],
                year: date.year(),
                isCurrentMonth: moment(new Date()).month() === i && date.isSame(new Date(), 'year'),
                isSelectedMonth: this._showMonth === i,
                disabled: this.nzDisabledDate && this.nzDisabledDate(date.month(i).toDate())
            });
            if ((i + 1) % 3 === 0) {
                quarters.push(months);
                months = [];
            }
        }
        return quarters;
    }
    /**
     * @return {?}
     */
    _buildCalendar() {
        moment.locale(this._locale);
        /** TODO replace with real i18n*/
        if (this._locale !== 'zh-cn') {
            try {
                this._yearUnit = moment.duration(12, 'month').humanize().split(' ')[1][0].toUpperCase() + moment.duration(12, 'month').humanize().split(' ')[1].slice(1, moment.duration(12, 'month').humanize().split(' ')[1].length);
                this._monthUnit = moment.duration(4, 'week').humanize().split(' ')[1][0].toUpperCase() + moment.duration(4, 'week').humanize().split(' ')[1].slice(1, moment.duration(4, 'week').humanize().split(' ')[1].length);
            }
            catch (/** @type {?} */ e) { }
        }
        if (this._locale === 'ru-RU') {
            try {
                const /** @type {?} */ monthText = moment.duration(12, 'month').humanize().split(' ')[0];
                const /** @type {?} */ weekText = moment.duration(4, 'week').humanize().split(' ')[0];
                this._yearUnit = monthText.charAt(0).toUpperCase() + monthText.slice(1);
                this._monthUnit = weekText.charAt(0).toUpperCase() + weekText.slice(1);
            }
            catch (/** @type {?} */ e) { }
        }
        this._listOfYearName = this._generateYears(this._showYear);
        this._listOfWeekName = moment.weekdaysMin();
        this._listOfMonthName = moment.monthsShort();
        const /** @type {?} */ date = moment(this.nzValue).year(this._showYear).month(this._showMonth);
        this._weeksCalendar = this._buildMonth(date);
        this._quartersCalendar = this._buildYears(date);
    }
    /**
     * @param {?} year
     * @return {?}
     */
    _generateYears(year) {
        const /** @type {?} */ listOfYears = [];
        for (const /** @type {?} */ i of Array.from(Array(20).keys())) {
            listOfYears.push(i - 10 + year);
        }
        return listOfYears;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._buildCalendar();
    }
}
NzCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-calendar',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div
      [class.ant-fullcalendar-fullscreen]="nzFullScreen"
      [class.ant-patch-full-height]="nzDatePicker">
      <div class="ant-fullcalendar-header" *ngIf="nzShowHeader">
        <nz-select
          class="ant-fullcalendar-year-select" style="width: 75px;"
          [ngModel]="_showYear"
          (ngModelChange)="_showYear = $event;_buildCalendar()">
          <nz-option
            *ngFor="let year of _listOfYearName"
            [nzLabel]="year"
            [nzValue]="year">
          </nz-option>
        </nz-select>
        <nz-select
          class="ant-fullcalendar-month-select"
          style="width: 70px;"
          *ngIf="nzMode == 'year'"
          [ngModel]="_showMonth"
          (ngModelChange)="_showMonth = $event;_buildCalendar()">
          <nz-option
            *ngFor="let _month of _listOfMonthName;let i = index;"
            [nzLabel]="_month"
            [nzValue]="i">
          </nz-option>
        </nz-select>
        <nz-radio-group [(ngModel)]="nzMode">
          <label nz-radio-button [nzValue]="'year'">
            <span>{{ _yearUnit }}</span>
          </label><label nz-radio-button [nzValue]="'month'">
          <span>{{ _monthUnit }}</span>
        </label>
        </nz-radio-group>
      </div>
      <div
        [class.ant-fullcalendar-fullscreen]="nzFullScreen"
        [class.ant-fullcalendar]="!nzDatePicker"
        [class.ant-fullcalendar-full]="!nzDatePicker"
        [class.ant-patch-full-height]="nzDatePicker">
        <div
          [class.ant-fullcalendar-calendar-body]="!nzDatePicker"
          [class.ant-calendar-body]="!nzDatePicker"
          [class.ant-patch-full-height]="nzDatePicker">
          <table
            [class.ant-fullcalendar-table]="!nzDatePicker"
            [class.ant-calendar-table]="nzDatePicker"
            [class.ant-patch-full-height]="nzDatePicker"
            *ngIf="nzMode == 'year'">
            <thead>
            <tr>
              <th
                *ngFor="let _min of _listOfWeekName"
                [class.ant-fullcalendar-column-header]="!nzDatePicker"
                [class.ant-calendar-column-header]="nzDatePicker">
                <span class="ant-fullcalendar-column-header-inner">{{ _min }}</span>
              </th>
            </tr>
            </thead>
            <tbody
              [class.ant-fullcalendartbody]="!nzDatePicker"
              [class.ant-calendartbody]="nzDatePicker">
            <tr *ngFor="let week of _weeksCalendar">
              <ng-template [ngIf]="!nzDatePicker">
                <td
                  [attr.title]="day.title"
                  *ngFor="let day of week.days"
                  [class.ant-fullcalendar-cell]="!nzDatePicker"
                  [class.ant-calendar-cell]="nzDatePicker"
                  [class.ant-fullcalendar-last-month-cell]="day.isLastMonth"
                  [class.ant-fullcalendar-next-month-btn-day]="day.isNextMonth"
                  [class.ant-fullcalendar-selected-day]="day.isSelectedDay"
                  [class.ant-fullcalendar-today]="day.isCurrentDay">
                  <div class="ant-fullcalendar-date">
                    <div class="ant-fullcalendar-value" (click)="_clickDay($event,day)">{{ day.number }}</div>
                    <div class="ant-fullcalendar-content">
                      <ng-template
                        *ngIf="dateCell"
                        [ngTemplateOutlet]="dateCell"
                        [ngTemplateOutletContext]="{ $implicit: day}">
                      </ng-template>
                    </div>
                  </div>
                </td>
              </ng-template>
              <ng-template [ngIf]="nzDatePicker">
                <td
                  [attr.title]="day.title"
                  *ngFor="let day of week.days"
                  class="ant-calendar-cell"
                  [class.ant-calendar-disabled-cell-first-of-row]="day.firstDisabled"
                  [class.ant-calendar-disabled-cell-last-of-row]="day.lastDisabled"
                  [class.ant-calendar-disabled-cell]="day.disabled"
                  [class.ant-calendar-last-month-cell]="day.isLastMonth"
                  [class.ant-calendar-next-month-btn-day]="day.isNextMonth"
                  [class.ant-calendar-selected-day]="day.isSelectedDay"
                  [class.ant-calendar-in-range-cell]="day.isInRange && !day.isSelectedDay"
                  [class.ant-calendar-today]="day.isCurrentDay"
                  (mouseenter)="_onDayHover($event, day)">
                  <div class="ant-calendar-date"
                       (click)="_clickDay($event,day)">
                    {{ day.number }}
                  </div>
                </td>
              </ng-template>
            </tr>
            </tbody>
          </table>
          <table
            [class.ant-fullcalendar-month-panel-table]="!nzDatePicker"
            [class.ant-calendar-month-panel-table]="nzDatePicker"
            *ngIf="nzMode == 'month'">
            <tbody class="ant-fullcalendar-month-panel-tbody">
            <tr *ngFor="let quarter of _quartersCalendar">
              <ng-template [ngIf]="!nzDatePicker">
                <td
                  *ngFor="let month of quarter"
                  [attr.title]="month.name"
                  class="ant-fullcalendar-month-panel-cell"
                  [class.ant-fullcalendar-month-panel-selected-cell]="month.isSelectedMonth"
                  [class.ant-fullcalendar-month-panel-current-cell]="month.isCurrentMonth">
                  <div class="ant-fullcalendar-month">
                    <div class="ant-fullcalendar-value" (click)="_clickMonth($event,month)">{{ month.name }}</div>
                    <div class="ant-fullcalendar-content">
                      <ng-template
                        *ngIf="monthCell"
                        [ngTemplateOutlet]="monthCell"
                        [ngTemplateOutletContext]="{ $implicit: month}">
                      </ng-template>
                    </div>
                  </div>
                </td>
              </ng-template>
              <ng-template [ngIf]="nzDatePicker">
                <td
                  *ngFor="let month of quarter"
                  [attr.title]="month.name"
                  class="ant-calendar-month-panel-cell"
                  [class.ant-calendar-month-panel-selected-cell]="month.isSelectedMonth"
                  [class.ant-calendar-month-panel-cell-disabled]="month.disabled"
                  [class.ant-calendar-month-panel-current-cell]="month.isCurrentMonth">
                  <div class="ant-calendar-month-panel-month"(click)="_clickMonth($event,month)">
                    {{ month.name }}
                  </div>
                </td>
              </ng-template>
            </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-fullcalendar {
  font-size: 12px;
  line-height: 1.5;
  outline: none;
  border-top: 1px solid #d9d9d9;
}
.ant-fullcalendar-month-select {
  margin-left: 5px;
}
.ant-fullcalendar-header {
  padding: 11px 16px 11px 0;
  text-align: right;
}
.ant-fullcalendar-header .ant-select-dropdown {
  text-align: left;
}
.ant-fullcalendar-header .ant-radio-group {
  margin-left: 8px;
  text-align: left;
}
.ant-fullcalendar-header label.ant-radio-button {
  height: 22px;
  line-height: 20px;
  padding: 0 10px;
}
.ant-fullcalendar-date-panel {
  position: relative;
  outline: none;
}
.ant-fullcalendar-calendar-body {
  padding: 8px 8px 14px;
}
.ant-fullcalendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
  height: 246px;
}
.ant-fullcalendar table,
.ant-fullcalendar th,
.ant-fullcalendar td {
  border: 0;
}
.ant-fullcalendar td {
  position: relative;
}
.ant-fullcalendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-fullcalendar-column-header {
  line-height: 18px;
  padding: 0;
  width: 33px;
  text-align: center;
}
.ant-fullcalendar-column-header .ant-fullcalendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-fullcalendar-week-number-header .ant-fullcalendar-column-header-inner {
  display: none;
}
.ant-fullcalendar-month,
.ant-fullcalendar-date {
  text-align: center;
  transition: all .3s;
}
.ant-fullcalendar-value {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 4px;
  width: 22px;
  height: 22px;
  padding: 0;
  background: transparent;
  line-height: 22px;
  transition: all .3s;
}
.ant-fullcalendar-value:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-fullcalendar-value:active {
  background: #108ee9;
  color: #fff;
}
.ant-fullcalendar-month-panel-cell .ant-fullcalendar-value {
  width: 48px;
}
.ant-fullcalendar-today .ant-fullcalendar-value,
.ant-fullcalendar-month-panel-current-cell .ant-fullcalendar-value {
  box-shadow: 0 0 0 1px #108ee9;
}
.ant-fullcalendar-selected-day .ant-fullcalendar-value,
.ant-fullcalendar-month-panel-selected-cell .ant-fullcalendar-value {
  background: #108ee9;
  color: #fff;
}
.ant-fullcalendar-disabled-cell-first-of-row .ant-fullcalendar-value {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-fullcalendar-disabled-cell-last-of-row .ant-fullcalendar-value {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-fullcalendar-last-month-cell .ant-fullcalendar-value,
.ant-fullcalendar-next-month-btn-day .ant-fullcalendar-value {
  color: rgba(0, 0, 0, 0.25);
}
.ant-fullcalendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  border-collapse: separate;
}
.ant-fullcalendar-content {
  position: absolute;
  width: 100%;
  left: 0;
  bottom: -9px;
}
.ant-fullcalendar-fullscreen {
  border-top: 0;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-table {
  table-layout: fixed;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-header .ant-radio-group {
  margin-left: 16px;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-header label.ant-radio-button {
  height: 28px;
  line-height: 26px;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month,
.ant-fullcalendar-fullscreen .ant-fullcalendar-date {
  text-align: left;
  margin: 0 4px;
  display: block;
  color: rgba(0, 0, 0, 0.65);
  height: 116px;
  padding: 4px 8px;
  border-top: 2px solid #e9e9e9;
  transition: background .3s;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month:hover,
.ant-fullcalendar-fullscreen .ant-fullcalendar-date:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month:active,
.ant-fullcalendar-fullscreen .ant-fullcalendar-date:active {
  background: #d2eafb;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-column-header {
  text-align: right;
  padding-right: 12px;
  padding-bottom: 5px;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-value {
  text-align: right;
  background: transparent;
  width: auto;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-today .ant-fullcalendar-value {
  color: rgba(0, 0, 0, 0.65);
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-current-cell .ant-fullcalendar-month,
.ant-fullcalendar-fullscreen .ant-fullcalendar-today .ant-fullcalendar-date {
  border-top-color: #108ee9;
  background: transparent;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-current-cell .ant-fullcalendar-value,
.ant-fullcalendar-fullscreen .ant-fullcalendar-today .ant-fullcalendar-value {
  box-shadow: none;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-selected-cell .ant-fullcalendar-month,
.ant-fullcalendar-fullscreen .ant-fullcalendar-selected-day .ant-fullcalendar-date {
  background: #ecf6fd;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-month-panel-selected-cell .ant-fullcalendar-value,
.ant-fullcalendar-fullscreen .ant-fullcalendar-selected-day .ant-fullcalendar-value {
  color: #108ee9;
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-last-month-cell .ant-fullcalendar-date,
.ant-fullcalendar-fullscreen .ant-fullcalendar-next-month-btn-day .ant-fullcalendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-fullcalendar-fullscreen .ant-fullcalendar-content {
  height: 90px;
  overflow-y: auto;
  position: static;
  width: auto;
  left: auto;
  bottom: auto;
}
.ant-fullcalendar-disabled-cell .ant-fullcalendar-date,
.ant-fullcalendar-disabled-cell .ant-fullcalendar-date:hover {
  cursor: not-allowed;
}
.ant-fullcalendar-disabled-cell:not(.ant-fullcalendar-today) .ant-fullcalendar-date,
.ant-fullcalendar-disabled-cell:not(.ant-fullcalendar-today) .ant-fullcalendar-date:hover {
  background: transparent;
}
.ant-fullcalendar-disabled-cell .ant-fullcalendar-value {
  color: rgba(0, 0, 0, 0.25);
  border-radius: 0;
  width: auto;
  cursor: not-allowed;
}
`,
                    `nz-calendar {
  display: block;
  position: relative;
}
.ant-patch-full-height {
  height: 100%;
}
`
                ]
            },] },
];
/** @nocollapse */
NzCalendarComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzLocaleService, },
];
NzCalendarComponent.propDecorators = {
    "dateCell": [{ type: ContentChild, args: ['dateCell',] },],
    "monthCell": [{ type: ContentChild, args: ['monthCell',] },],
    "nzClickDay": [{ type: Output },],
    "nzClickMonth": [{ type: Output },],
    "nzHoverDay": [{ type: Output },],
    "nzClearTime": [{ type: Input },],
    "nzMode": [{ type: Input },],
    "nzFullScreen": [{ type: Input },],
    "nzShowHeader": [{ type: Input },],
    "nzIsRange": [{ type: Input },],
    "nzDisabledDate": [{ type: Input },],
    "nzDatePicker": [{ type: Input }, { type: HostBinding, args: ['class.ant-patch-full-height',] },],
    "nzValue": [{ type: Input },],
    "nzRangeValue": [{ type: Input },],
    "nzHoveringSelectValue": [{ type: Input },],
    "nzShowYear": [{ type: Input },],
    "nzShowMonth": [{ type: Input },],
    "nzLocale": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCalendarModule {
}
NzCalendarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NzSelectModule, NzRadioModule, FormsModule, NzLocaleModule],
                declarations: [NzCalendarComponent],
                exports: [NzCalendarComponent]
            },] },
];
/** @nocollapse */
NzCalendarModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCardGridDirective {
}
NzCardGridDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-card-grid]',
                host: {
                    '[class.ant-card-grid]': 'true'
                }
            },] },
];
/** @nocollapse */
NzCardGridDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCardComponent {
    constructor() {
        this._borderd = true;
        this._loading = false;
        this._noHovering = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzBordered(value) {
        this._borderd = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzBordered() {
        return this._borderd;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLoading(value) {
        this._loading = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzLoading() {
        return this._loading;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzNoHovering(value) {
        this._noHovering = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzNoHovering() {
        return this._noHovering;
    }
}
NzCardComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-card',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-card-head" *ngIf="title">
      <h3 class="ant-card-head-title">
        <ng-template
          [ngTemplateOutlet]="title">
        </ng-template>
      </h3>
      <div class="ant-card-extra" *ngIf="extra">
        <ng-template
          [ngTemplateOutlet]="extra">
        </ng-template>
      </div>
    </div>
    <div class="ant-card-body">
      <ng-template
        *ngIf="!nzLoading"
        [ngTemplateOutlet]="body">
      </ng-template>
      <div *ngIf="nzLoading">
        <p class="ant-card-loading-block" style="width: 94%;"></p>
        <p>
          <span class="ant-card-loading-block" style="width: 28%;"></span><span class="ant-card-loading-block" style="width: 62%;"></span>
        </p>
        <p>
          <span class="ant-card-loading-block" style="width: 22%;"></span><span class="ant-card-loading-block" style="width: 66%;"></span>
        </p>
        <p>
          <span class="ant-card-loading-block" style="width: 56%;"></span><span class="ant-card-loading-block" style="width: 39%;"></span>
        </p>
        <p>
          <span class="ant-card-loading-block" style="width: 21%;"></span><span class="ant-card-loading-block" style="width: 15%;"></span><span class="ant-card-loading-block" style="width: 40%;"></span>
        </p>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-card {
  background: #fff;
  border-radius: 2px;
  font-size: 12px;
  position: relative;
  transition: all .3s;
}
.ant-card:not(.ant-card-no-hovering):hover {
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  border-color: rgba(0, 0, 0, 0.2);
}
.ant-card-bordered {
  border: 1px solid #e9e9e9;
}
.ant-card-head {
  height: 48px;
  line-height: 48px;
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
  padding: 0 24px;
  border-radius: 2px 2px 0 0;
  zoom: 1;
  margin-bottom: -1px;
  display: flex;
}
.ant-card-head:before,
.ant-card-head:after {
  content: " ";
  display: table;
}
.ant-card-head:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-card-head-title {
  font-size: 14px;
  text-overflow: ellipsis;
  max-width: 100%;
  overflow: hidden;
  white-space: nowrap;
  color: rgba(0, 0, 0, 0.85);
  font-weight: 500;
  display: inline-block;
  flex: 1;
}
.ant-card-extra {
  float: right;
  text-align: right;
  margin-left: auto;
}
.ant-card-body {
  padding: 24px;
  zoom: 1;
}
.ant-card-body:before,
.ant-card-body:after {
  content: " ";
  display: table;
}
.ant-card-body:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-card-contain-grid .ant-card-body {
  margin: -1px 0 0 -1px;
  padding: 0;
}
.ant-card-grid {
  border-radius: 0;
  border: 0;
  box-shadow: 1px 0 0 0 #e9e9e9, 0 1px 0 0 #e9e9e9, 1px 1px 0 0 #e9e9e9, 1px 0 0 0 #e9e9e9 inset, 0 1px 0 0 #e9e9e9 inset;
  width: 33.33%;
  float: left;
  padding: 24px;
  transition: all .3s;
}
.ant-card-grid:hover {
  position: relative;
  z-index: 1;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-card-wider-padding .ant-card-head {
  padding: 0 32px;
}
.ant-card-wider-padding .ant-card-body {
  padding: 24px 32px;
}
.ant-card-wider-padding .ant-card-extra {
  right: 32px;
}
.ant-card-padding-transition .ant-card-head,
.ant-card-padding-transition .ant-card-body {
  transition: padding .3s;
}
.ant-card-padding-transition .ant-card-extra {
  transition: right .3s;
}
.ant-card-loading .ant-card-body {
  user-select: none;
  padding: 0;
}
.ant-card-loading-content {
  padding: 24px;
}
.ant-card-loading-block {
  display: inline-block;
  margin: 5px 1% 0;
  height: 14px;
  border-radius: 2px;
  background: linear-gradient(90deg, rgba(207, 216, 220, 0.2), rgba(207, 216, 220, 0.4), rgba(207, 216, 220, 0.2));
  animation: card-loading 1.4s ease infinite;
  background-size: 600% 600%;
}
@keyframes card-loading {
  0%,
  100% {
    background-position: 0 50%;
  }
  50% {
    background-position: 100% 50%;
  }
}
`,
                    `nz-card {
  display: block;
  position: relative;
}
`
                ],
                host: {
                    '[class.ant-card]': 'true'
                }
            },] },
];
/** @nocollapse */
NzCardComponent.ctorParameters = () => [];
NzCardComponent.propDecorators = {
    "nzBordered": [{ type: Input }, { type: HostBinding, args: ['class.ant-card-bordered',] },],
    "title": [{ type: ContentChild, args: ['title',] },],
    "extra": [{ type: ContentChild, args: ['extra',] },],
    "body": [{ type: ContentChild, args: ['body',] },],
    "nzLoading": [{ type: Input },],
    "nzNoHovering": [{ type: Input }, { type: HostBinding, args: ['class.ant-card-no-hovering',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCardModule {
}
NzCardModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [NzCardComponent, NzCardGridDirective],
                exports: [NzCardComponent, NzCardGridDirective]
            },] },
];
/** @nocollapse */
NzCardModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCarouselContentDirective {
    /**
     * @param {?} _el
     */
    constructor(_el) {
        this._el = _el;
        this.width = 0;
        this.isActive = false;
        this.left = null;
        this.top = null;
        this.fadeMode = false;
        this.nativeElement = this._el.nativeElement;
    }
    /**
     * @return {?}
     */
    get setActiveClass() {
        return this.isActive === true;
    }
    /**
     * @return {?}
     */
    get setWidth() {
        return this.width;
    }
    /**
     * @return {?}
     */
    get setLeft() {
        return this.left;
    }
    /**
     * @return {?}
     */
    get setTop() {
        return this.top;
    }
    /**
     * @return {?}
     */
    get setPosition() {
        if (this.fadeMode) {
            return 'relative';
        }
    }
    /**
     * @return {?}
     */
    get setOpacity() {
        if (this.fadeMode) {
            return this.isActive ? 1 : 0;
        }
    }
}
NzCarouselContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-carousel-content]',
                host: {
                    '[class.slick-slide]': 'true'
                }
            },] },
];
/** @nocollapse */
NzCarouselContentDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzCarouselContentDirective.propDecorators = {
    "setActiveClass": [{ type: HostBinding, args: ['class.slick-active',] },],
    "setWidth": [{ type: HostBinding, args: ['style.width.px',] },],
    "setLeft": [{ type: HostBinding, args: ['style.left.px',] },],
    "setTop": [{ type: HostBinding, args: ['style.top.px',] },],
    "setPosition": [{ type: HostBinding, args: ['style.position',] },],
    "setOpacity": [{ type: HostBinding, args: ['style.opacity',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCarouselComponent {
    /**
     * @param {?} hostElement
     * @param {?} _renderer
     */
    constructor(hostElement, _renderer) {
        this.hostElement = hostElement;
        this._renderer = _renderer;
        this._autoPlay = false;
        this._dots = true;
        this._vertical = false;
        this._pauseOnHover = true;
        this.activeIndex = 0;
        this.transform = 'translate3d(0px, 0px, 0px)';
        this._autoPlaySpeed = 3000;
        this._mouseHover = false;
        this._nzCarousel = true;
        this.nzEffect = 'scrollx';
        this.nzAfterChange = new EventEmitter();
        this.nzBeforeChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _slideContents(value) {
        this.slideContents = value;
        this.renderContent();
    }
    /**
     * @return {?}
     */
    get nzAutoPlaySpeed() {
        return this._autoPlaySpeed;
    }
    /**
     * @param {?} speed
     * @return {?}
     */
    set nzAutoPlaySpeed(speed) {
        // css transition speed is 500ms
        this._autoPlaySpeed = Math.max(speed, 500);
    }
    /**
     * @return {?}
     */
    _onMouseenter() {
        this._mouseHover = true;
        if (this.nzAutoPlay && this.nzPauseOnHover) {
            this.clearInterval();
        }
    }
    /**
     * @return {?}
     */
    _onMouseleave() {
        this._mouseHover = false;
        if (!this.interval && this.nzAutoPlay) {
            this.createInterval();
        }
    }
    /**
     * @return {?}
     */
    get _nextIndex() {
        return this.activeIndex < this.slideContents.length - 1 ? (this.activeIndex + 1) : 0;
    }
    /**
     * @return {?}
     */
    get _prevIndex() {
        return this.activeIndex > 0 ? (this.activeIndex - 1) : (this.slideContents.length - 1);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPauseOnHover(value) {
        this._pauseOnHover = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzPauseOnHover() {
        return this._pauseOnHover;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDots(value) {
        this._dots = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDots() {
        return this._dots;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAutoPlay(value) {
        this._autoPlay = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAutoPlay() {
        return this._autoPlay;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVertical(value) {
        this._vertical = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzVertical() {
        return this._vertical;
    }
    /**
     * @param {?} content
     * @param {?} i
     * @return {?}
     */
    setActive(content, i) {
        if ((this.nzAutoPlay && !this.nzPauseOnHover) || (this.nzAutoPlay && this.nzPauseOnHover && !this._mouseHover)) {
            this.createInterval();
        }
        const /** @type {?} */ beforeIndex = this.slideContents.toArray().findIndex(slide => slide.isActive);
        this.nzBeforeChange.emit({ form: beforeIndex, to: i });
        this.activeIndex = i;
        if (this.nzEffect !== 'fade') {
            if (!this.nzVertical) {
                this.transform = `translate3d(${-this.activeIndex * this.hostElement.nativeElement.offsetWidth}px, 0px, 0px)`;
            }
            else {
                this.transform = `translate3d(0px, ${-this.activeIndex * this.hostElement.nativeElement.offsetHeight}px, 0px)`;
            }
        }
        this.slideContents.forEach(slide => slide.isActive = false);
        content.isActive = true;
        this.nzAfterChange.emit(i);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.renderContent();
    }
    /**
     * @return {?}
     */
    renderContent() {
        setTimeout(_ => {
            if (this.slideContents.first) {
                this.slideContents.first.isActive = true;
            }
            this.slideContents.forEach((content, i) => {
                content.width = this.hostElement.nativeElement.offsetWidth;
                if (this.nzEffect === 'fade') {
                    content.fadeMode = true;
                    if (!this.nzVertical) {
                        content.left = -i * content.width;
                    }
                    else {
                        content.top = -i * this.hostElement.nativeElement.offsetHeight;
                    }
                }
            });
            if (this.nzAutoPlay) {
                this.createInterval();
            }
            if (this.nzVertical) {
                this._renderer.removeStyle(this.slickList.nativeElement, 'height');
                if (this.slideContents.first) {
                    this._renderer.setStyle(this.slickList.nativeElement, 'height', `${this.slideContents.first.nativeElement.offsetHeight}px`);
                }
                this._renderer.removeStyle(this.slickTrack.nativeElement, 'height');
                this._renderer.setStyle(this.slickTrack.nativeElement, 'height', `${this.slideContents.length * this.hostElement.nativeElement.offsetHeight}px`);
            }
            else {
                this._renderer.removeStyle(this.slickTrack.nativeElement, 'width');
                this._renderer.setStyle(this.slickTrack.nativeElement, 'width', `${this.slideContents.length * this.hostElement.nativeElement.offsetWidth}px`);
            }
        });
    }
    /**
     * @return {?}
     */
    createInterval() {
        this.clearInterval();
        this.interval = setInterval(_ => {
            this.setActive(this.slideContents.toArray()[this._nextIndex], this._nextIndex);
        }, this.nzAutoPlaySpeed);
    }
    /**
     * @return {?}
     */
    clearInterval() {
        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }
    }
    /**
     * @return {?}
     */
    nzSlickNext() {
        this.setActive(this.slideContents.toArray()[this._nextIndex], this._nextIndex);
    }
    /**
     * @return {?}
     */
    nzSlickPrev() {
        this.setActive(this.slideContents.toArray()[this._prevIndex], this._prevIndex);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    nzSlickGoTo(index) {
        if (index >= 0 && index <= this.slideContents.length - 1) {
            this.setActive(this.slideContents.toArray()[index], index);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearInterval();
    }
}
NzCarouselComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-carousel',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="slick-initialized slick-slider" [class.slick-vertical]="nzVertical">
      <div class="slick-list" #slickList>
        <div class="slick-track" style="opacity: 1;" [style.transform]="transform" #slickTrack>
          <ng-content></ng-content>
        </div>
      </div>
      <ul class="slick-dots" style="display: block;" *ngIf="nzDots">
        <li [class.slick-active]="content.isActive" *ngFor="let content of slideContents; let i =index" (click)="setActive(content,i)">
          <button>1</button>
        </li>
      </ul>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-carousel .slick-slider {
  position: relative;
  display: block;
  box-sizing: border-box;
  -webkit-touch-callout: none;
  -ms-touch-action: pan-y;
  touch-action: pan-y;
  -webkit-tap-highlight-color: transparent;
}
.ant-carousel .slick-list {
  position: relative;
  overflow: hidden;
  display: block;
  margin: 0;
  padding: 0;
}
.ant-carousel .slick-list:focus {
  outline: none;
}
.ant-carousel .slick-list.dragging {
  cursor: pointer;
}
.ant-carousel .slick-slider .slick-track,
.ant-carousel .slick-slider .slick-list {
  transform: translate3d(0, 0, 0);
}
.ant-carousel .slick-track {
  position: relative;
  left: 0;
  top: 0;
  display: block;
}
.ant-carousel .slick-track:before,
.ant-carousel .slick-track:after {
  content: "";
  display: table;
}
.ant-carousel .slick-track:after {
  clear: both;
}
.slick-loading .ant-carousel .slick-track {
  visibility: hidden;
}
.ant-carousel .slick-slide {
  float: left;
  height: 100%;
  min-height: 1px;
  display: none;
}
[dir="rtl"] .ant-carousel .slick-slide {
  float: right;
}
.ant-carousel .slick-slide img {
  display: block;
}
.ant-carousel .slick-slide.slick-loading img {
  display: none;
}
.ant-carousel .slick-slide.dragging img {
  pointer-events: none;
}
.ant-carousel .slick-initialized .slick-slide {
  display: block;
}
.ant-carousel .slick-loading .slick-slide {
  visibility: hidden;
}
.ant-carousel .slick-vertical .slick-slide {
  display: block;
  height: auto;
  border: 1px solid transparent;
}
.ant-carousel .slick-arrow.slick-hidden {
  display: none;
}
.ant-carousel .slick-prev,
.ant-carousel .slick-next {
  position: absolute;
  display: block;
  height: 20px;
  width: 20px;
  line-height: 0;
  font-size: 0;
  cursor: pointer;
  background: transparent;
  color: transparent;
  top: 50%;
  margin-top: -10px;
  padding: 0;
  border: 0;
  outline: none;
}
.ant-carousel .slick-prev:hover,
.ant-carousel .slick-next:hover,
.ant-carousel .slick-prev:focus,
.ant-carousel .slick-next:focus {
  outline: none;
  background: transparent;
  color: transparent;
}
.ant-carousel .slick-prev:hover:before,
.ant-carousel .slick-next:hover:before,
.ant-carousel .slick-prev:focus:before,
.ant-carousel .slick-next:focus:before {
  opacity: 1;
}
.ant-carousel .slick-prev.slick-disabled:before,
.ant-carousel .slick-next.slick-disabled:before {
  opacity: 0.25;
}
.ant-carousel .slick-prev {
  left: -25px;
}
.ant-carousel .slick-prev:before {
  content: "←";
}
.ant-carousel .slick-next {
  right: -25px;
}
.ant-carousel .slick-next:before {
  content: "→";
}
.ant-carousel .slick-dots {
  position: absolute;
  bottom: 12px;
  list-style: none;
  display: block;
  text-align: center;
  padding: 0;
  width: 100%;
  height: 3px;
}
.ant-carousel .slick-dots li {
  position: relative;
  display: inline-block;
  vertical-align: top;
  text-align: center;
  margin: 0 2px;
  padding: 0;
}
.ant-carousel .slick-dots li button {
  border: 0;
  cursor: pointer;
  background: #fff;
  opacity: 0.3;
  display: block;
  width: 16px;
  height: 3px;
  border-radius: 1px;
  outline: none;
  font-size: 0;
  color: transparent;
  transition: all .5s;
}
.ant-carousel .slick-dots li button:hover,
.ant-carousel .slick-dots li button:focus {
  opacity: 0.75;
}
.ant-carousel .slick-dots li.slick-active button {
  background: #fff;
  opacity: 1;
  width: 24px;
}
.ant-carousel .slick-dots li.slick-active button:hover,
.ant-carousel .slick-dots li.slick-active button:focus {
  opacity: 1;
}
.ant-carousel-vertical .slick-dots {
  width: 3px;
  bottom: auto;
  right: 12px;
  top: 50%;
  transform: translateY(-50%);
  height: auto;
}
.ant-carousel-vertical .slick-dots li {
  margin: 0 2px;
  vertical-align: baseline;
}
.ant-carousel-vertical .slick-dots li button {
  width: 3px;
  height: 16px;
}
.ant-carousel-vertical .slick-dots li.slick-active button {
  width: 3px;
  height: 24px;
}
`,
                    `nz-carousel {
  display: block;
  position: relative;
  width: 100%;
  height: 100%;
}
nz-carousel .slick-track {
  transition: all 0.5s ease;
}
nz-carousel .slick-track .slick-slide {
  transition: opacity 500ms ease;
}
`
                ],
                host: {
                    '[class.ant-carousel]': 'true'
                }
            },] },
];
/** @nocollapse */
NzCarouselComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzCarouselComponent.propDecorators = {
    "_slideContents": [{ type: ContentChildren, args: [NzCarouselContentDirective,] },],
    "slickList": [{ type: ViewChild, args: ['slickList',] },],
    "slickTrack": [{ type: ViewChild, args: ['slickTrack',] },],
    "_nzCarousel": [{ type: HostBinding, args: ['class.ant-carousel',] },],
    "nzEffect": [{ type: Input },],
    "nzAfterChange": [{ type: Output },],
    "nzBeforeChange": [{ type: Output },],
    "nzAutoPlaySpeed": [{ type: Input },],
    "_onMouseenter": [{ type: HostListener, args: ['mouseenter',] },],
    "_onMouseleave": [{ type: HostListener, args: ['mouseleave',] },],
    "nzPauseOnHover": [{ type: Input },],
    "nzDots": [{ type: Input },],
    "nzAutoPlay": [{ type: Input },],
    "nzVertical": [{ type: Input }, { type: HostBinding, args: ['class.ant-carousel-vertical',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCarouselModule {
}
NzCarouselModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzCarouselComponent, NzCarouselContentDirective],
                exports: [NzCarouselComponent, NzCarouselContentDirective],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzCarouselModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzInputGroupComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._compat = false;
        this._prefixCls = 'ant-input';
        this._el = this._elementRef.nativeElement;
        this._render.addClass(this._el, `${this._prefixCls}-group`);
    }
    /**
     * @return {?}
     */
    get _isLarge() {
        return this.nzSize === 'lg';
    }
    /**
     * @return {?}
     */
    get _isSmall() {
        return this.nzSize === 'sm';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCompact(value) {
        this._compat = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCompact() {
        return this._compat;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        /** trim text node between button */
        Array.from(this._el.childNodes).forEach((node) => {
            if (node.nodeType === 3) {
                this._el.removeChild(node);
            }
        });
    }
}
NzInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-input-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-search-icon {
  cursor: pointer;
  transition: all .3s;
  font-size: 14px;
}
.ant-input-search-icon:hover {
  color: #108ee9;
}
.ant-search-input-wrapper {
  display: inline-block;
  vertical-align: middle;
}
.ant-search-input.ant-input-group .ant-input:first-child,
.ant-search-input.ant-input-group .ant-select:first-child {
  border-radius: 4px;
  position: absolute;
  top: -1px;
  width: 100%;
}
.ant-search-input.ant-input-group .ant-input:first-child {
  padding-right: 36px;
}
.ant-search-input .ant-search-btn {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-radius: 0 3px 3px 0;
  left: -1px;
  position: relative;
  border-width: 0 0 0 1px;
  z-index: 2;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-search-input .ant-search-btn > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus {
  color: #108ee9;
  background-color: #fff;
  border-color: #108ee9;
}
.ant-search-input .ant-search-btn:hover > a:only-child,
.ant-search-input .ant-search-btn:focus > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:hover > a:only-child:after,
.ant-search-input .ant-search-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  color: #0e77ca;
  background-color: #fff;
  border-color: #0e77ca;
}
.ant-search-input .ant-search-btn:active > a:only-child,
.ant-search-input .ant-search-btn.active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:active > a:only-child:after,
.ant-search-input .ant-search-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn.disabled,
.ant-search-input .ant-search-btn[disabled],
.ant-search-input .ant-search-btn.disabled:hover,
.ant-search-input .ant-search-btn[disabled]:hover,
.ant-search-input .ant-search-btn.disabled:focus,
.ant-search-input .ant-search-btn[disabled]:focus,
.ant-search-input .ant-search-btn.disabled:active,
.ant-search-input .ant-search-btn[disabled]:active,
.ant-search-input .ant-search-btn.disabled.active,
.ant-search-input .ant-search-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input .ant-search-btn.disabled > a:only-child,
.ant-search-input .ant-search-btn[disabled] > a:only-child,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child,
.ant-search-input .ant-search-btn.disabled:active > a:only-child,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child,
.ant-search-input .ant-search-btn.disabled.active > a:only-child,
.ant-search-input .ant-search-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn.disabled > a:only-child:after,
.ant-search-input .ant-search-btn[disabled] > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child:after,
.ant-search-input .ant-search-btn.disabled.active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus,
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  background: #fff;
}
.ant-search-input .ant-search-btn:hover {
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty,
.ant-search-input:hover .ant-search-btn-noempty {
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover,
.ant-search-input:hover .ant-search-btn-noempty:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus,
.ant-search-input:hover .ant-search-btn-noempty:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active,
.ant-search-input:hover .ant-search-btn-noempty:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active,
.ant-search-input:hover .ant-search-btn-noempty.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled,
.ant-search-input:hover .ant-search-btn-noempty.disabled,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled],
.ant-search-input:hover .ant-search-btn-noempty[disabled],
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-select-combobox .ant-select-selection__rendered {
  margin-right: 29px;
}
.ant-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input:hover {
  border-color: #49a9ee;
}
.ant-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group {
  position: relative;
  display: table;
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}
.ant-input-group[class*="col-"] {
  float: none;
  padding-left: 0;
  padding-right: 0;
}
.ant-input-group > [class*="col-"] {
  padding-right: 8px;
}
.ant-input-group > [class*="col-"]:last-child {
  padding-right: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap,
.ant-input-group > .ant-input {
  display: table-cell;
}
.ant-input-group-addon:not(:first-child):not(:last-child),
.ant-input-group-wrap:not(:first-child):not(:last-child),
.ant-input-group > .ant-input:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap {
  width: 1px;
  white-space: nowrap;
  vertical-align: middle;
}
.ant-input-group-wrap > * {
  display: block !important;
}
.ant-input-group .ant-input {
  float: left;
  width: 100%;
  margin-bottom: 0;
}
.ant-input-group .ant-input:focus {
  z-index: 1;
}
.ant-input-group-addon {
  padding: 4px 7px;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  color: rgba(0, 0, 0, 0.65);
  text-align: center;
  background-color: #eee;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  position: relative;
  transition: all .3s;
}
.ant-input-group-addon .ant-select {
  margin: -5px -7px;
}
.ant-input-group-addon .ant-select .ant-select-selection {
  background-color: inherit;
  margin: -1px;
  border: 1px solid transparent;
  box-shadow: none;
}
.ant-input-group-addon .ant-select-open .ant-select-selection,
.ant-input-group-addon .ant-select-focused .ant-select-selection {
  color: #108ee9;
}
.ant-input-group-addon > i:only-child:after {
  position: absolute;
  content: '';
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.ant-input-group > .ant-input:first-child,
.ant-input-group-addon:first-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input:first-child .ant-select .ant-select-selection,
.ant-input-group-addon:first-child .ant-select .ant-select-selection {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:first-child) .ant-input {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:last-child) .ant-input {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group-addon:first-child {
  border-right: 0;
}
.ant-input-group-addon:last-child {
  border-left: 0;
}
.ant-input-group > .ant-input:last-child,
.ant-input-group-addon:last-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input:last-child .ant-select .ant-select-selection,
.ant-input-group-addon:last-child .ant-select .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-lg .ant-input,
.ant-input-group-lg > .ant-input-group-addon {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-group-sm .ant-input,
.ant-input-group-sm > .ant-input-group-addon {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group-lg .ant-select-selection--single {
  height: 32px;
}
.ant-input-group-sm .ant-select-selection--single {
  height: 22px;
}
.ant-input-group .ant-input-affix-wrapper {
  display: table-cell;
  width: 100%;
  float: left;
}
.ant-input-group.ant-input-group-compact {
  display: block;
  zoom: 1;
}
.ant-input-group.ant-input-group-compact:before,
.ant-input-group.ant-input-group-compact:after {
  content: " ";
  display: table;
}
.ant-input-group.ant-input-group-compact:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-input-group.ant-input-group-compact > * {
  border-radius: 0;
  border-right-width: 0;
  vertical-align: top;
  float: none;
  display: inline-block;
}
.ant-input-group.ant-input-group-compact .ant-input {
  float: none;
  z-index: auto;
}
.ant-input-group.ant-input-group-compact > .ant-select > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker .ant-time-picker-input {
  border-radius: 0;
  border-right-width: 0;
}
.ant-input-group.ant-input-group-compact > *:first-child,
.ant-input-group.ant-input-group-compact > .ant-select:first-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:first-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:first-child .ant-time-picker-input {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-input-group.ant-input-group-compact > *:last-child,
.ant-input-group.ant-input-group-compact > .ant-select:last-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:last-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:last-child .ant-time-picker-input {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-right-width: 1px;
}
.ant-input-group-wrapper {
  display: inline-block;
  vertical-align: top;
  width: 100%;
}
.ant-input-affix-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}
.ant-input-affix-wrapper .ant-input {
  z-index: 1;
}
.ant-input-affix-wrapper:hover .ant-input:not(.ant-input-disabled) {
  border-color: #49a9ee;
}
.ant-input-affix-wrapper .ant-input-prefix,
.ant-input-affix-wrapper .ant-input-suffix {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  line-height: 0;
  color: rgba(0, 0, 0, 0.65);
}
.ant-input-affix-wrapper .ant-input-prefix {
  left: 7px;
}
.ant-input-affix-wrapper .ant-input-suffix {
  right: 7px;
}
.ant-input-affix-wrapper .ant-input:not(:first-child) {
  padding-left: 24px;
}
.ant-input-affix-wrapper .ant-input:not(:last-child) {
  padding-right: 24px;
}
.ant-input-affix-wrapper .ant-input {
  min-height: 100%;
}
`
                ]
            },] },
];
/** @nocollapse */
NzInputGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputGroupComponent.propDecorators = {
    "_isLarge": [{ type: HostBinding, args: [`class.ant-input-group-lg`,] },],
    "_isSmall": [{ type: HostBinding, args: [`class.ant-input-group-sm`,] },],
    "nzSize": [{ type: Input },],
    "nzCompact": [{ type: Input }, { type: HostBinding, args: [`class.ant-input-group-compact`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const HIDDEN_TEXTAREA_STYLE = `
  min-height:0 !important;
  max-height:none !important;
  height:0 !important;
  visibility:hidden !important;
  overflow:hidden !important;
  position:absolute !important;
  z-index:-1000 !important;
  top:0 !important;
  right:0 !important
`;
const SIZING_STYLE = [
    'letter-spacing',
    'line-height',
    'padding-top',
    'padding-bottom',
    'font-family',
    'font-weight',
    'font-size',
    'text-rendering',
    'text-transform',
    'width',
    'text-indent',
    'padding-left',
    'padding-right',
    'border-width',
    'box-sizing',
];
const computedStyleCache = {};
let hiddenTextarea;
/**
 * @param {?} node
 * @param {?=} useCache
 * @return {?}
 */
function calculateNodeStyling(node, useCache = false) {
    const /** @type {?} */ nodeRef = (node.getAttribute('id') ||
        node.getAttribute('data-reactid') ||
        node.getAttribute('name'));
    if (useCache && computedStyleCache[nodeRef]) {
        return computedStyleCache[nodeRef];
    }
    const /** @type {?} */ style$$1 = window.getComputedStyle(node);
    const /** @type {?} */ boxSizing = (style$$1.getPropertyValue('box-sizing') ||
        style$$1.getPropertyValue('-moz-box-sizing') ||
        style$$1.getPropertyValue('-webkit-box-sizing'));
    const /** @type {?} */ paddingSize = (parseFloat(style$$1.getPropertyValue('padding-bottom')) +
        parseFloat(style$$1.getPropertyValue('padding-top')));
    const /** @type {?} */ borderSize = (parseFloat(style$$1.getPropertyValue('border-bottom-width')) +
        parseFloat(style$$1.getPropertyValue('border-top-width')));
    const /** @type {?} */ sizingStyle = SIZING_STYLE
        .map(name => `${name}:${style$$1.getPropertyValue(name)}`)
        .join(';');
    const /** @type {?} */ nodeInfo = {
        sizingStyle,
        paddingSize,
        borderSize,
        boxSizing,
    };
    if (useCache && nodeRef) {
        computedStyleCache[nodeRef] = nodeInfo;
    }
    return nodeInfo;
}
/**
 * @param {?} uiTextNode
 * @param {?=} useCache
 * @param {?=} minRows
 * @param {?=} maxRows
 * @return {?}
 */
function calculateNodeHeight(uiTextNode, useCache = false, minRows = null, maxRows = null) {
    if (!hiddenTextarea) {
        hiddenTextarea = document.createElement('textarea');
        document.body.appendChild(hiddenTextarea);
    }
    // Fix wrap="off" issue
    // https://github.com/ant-design/ant-design/issues/6577
    if (uiTextNode.getAttribute('wrap')) {
        hiddenTextarea.setAttribute('wrap', uiTextNode.getAttribute('wrap'));
    }
    else {
        hiddenTextarea.removeAttribute('wrap');
    }
    // Copy all CSS properties that have an impact on the height of the content in
    // the textbox
    const { paddingSize, borderSize, boxSizing, sizingStyle, } = calculateNodeStyling(uiTextNode, useCache);
    // Need to have the overflow attribute to hide the scrollbar otherwise
    // text-lines will not calculated properly as the shadow will technically be
    // narrower for content
    hiddenTextarea.setAttribute('style', `${sizingStyle};${HIDDEN_TEXTAREA_STYLE}`);
    hiddenTextarea.value = uiTextNode.value || uiTextNode.placeholder || '';
    let /** @type {?} */ minHeight = -Infinity;
    let /** @type {?} */ maxHeight = Infinity;
    let /** @type {?} */ height = hiddenTextarea.scrollHeight;
    let /** @type {?} */ overflowY;
    if (boxSizing === 'border-box') {
        // border-box: add border, since height = content + padding + border
        height = height + borderSize;
    }
    else if (boxSizing === 'content-box') {
        // remove padding, since height = content
        height = height - paddingSize;
    }
    if (minRows !== null || maxRows !== null) {
        // measure height of a textarea with a single row
        hiddenTextarea.value = '';
        const /** @type {?} */ singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;
        if (minRows !== null) {
            minHeight = singleRowHeight * minRows;
            if (boxSizing === 'border-box') {
                minHeight = minHeight + paddingSize + borderSize;
            }
            height = Math.max(minHeight, height);
        }
        if (maxRows !== null) {
            maxHeight = singleRowHeight * maxRows;
            if (boxSizing === 'border-box') {
                maxHeight = maxHeight + paddingSize + borderSize;
            }
            overflowY = height > maxHeight ? '' : 'hidden';
            height = Math.min(maxHeight, height);
        }
    }
    // Remove scroll bar flash when autosize without maxRows
    if (!maxRows) {
        overflowY = 'hidden';
    }
    return { height, minHeight, maxHeight, overflowY };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class NzInputComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._disabled = false;
        this._readonly = false;
        this._size = 'default';
        this._prefixCls = 'ant-input';
        this._composing = false;
        this._autosize = false;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.nzType = 'text';
        this.nzBlur = new EventEmitter();
        this.nzFocus = new EventEmitter();
        this.nzOnSearch = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = { large: 'lg', small: 'sm' }[value];
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzReadonly(value) {
        this._readonly = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzReadonly() {
        return this._readonly;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAutosize(value) {
        if (typeof value === 'string') {
            this._autosize = true;
        }
        else {
            this._autosize = value;
        }
        if (this._autosize) {
            this.nzRows = 1;
        }
    }
    /**
     * @return {?}
     */
    get nzAutosize() {
        return this._autosize;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    compositionStart(e) {
        this._composing = true;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    compositionEnd(e) {
        this._composing = false;
        this.onChange(this._value);
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if ((this._value === value) || ((this._value == null) && (value == null))) {
            return;
        }
        this._value = value;
        if (!this._composing) {
            this.onChange(value);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitBlur($event) {
        this.nzBlur.emit($event);
        this.onTouched();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitFocus($event) {
        this.nzFocus.emit($event);
    }
    /**
     * @return {?}
     */
    _onPressEnter() {
        if (this.nzType === 'search') {
            this._emitSearch();
        }
    }
    /**
     * @return {?}
     */
    _emitSearch() {
        this.nzOnSearch.emit(this._value);
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [`${this._prefixCls}-${this._size}`]: true,
            [`${this._prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    resizeTextarea() {
        const /** @type {?} */ textAreaRef = this.textAreaRef.nativeElement;
        // eliminate jitter
        textAreaRef.style.height = 'auto';
        const /** @type {?} */ maxRows = this.nzAutosize ? (/** @type {?} */ (this.nzAutosize)).maxRows || null : null;
        const /** @type {?} */ minRows = this.nzAutosize ? (/** @type {?} */ (this.nzAutosize)).minRows || null : null;
        const /** @type {?} */ textareaStyles = calculateNodeHeight(textAreaRef, false, minRows, maxRows);
        textAreaRef.style.height = `${textareaStyles.height}px`;
        textAreaRef.style.overflowY = textareaStyles.overflowY;
    }
    /**
     * @return {?}
     */
    textareaOnChange() {
        if (this.nzType === 'textarea' && this.nzAutosize) {
            this.resizeTextarea();
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.nzType === 'search' || this._prefixContent || this._suffixContent) {
            this._renderer.setAttribute(this._el, 'class', `${this._prefixCls}-affix-wrapper`);
        }
        else {
            this._renderer.setAttribute(this._el, 'class', `${this._prefixCls}-wrapper`);
        }
        if ((this._addOnContentBefore || this._addOnContentAfter)) {
            this._renderer.setAttribute(this._el, 'class', `${this._prefixCls}-group`);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.nzType === 'textarea' && this.nzAutosize) {
            setTimeout(() => this.resizeTextarea(), 0);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // this.nzValue = value; // [NOTE] nzValue will trigger the onChange which leads to a new "VIEW -> MODEL updating"
        this._value = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
}
NzInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-input',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span class="ant-input-group-addon" *ngIf="_addOnContentBefore">
      <ng-template [ngTemplateOutlet]="_addOnContentBefore">
      </ng-template>
    </span>
    <span class="ant-input-prefix" *ngIf="_prefixContent">
      <ng-template [ngTemplateOutlet]="_prefixContent">
      </ng-template>
    </span>
    <ng-template [ngIf]="nzType!='textarea'">
      <input
        (blur)="_emitBlur($event)"
        (focus)="_emitFocus($event)"
        (keyup.enter)="_onPressEnter()"
        [attr.id]="nzId"
        [disabled]="nzDisabled"
        [readonly]="nzReadonly"
        [attr.type]="nzType"
        class="ant-input"
        [class.ant-input-search]="nzType==='search'"
        [ngClass]="_classMap"
        [attr.placeholder]="nzPlaceHolder"
        [(ngModel)]="nzValue">
    </ng-template>
    <ng-template [ngIf]="nzType=='textarea'">
      <textarea
        (blur)="_emitBlur($event)"
        (focus)="_emitFocus($event)"
        (input)="textareaOnChange($event)"
        [attr.id]="nzId"
        #inputTextarea
        [disabled]="nzDisabled"
        [readonly]="nzReadonly"
        type="textarea"
        [attr.rows]="nzRows"
        [attr.cols]="nzCols"
        class="ant-input"
        [ngClass]="_classMap"
        [attr.placeholder]="nzPlaceHolder"
        [(ngModel)]="nzValue"></textarea>
    </ng-template>
    <span class="ant-input-suffix" *ngIf="(nzType==='search')||(_suffixContent)">
      <i class="anticon anticon-search ant-input-search-icon" *ngIf="nzType==='search'" (click)="_emitSearch()"></i>
      <ng-template [ngTemplateOutlet]="_suffixContent">
      </ng-template>
    </span>
    <span class="ant-input-group-addon" *ngIf="_addOnContentAfter">
      <ng-template [ngTemplateOutlet]="_addOnContentAfter">
      </ng-template>
    </span>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzInputComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-search-icon {
  cursor: pointer;
  transition: all .3s;
  font-size: 14px;
}
.ant-input-search-icon:hover {
  color: #108ee9;
}
.ant-search-input-wrapper {
  display: inline-block;
  vertical-align: middle;
}
.ant-search-input.ant-input-group .ant-input:first-child,
.ant-search-input.ant-input-group .ant-select:first-child {
  border-radius: 4px;
  position: absolute;
  top: -1px;
  width: 100%;
}
.ant-search-input.ant-input-group .ant-input:first-child {
  padding-right: 36px;
}
.ant-search-input .ant-search-btn {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-radius: 0 3px 3px 0;
  left: -1px;
  position: relative;
  border-width: 0 0 0 1px;
  z-index: 2;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-search-input .ant-search-btn > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus {
  color: #108ee9;
  background-color: #fff;
  border-color: #108ee9;
}
.ant-search-input .ant-search-btn:hover > a:only-child,
.ant-search-input .ant-search-btn:focus > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:hover > a:only-child:after,
.ant-search-input .ant-search-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  color: #0e77ca;
  background-color: #fff;
  border-color: #0e77ca;
}
.ant-search-input .ant-search-btn:active > a:only-child,
.ant-search-input .ant-search-btn.active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:active > a:only-child:after,
.ant-search-input .ant-search-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn.disabled,
.ant-search-input .ant-search-btn[disabled],
.ant-search-input .ant-search-btn.disabled:hover,
.ant-search-input .ant-search-btn[disabled]:hover,
.ant-search-input .ant-search-btn.disabled:focus,
.ant-search-input .ant-search-btn[disabled]:focus,
.ant-search-input .ant-search-btn.disabled:active,
.ant-search-input .ant-search-btn[disabled]:active,
.ant-search-input .ant-search-btn.disabled.active,
.ant-search-input .ant-search-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input .ant-search-btn.disabled > a:only-child,
.ant-search-input .ant-search-btn[disabled] > a:only-child,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child,
.ant-search-input .ant-search-btn.disabled:active > a:only-child,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child,
.ant-search-input .ant-search-btn.disabled.active > a:only-child,
.ant-search-input .ant-search-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn.disabled > a:only-child:after,
.ant-search-input .ant-search-btn[disabled] > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child:after,
.ant-search-input .ant-search-btn.disabled.active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus,
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  background: #fff;
}
.ant-search-input .ant-search-btn:hover {
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty,
.ant-search-input:hover .ant-search-btn-noempty {
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover,
.ant-search-input:hover .ant-search-btn-noempty:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus,
.ant-search-input:hover .ant-search-btn-noempty:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active,
.ant-search-input:hover .ant-search-btn-noempty:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active,
.ant-search-input:hover .ant-search-btn-noempty.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled,
.ant-search-input:hover .ant-search-btn-noempty.disabled,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled],
.ant-search-input:hover .ant-search-btn-noempty[disabled],
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-select-combobox .ant-select-selection__rendered {
  margin-right: 29px;
}
.ant-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input:hover {
  border-color: #49a9ee;
}
.ant-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group {
  position: relative;
  display: table;
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}
.ant-input-group[class*="col-"] {
  float: none;
  padding-left: 0;
  padding-right: 0;
}
.ant-input-group > [class*="col-"] {
  padding-right: 8px;
}
.ant-input-group > [class*="col-"]:last-child {
  padding-right: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap,
.ant-input-group > .ant-input {
  display: table-cell;
}
.ant-input-group-addon:not(:first-child):not(:last-child),
.ant-input-group-wrap:not(:first-child):not(:last-child),
.ant-input-group > .ant-input:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap {
  width: 1px;
  white-space: nowrap;
  vertical-align: middle;
}
.ant-input-group-wrap > * {
  display: block !important;
}
.ant-input-group .ant-input {
  float: left;
  width: 100%;
  margin-bottom: 0;
}
.ant-input-group .ant-input:focus {
  z-index: 1;
}
.ant-input-group-addon {
  padding: 4px 7px;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  color: rgba(0, 0, 0, 0.65);
  text-align: center;
  background-color: #eee;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  position: relative;
  transition: all .3s;
}
.ant-input-group-addon .ant-select {
  margin: -5px -7px;
}
.ant-input-group-addon .ant-select .ant-select-selection {
  background-color: inherit;
  margin: -1px;
  border: 1px solid transparent;
  box-shadow: none;
}
.ant-input-group-addon .ant-select-open .ant-select-selection,
.ant-input-group-addon .ant-select-focused .ant-select-selection {
  color: #108ee9;
}
.ant-input-group-addon > i:only-child:after {
  position: absolute;
  content: '';
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.ant-input-group > .ant-input:first-child,
.ant-input-group-addon:first-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input:first-child .ant-select .ant-select-selection,
.ant-input-group-addon:first-child .ant-select .ant-select-selection {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:first-child) .ant-input {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:last-child) .ant-input {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group-addon:first-child {
  border-right: 0;
}
.ant-input-group-addon:last-child {
  border-left: 0;
}
.ant-input-group > .ant-input:last-child,
.ant-input-group-addon:last-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input:last-child .ant-select .ant-select-selection,
.ant-input-group-addon:last-child .ant-select .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-lg .ant-input,
.ant-input-group-lg > .ant-input-group-addon {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-group-sm .ant-input,
.ant-input-group-sm > .ant-input-group-addon {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group-lg .ant-select-selection--single {
  height: 32px;
}
.ant-input-group-sm .ant-select-selection--single {
  height: 22px;
}
.ant-input-group .ant-input-affix-wrapper {
  display: table-cell;
  width: 100%;
  float: left;
}
.ant-input-group.ant-input-group-compact {
  display: block;
  zoom: 1;
}
.ant-input-group.ant-input-group-compact:before,
.ant-input-group.ant-input-group-compact:after {
  content: " ";
  display: table;
}
.ant-input-group.ant-input-group-compact:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-input-group.ant-input-group-compact > * {
  border-radius: 0;
  border-right-width: 0;
  vertical-align: top;
  float: none;
  display: inline-block;
}
.ant-input-group.ant-input-group-compact .ant-input {
  float: none;
  z-index: auto;
}
.ant-input-group.ant-input-group-compact > .ant-select > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker .ant-time-picker-input {
  border-radius: 0;
  border-right-width: 0;
}
.ant-input-group.ant-input-group-compact > *:first-child,
.ant-input-group.ant-input-group-compact > .ant-select:first-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:first-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:first-child .ant-time-picker-input {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-input-group.ant-input-group-compact > *:last-child,
.ant-input-group.ant-input-group-compact > .ant-select:last-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:last-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:last-child .ant-time-picker-input {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-right-width: 1px;
}
.ant-input-group-wrapper {
  display: inline-block;
  vertical-align: top;
  width: 100%;
}
.ant-input-affix-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}
.ant-input-affix-wrapper .ant-input {
  z-index: 1;
}
.ant-input-affix-wrapper:hover .ant-input:not(.ant-input-disabled) {
  border-color: #49a9ee;
}
.ant-input-affix-wrapper .ant-input-prefix,
.ant-input-affix-wrapper .ant-input-suffix {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  line-height: 0;
  color: rgba(0, 0, 0, 0.65);
}
.ant-input-affix-wrapper .ant-input-prefix {
  left: 7px;
}
.ant-input-affix-wrapper .ant-input-suffix {
  right: 7px;
}
.ant-input-affix-wrapper .ant-input:not(:first-child) {
  padding-left: 24px;
}
.ant-input-affix-wrapper .ant-input:not(:last-child) {
  padding-right: 24px;
}
.ant-input-affix-wrapper .ant-input {
  min-height: 100%;
}
`,
                    `nz-input {
  display: inline-block;
  width: 100%;
}
`
                ]
            },] },
];
/** @nocollapse */
NzInputComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputComponent.propDecorators = {
    "nzPlaceHolder": [{ type: Input },],
    "nzType": [{ type: Input },],
    "nzId": [{ type: Input },],
    "nzRows": [{ type: Input },],
    "nzCols": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "nzReadonly": [{ type: Input },],
    "nzAutosize": [{ type: Input },],
    "nzBlur": [{ type: Output },],
    "nzFocus": [{ type: Output },],
    "nzOnSearch": [{ type: Output },],
    "textAreaRef": [{ type: ViewChild, args: ['inputTextarea',] },],
    "_addOnContentBefore": [{ type: ContentChild, args: ['addOnBefore',] },],
    "_addOnContentAfter": [{ type: ContentChild, args: ['addOnAfter',] },],
    "_prefixContent": [{ type: ContentChild, args: ['prefix',] },],
    "_suffixContent": [{ type: ContentChild, args: ['suffix',] },],
    "compositionStart": [{ type: HostListener, args: ['compositionstart', ['$event'],] },],
    "compositionEnd": [{ type: HostListener, args: ['compositionend', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzInputDirectiveComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._disabled = false;
        this._readonly = false;
        this.size = 'default';
        this._autosize = false;
        this.nativeElement = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this.size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this.size = { large: 'lg', small: 'sm' }[value];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        const /** @type {?} */ disabled = toBoolean(value);
        if (disabled) {
            this._render.setAttribute(this.nativeElement, 'disabled', '');
        }
        else {
            this._render.removeAttribute(this.nativeElement, 'disabled');
        }
        this._disabled = disabled;
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzReadonly(value) {
        const /** @type {?} */ readonly = toBoolean(value);
        if (readonly) {
            this._render.setAttribute(this.nativeElement, 'readonly', '');
        }
        else {
            this._render.removeAttribute(this.nativeElement, 'readonly');
        }
        this._readonly = readonly;
    }
    /**
     * @return {?}
     */
    get nzReadonly() {
        return this._readonly;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAutosize(value) {
        if (typeof value === 'string') {
            this._autosize = true;
        }
        else {
            this._autosize = value;
        }
        if (this._autosize) {
            this._render.setAttribute(this.nativeElement, 'autosize', '');
        }
        else {
            this._render.removeAttribute(this.nativeElement, 'autosize');
        }
    }
    /**
     * @return {?}
     */
    get nzAutosize() {
        return this._autosize;
    }
    /**
     * @return {?}
     */
    get setLgClass() {
        return this.size === 'lg';
    }
    /**
     * @return {?}
     */
    get setSmClass() {
        return this.size === 'sm';
    }
}
NzInputDirectiveComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-input]',
                encapsulation: ViewEncapsulation.None,
                template: ``,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-search-icon {
  cursor: pointer;
  transition: all .3s;
  font-size: 14px;
}
.ant-input-search-icon:hover {
  color: #108ee9;
}
.ant-search-input-wrapper {
  display: inline-block;
  vertical-align: middle;
}
.ant-search-input.ant-input-group .ant-input:first-child,
.ant-search-input.ant-input-group .ant-select:first-child {
  border-radius: 4px;
  position: absolute;
  top: -1px;
  width: 100%;
}
.ant-search-input.ant-input-group .ant-input:first-child {
  padding-right: 36px;
}
.ant-search-input .ant-search-btn {
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border-color: #d9d9d9;
  border-radius: 0 3px 3px 0;
  left: -1px;
  position: relative;
  border-width: 0 0 0 1px;
  z-index: 2;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-search-input .ant-search-btn > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus {
  color: #108ee9;
  background-color: #fff;
  border-color: #108ee9;
}
.ant-search-input .ant-search-btn:hover > a:only-child,
.ant-search-input .ant-search-btn:focus > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:hover > a:only-child:after,
.ant-search-input .ant-search-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  color: #0e77ca;
  background-color: #fff;
  border-color: #0e77ca;
}
.ant-search-input .ant-search-btn:active > a:only-child,
.ant-search-input .ant-search-btn.active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn:active > a:only-child:after,
.ant-search-input .ant-search-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn.disabled,
.ant-search-input .ant-search-btn[disabled],
.ant-search-input .ant-search-btn.disabled:hover,
.ant-search-input .ant-search-btn[disabled]:hover,
.ant-search-input .ant-search-btn.disabled:focus,
.ant-search-input .ant-search-btn[disabled]:focus,
.ant-search-input .ant-search-btn.disabled:active,
.ant-search-input .ant-search-btn[disabled]:active,
.ant-search-input .ant-search-btn.disabled.active,
.ant-search-input .ant-search-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input .ant-search-btn.disabled > a:only-child,
.ant-search-input .ant-search-btn[disabled] > a:only-child,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child,
.ant-search-input .ant-search-btn.disabled:active > a:only-child,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child,
.ant-search-input .ant-search-btn.disabled.active > a:only-child,
.ant-search-input .ant-search-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input .ant-search-btn.disabled > a:only-child:after,
.ant-search-input .ant-search-btn[disabled] > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:hover > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:hover > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:focus > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:focus > a:only-child:after,
.ant-search-input .ant-search-btn.disabled:active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled]:active > a:only-child:after,
.ant-search-input .ant-search-btn.disabled.active > a:only-child:after,
.ant-search-input .ant-search-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-search-btn:hover,
.ant-search-input .ant-search-btn:focus,
.ant-search-input .ant-search-btn:active,
.ant-search-input .ant-search-btn.active {
  background: #fff;
}
.ant-search-input .ant-search-btn:hover {
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty,
.ant-search-input:hover .ant-search-btn-noempty {
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover,
.ant-search-input:hover .ant-search-btn-noempty:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus,
.ant-search-input:hover .ant-search-btn-noempty:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active,
.ant-search-input:hover .ant-search-btn-noempty:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active,
.ant-search-input:hover .ant-search-btn-noempty.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled,
.ant-search-input:hover .ant-search-btn-noempty.disabled,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled],
.ant-search-input:hover .ant-search-btn-noempty[disabled],
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child {
  color: currentColor;
}
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled] > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:hover > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:focus > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled]:active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty.disabled.active > a:only-child:after,
.ant-search-input.ant-search-input-focus .ant-search-btn-noempty[disabled].active > a:only-child:after,
.ant-search-input:hover .ant-search-btn-noempty[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-search-input .ant-select-combobox .ant-select-selection__rendered {
  margin-right: 29px;
}
.ant-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input:hover {
  border-color: #49a9ee;
}
.ant-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group {
  position: relative;
  display: table;
  border-collapse: separate;
  border-spacing: 0;
  width: 100%;
}
.ant-input-group[class*="col-"] {
  float: none;
  padding-left: 0;
  padding-right: 0;
}
.ant-input-group > [class*="col-"] {
  padding-right: 8px;
}
.ant-input-group > [class*="col-"]:last-child {
  padding-right: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap,
.ant-input-group > .ant-input {
  display: table-cell;
}
.ant-input-group-addon:not(:first-child):not(:last-child),
.ant-input-group-wrap:not(:first-child):not(:last-child),
.ant-input-group > .ant-input:not(:first-child):not(:last-child) {
  border-radius: 0;
}
.ant-input-group-addon,
.ant-input-group-wrap {
  width: 1px;
  white-space: nowrap;
  vertical-align: middle;
}
.ant-input-group-wrap > * {
  display: block !important;
}
.ant-input-group .ant-input {
  float: left;
  width: 100%;
  margin-bottom: 0;
}
.ant-input-group .ant-input:focus {
  z-index: 1;
}
.ant-input-group-addon {
  padding: 4px 7px;
  font-size: 12px;
  font-weight: normal;
  line-height: 1;
  color: rgba(0, 0, 0, 0.65);
  text-align: center;
  background-color: #eee;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  position: relative;
  transition: all .3s;
}
.ant-input-group-addon .ant-select {
  margin: -5px -7px;
}
.ant-input-group-addon .ant-select .ant-select-selection {
  background-color: inherit;
  margin: -1px;
  border: 1px solid transparent;
  box-shadow: none;
}
.ant-input-group-addon .ant-select-open .ant-select-selection,
.ant-input-group-addon .ant-select-focused .ant-select-selection {
  color: #108ee9;
}
.ant-input-group-addon > i:only-child:after {
  position: absolute;
  content: '';
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}
.ant-input-group > .ant-input:first-child,
.ant-input-group-addon:first-child {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input:first-child .ant-select .ant-select-selection,
.ant-input-group-addon:first-child .ant-select .ant-select-selection {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:first-child) .ant-input {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input-affix-wrapper:not(:last-child) .ant-input {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.ant-input-group-addon:first-child {
  border-right: 0;
}
.ant-input-group-addon:last-child {
  border-left: 0;
}
.ant-input-group > .ant-input:last-child,
.ant-input-group-addon:last-child {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group > .ant-input:last-child .ant-select .ant-select-selection,
.ant-input-group-addon:last-child .ant-select .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-lg .ant-input,
.ant-input-group-lg > .ant-input-group-addon {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-group-sm .ant-input,
.ant-input-group-sm > .ant-input-group-addon {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-group-lg .ant-select-selection--single {
  height: 32px;
}
.ant-input-group-sm .ant-select-selection--single {
  height: 22px;
}
.ant-input-group .ant-input-affix-wrapper {
  display: table-cell;
  width: 100%;
  float: left;
}
.ant-input-group.ant-input-group-compact {
  display: block;
  zoom: 1;
}
.ant-input-group.ant-input-group-compact:before,
.ant-input-group.ant-input-group-compact:after {
  content: " ";
  display: table;
}
.ant-input-group.ant-input-group-compact:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-input-group.ant-input-group-compact > * {
  border-radius: 0;
  border-right-width: 0;
  vertical-align: top;
  float: none;
  display: inline-block;
}
.ant-input-group.ant-input-group-compact .ant-input {
  float: none;
  z-index: auto;
}
.ant-input-group.ant-input-group-compact > .ant-select > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker .ant-time-picker-input {
  border-radius: 0;
  border-right-width: 0;
}
.ant-input-group.ant-input-group-compact > *:first-child,
.ant-input-group.ant-input-group-compact > .ant-select:first-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:first-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:first-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:first-child .ant-time-picker-input {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-input-group.ant-input-group-compact > *:last-child,
.ant-input-group.ant-input-group-compact > .ant-select:last-child > .ant-select-selection,
.ant-input-group.ant-input-group-compact > .ant-calendar-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-select-auto-complete:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-cascader-picker:last-child .ant-input,
.ant-input-group.ant-input-group-compact > .ant-mention-wrapper:last-child .ant-mention-editor,
.ant-input-group.ant-input-group-compact > .ant-time-picker:last-child .ant-time-picker-input {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  border-right-width: 1px;
}
.ant-input-group-wrapper {
  display: inline-block;
  vertical-align: top;
  width: 100%;
}
.ant-input-affix-wrapper {
  position: relative;
  display: inline-block;
  width: 100%;
}
.ant-input-affix-wrapper .ant-input {
  z-index: 1;
}
.ant-input-affix-wrapper:hover .ant-input:not(.ant-input-disabled) {
  border-color: #49a9ee;
}
.ant-input-affix-wrapper .ant-input-prefix,
.ant-input-affix-wrapper .ant-input-suffix {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
  line-height: 0;
  color: rgba(0, 0, 0, 0.65);
}
.ant-input-affix-wrapper .ant-input-prefix {
  left: 7px;
}
.ant-input-affix-wrapper .ant-input-suffix {
  right: 7px;
}
.ant-input-affix-wrapper .ant-input:not(:first-child) {
  padding-left: 24px;
}
.ant-input-affix-wrapper .ant-input:not(:last-child) {
  padding-right: 24px;
}
.ant-input-affix-wrapper .ant-input {
  min-height: 100%;
}
`
                ],
                host: {
                    '[class.ant-input]': 'true'
                }
            },] },
];
/** @nocollapse */
NzInputDirectiveComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputDirectiveComponent.propDecorators = {
    "nzSize": [{ type: Input },],
    "nzDisabled": [{ type: Input }, { type: HostBinding, args: [`class.ant-input-disabled`,] },],
    "nzReadonly": [{ type: Input },],
    "nzAutosize": [{ type: Input },],
    "setLgClass": [{ type: HostBinding, args: [`class.ant-input-lg`,] },],
    "setSmClass": [{ type: HostBinding, args: [`class.ant-input-sm`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzInputModule {
}
NzInputModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzInputComponent, NzInputGroupComponent, NzInputDirectiveComponent],
                exports: [NzInputComponent, NzInputGroupComponent, NzInputDirectiveComponent],
                imports: [CommonModule, FormsModule]
            },] },
];
/** @nocollapse */
NzInputModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ESC = 27;
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function toArray(value) {
    let /** @type {?} */ ret;
    if (value == null) {
        ret = [];
    }
    else if (!Array.isArray(value)) {
        ret = [value];
    }
    else {
        ret = value;
    }
    return ret;
}
/**
 * @template T
 * @param {?} array1
 * @param {?} array2
 * @return {?}
 */
function arrayEquals(array1, array2) {
    if (!array1 || !array2 || array1.length !== array2.length) {
        return false;
    }
    const /** @type {?} */ len = array1.length;
    for (let /** @type {?} */ i = 0; i < len; i++) {
        if (array1[i] !== array2[i]) {
            return false;
        }
    }
    return true;
}
const defaultDisplayRender = label => label.join(' / ');
/**
 * @record
 */

/**
 * @record
 */

class NzCascaderComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     * @param {?} _cdr
     */
    constructor(_elementRef, _render, _cdr) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._cdr = _cdr;
        this._allowClear = true;
        this._disabled = false;
        this._enableCache = true;
        this._showArrow = true;
        this._showInput = true;
        this._showSearch = false;
        this._changeOnSelect = false;
        this._prefixCls = 'ant-cascader';
        this._inputPrefixCls = 'ant-input';
        this._dropDownPosition = 'bottom';
        this._focused = false;
        this._popupVisible = false;
        this._displayLabelIsTemplate = false;
        this._displayLabelContext = {};
        /* tslint:disable-next-line:variable-name */
        this.__inputValue = '';
        // selection will trigger value change
        this._selectedOptions = [];
        // activaction will not triiger value change
        this._activatedOptions = [];
        // all data columns
        this._nzColumns = [];
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        /**
         * Input size, one of `large` `default` `small`
         */
        this.nzSize = 'default';
        /**
         * Input placeholder
         */
        this.nzPlaceHolder = 'Please select';
        /**
         * Hover text for the clear icon
         */
        this.nzClearText = 'Clear';
        /**
         * Specify content to show when no result matches.
         */
        this.nzNotFoundContent = 'Not Found';
        /**
         * Expand column item when click or hover, one of 'click' 'hover'
         */
        this.nzExpandTrigger = 'click';
        /**
         * Delay time to show when mouse enter, when `nzExpandTrigger` is `hover`.
         */
        this.nzMouseEnterDelay = 150;
        /**
         * Delay time to hide when mouse enter, when `nzExpandTrigger` is `hover`.
         */
        this.nzMouseLeaveDelay = 150;
        /**
         * Triggering mode: can be Array<'click'|'hover'>
         */
        this.nzTriggerAction = ['click'];
        /**
         * Property name for getting `value` in the option
         */
        this.nzValueProperty = 'value';
        /**
         * Property name for getting `label` in the option
         */
        this.nzLabelProperty = 'label';
        this.tabIndex = '0';
        /**
         * Event: emit on popup show or hide
         */
        this.nzVisibleChange = new EventEmitter();
        /**
         * Event: emit on values changed
         */
        this.nzChange = new EventEmitter();
        /**
         * Event: emit on values and selection changed
         */
        this.nzSelectionChange = new EventEmitter();
        /**
         * Event: emit on option selected, event data：{option: any, index: number}
         */
        this.nzSelect = new EventEmitter();
        /**
         * Event: emit before loading children. event data：{option: any|null, index: number, resolve, reject}
         */
        this.nzLoad = new EventEmitter();
        /**
         * Event: emit on the clear button clicked
         */
        this.nzClear = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get _inputValue() {
        return this.__inputValue;
    }
    /**
     * @param {?} inputValue
     * @return {?}
     */
    set _inputValue(inputValue) {
        this.__inputValue = inputValue;
        if (inputValue.length) {
            this._addHostClass(`${this._prefixCls}-picker-with-value`);
        }
        else {
            this._removeHostClass(`${this._prefixCls}-picker-with-value`);
        }
    }
    /**
     * Whether is disabled
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * Whether show input box. Defaults to `true`.
     * @param {?} value
     * @return {?}
     */
    set nzShowInput(value) {
        this._showInput = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowInput() {
        return this._showInput;
    }
    /**
     * Whether can search. Defaults to `false`.
     * @param {?} value
     * @return {?}
     */
    set nzShowSearch(value) {
        this._showSearch = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowSearch() {
        return this._showSearch;
    }
    /**
     * Whether allow clear. Defaults to `true`.
     * @param {?} value
     * @return {?}
     */
    set nzAllowClear(value) {
        this._allowClear = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAllowClear() {
        return this._allowClear;
    }
    /**
     * Whether to show arrow
     * @param {?} value
     * @return {?}
     */
    set nzShowArrow(value) {
        this._showArrow = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowArrow() {
        return this._showArrow;
    }
    /**
     * Whether cache children when they were loaded asych
     * @param {?} value
     * @return {?}
     */
    set nzEnableCache(value) {
        this._enableCache = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzEnableCache() {
        return this._enableCache;
    }
    /**
     * Change value on each selection if set to true
     * @param {?} value
     * @return {?}
     */
    set nzChangeOnSelect(value) {
        this._changeOnSelect = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzChangeOnSelect() {
        return this._changeOnSelect;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'bottom' : 'top';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    nzFocus() {
        this._focused = true;
        this._addHostClass(`${this._prefixCls}-focused`);
    }
    /**
     * @return {?}
     */
    nzBlur() {
        this._focused = false;
        this._removeHostClass(`${this._prefixCls}-focused`);
    }
    /**
     * @return {?}
     */
    get _pickerLabelCls() {
        return {
            [`${this._prefixCls}-picker-label`]: true
        };
    }
    /**
     * @return {?}
     */
    get _arrowCls() {
        return {
            [`${this._prefixCls}-picker-arrow`]: true,
            [`${this._prefixCls}-picker-arrow-expand`]: this._popupVisible
        };
    }
    /**
     * @return {?}
     */
    get _clearCls() {
        return {
            [`${this._prefixCls}-picker-clear`]: true
        };
    }
    /**
     * @return {?}
     */
    get _inputCls() {
        return {
            [`${this._prefixCls}-input`]: 1,
            [`${this._inputPrefixCls}-disabled`]: this.nzDisabled,
            [`${this._inputPrefixCls}-lg`]: this.nzSize === 'large',
            [`${this._inputPrefixCls}-sm`]: this.nzSize === 'small',
        };
    }
    /**
     * @return {?}
     */
    get _menuCls() {
        return {
            [`${this._prefixCls}-menus`]: true,
            [`${this._prefixCls}-menus-hidden`]: !this._popupVisible,
            [`${this.nzPopupClassName}`]: this.nzPopupClassName
        };
    }
    /**
     * 获取菜单中列的样式
     * @return {?}
     */
    get _columnCls() {
        return {
            [`${this._prefixCls}-menu`]: true,
            [`${this.nzColumnClassName}`]: this.nzColumnClassName
        };
    }
    /**
     * 获取列中Option的样式
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _getOptionCls(option, index) {
        return {
            [`${this._prefixCls}-menu-item`]: true,
            [`${this._prefixCls}-menu-item-expand`]: !option.isLeaf,
            [`${this._prefixCls}-menu-item-active`]: this._isActiveOption(option, index),
            [`${this._prefixCls}-menu-item-disabled`]: option.disabled,
            [`${this._prefixCls}-menu-item-loading`]: option.loading
        };
    }
    /**
     * @return {?}
     */
    _getLabel() {
        return this._displayLabelIsTemplate ? '' : this._displayLabel;
    }
    /**
     * prevent input change event
     * @param {?} event
     * @return {?}
     */
    _handlerInputChange(event) {
        event.stopPropagation();
    }
    /**
     * input blur
     * @param {?} event
     * @return {?}
     */
    _handleInputBlur(event) {
        if (!this.nzShowSearch) {
            return;
        }
        if (this._popupVisible) {
            this.nzFocus();
        }
        else {
            this.nzBlur();
        }
    }
    /**
     * input focus
     * @param {?} event
     * @return {?}
     */
    _handleInputFocus(event) {
        if (!this.nzShowSearch) {
            return;
        }
        this.nzFocus();
    }
    /**
     * input key down
     * @param {?} event
     * @return {?}
     */
    _handleInputKeyDown(event) { }
    /**
     * @param {?} inputValue
     * @param {?=} fireSearch
     * @return {?}
     */
    _setInputValue(inputValue, fireSearch = true) {
        if (inputValue !== this._inputValue) {
            this._inputValue = inputValue;
        }
    }
    /**
     * @return {?}
     */
    _hasInput() {
        return this._inputValue.length > 0;
    }
    /**
     * @return {?}
     */
    _hasSelection() {
        return this._selectedOptions.length > 0;
    }
    /**
     * Whether the clear button is visible
     * @return {?}
     */
    get _showClearIcon() {
        const /** @type {?} */ isSelected = this._hasSelection();
        const /** @type {?} */ isHasInput = this._hasInput();
        return this.nzAllowClear && !this.nzDisabled && (isSelected || isHasInput);
    }
    /**
     * clear the input box and selected options
     * @param {?} event
     * @return {?}
     */
    _clearSelection(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this._displayLabel = '';
        this._displayLabelIsTemplate = false;
        this._selectedOptions = [];
        this._activatedOptions = [];
        this._setInputValue('', false);
        this.setPopupVisible(false);
        // trigger change event
        this._onValueChange();
    }
    /**
     * @return {?}
     */
    get _displayRender() {
        return this.nzDisplayRender || defaultDisplayRender;
    }
    /**
     * @return {?}
     */
    _buildDisplayLabel() {
        const /** @type {?} */ selectedOptions = this._selectedOptions;
        const /** @type {?} */ labels = selectedOptions.map(o => o[this.nzLabelProperty || 'label']);
        // 设置当前控件的显示值
        this._displayLabel = this._displayRender.call(this, labels, selectedOptions);
        this._displayLabelIsTemplate = !(typeof this._displayLabel === 'string');
        this._displayLabelContext = { labels, selectedOptions };
    }
    /**
     * 由用户来定义点击后是否变更
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _isChangeOn(option, index) {
        if (typeof this.nzChangeOn === 'function') {
            return this.nzChangeOn(option, index) === true;
        }
        return false;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyDown(event) {
        const /** @type {?} */ keyCode = event.keyCode;
        if (keyCode !== DOWN_ARROW &&
            keyCode !== UP_ARROW &&
            keyCode !== LEFT_ARROW &&
            keyCode !== RIGHT_ARROW &&
            keyCode !== ENTER &&
            keyCode !== BACKSPACE &&
            keyCode !== ESC) {
            return;
        }
        // Press any keys above to reopen menu
        if (!this._isPopupVisible() &&
            keyCode !== BACKSPACE &&
            keyCode !== ESC) {
            this.setPopupVisible(true);
            return;
        }
        // Press ESC to close menu
        if (keyCode === ESC) {
            this.setPopupVisible(false);
            return;
        }
        if (this._isPopupVisible()) {
            event.preventDefault();
            if (keyCode === DOWN_ARROW) {
                this._moveDown();
            }
            if (keyCode === UP_ARROW) {
                this._moveUp();
            }
            if (keyCode === LEFT_ARROW) {
                this._moveLeft();
            }
            if (keyCode === RIGHT_ARROW) {
                this._moveRight();
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onTriggerClick(event) {
        if (this.nzDisabled) {
            return;
        }
        this.onTouched(); // set your control to 'touched'
        if (this._isClickTiggerAction()) {
            this._delaySetPopupVisible(!this._popupVisible, 100);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onTriggerMouseEnter(event) {
        if (this.nzDisabled) {
            return;
        }
        if (this._isPointerTiggerAction()) {
            this._delaySetPopupVisible(true, this.nzMouseEnterDelay);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onTriggerMouseLeave(event) {
        if (this.nzDisabled) {
            return;
        }
        if (!this._isPopupVisible()) {
            return;
        }
        if (this._isPointerTiggerAction()) {
            const /** @type {?} */ currEl = this._el;
            const /** @type {?} */ popupEl = this.menu && /** @type {?} */ (this.menu.nativeElement);
            if (currEl.contains(/** @type {?} */ (event.target)) ||
                (popupEl && popupEl.contains(/** @type {?} */ (event.target)))) {
                return; // 还在菜单内部
            }
            this._delaySetPopupVisible(false, this.nzMouseLeaveDelay);
        }
    }
    /**
     * @return {?}
     */
    _isClickTiggerAction() {
        if (typeof this.nzTriggerAction === 'string') {
            return this.nzTriggerAction === 'click';
        }
        return this.nzTriggerAction.indexOf('click') !== -1;
    }
    /**
     * @return {?}
     */
    _isPointerTiggerAction() {
        if (typeof this.nzTriggerAction === 'string') {
            return this.nzTriggerAction === 'hover';
        }
        return this.nzTriggerAction.indexOf('hover') !== -1;
    }
    /**
     * @return {?}
     */
    _closeMenu() {
        this._clearDelayTimer();
        this.setPopupVisible(false);
    }
    /**
     * 显示或者隐藏菜单
     *
     * @param {?} visible true-显示，false-隐藏
     * @param {?} delay 延迟时间
     * @return {?}
     */
    _delaySetPopupVisible(visible, delay) {
        this._clearDelayTimer();
        if (delay) {
            this._delayTimer = setTimeout(() => {
                this.setPopupVisible(visible);
                this._clearDelayTimer();
            }, delay);
        }
        else {
            this.setPopupVisible(visible);
        }
    }
    /**
     * @return {?}
     */
    _isPopupVisible() {
        return this._popupVisible;
    }
    /**
     * @param {?} popupVisible
     * @return {?}
     */
    setPopupVisible(popupVisible) {
        if (this.nzDisabled) {
            return;
        }
        if (this._popupVisible !== popupVisible) {
            this._popupVisible = popupVisible;
            // We must listen to `mousedown` or `touchstart`, edge case:
            // https://github.com/ant-design/ant-design/issues/5804
            // https://github.com/react-component/calendar/issues/250
            // https://github.com/react-component/trigger/issues/50
            if (popupVisible) {
                if (!this._clickOutsideHandler) {
                    this._clickOutsideHandler = this._render.listen('document', 'mousedown', this._onDocumentClick.bind(this));
                }
                // always hide on mobile
                if (!this._touchOutsideHandler) {
                    this._touchOutsideHandler = this._render.listen('document', 'touchstart', this._onDocumentClick.bind(this));
                }
            }
            if (!popupVisible) {
                this._clearOutsideHandler();
            }
            if (popupVisible) {
                this._beforeVisible();
            }
            this.nzVisibleChange.emit(popupVisible);
        }
    }
    /**
     * load init data if necessary
     * @return {?}
     */
    _beforeVisible() {
        if (!this._nzColumns.length) {
            new Promise((resolve, reject) => {
                this.nzLoad.emit({
                    option: null,
                    index: -1,
                    resolve,
                    reject
                });
            }).then((children) => {
                this._setColumnData(children, 0);
            }, (reason) => {
                // should not be here
            });
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _onDocumentClick(event) {
        const /** @type {?} */ target = /** @type {?} */ (event.target);
        const /** @type {?} */ popupEl = this.menu && /** @type {?} */ (this.menu.nativeElement);
        if (!this._el.contains(target) && !popupEl.contains(target)) {
            this.setPopupVisible(false);
        }
    }
    /**
     * @return {?}
     */
    _clearOutsideHandler() {
        if (this._clickOutsideHandler) {
            this._clickOutsideHandler(); // Removes "listen" listener
            this._clickOutsideHandler = null;
        }
        if (this._touchOutsideHandler) {
            this._touchOutsideHandler(); // Removes "listen" listener
            this._touchOutsideHandler = null;
        }
    }
    /**
     * @return {?}
     */
    _clearDelayTimer() {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    }
    /**
     * 获取Option的值，例如，可以指定labelProperty="name"来取Name
     * @param {?} option
     * @return {?}
     */
    _getOptionLabel(option) {
        return option[this.nzLabelProperty || 'label'];
    }
    /**
     * 获取Option的值，例如，可以指定valueProperty="id"来取ID
     * @param {?} option
     * @return {?}
     */
    _getOptionValue(option) {
        return option[this.nzValueProperty || 'value'];
    }
    /**
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _isActiveOption(option, index) {
        const /** @type {?} */ activeOpt = this._activatedOptions[index];
        if (activeOpt === option) {
            return true;
        }
        if (activeOpt && this._getOptionValue(activeOpt) === this._getOptionValue(option)) {
            return true;
        }
        return false;
    }
    /**
     * 设置某列的激活的菜单选项
     *
     * @param {?} option 菜单选项
     * @param {?} index  选项所在的列组的索引
     * @return {?}
     */
    _setActiveOption(option, index) {
        if (!option || option.disabled) {
            return;
        }
        this._activatedOptions[index] = option;
        // 当直接选择最后一级时，前面的选项要补全。例如，选择“城市”，则自动补全“国家”、“省份”
        for (let /** @type {?} */ i = index - 1; i >= 0; i--) {
            if (!this._activatedOptions[i]) {
                this._activatedOptions[i] = this._activatedOptions[i + 1].parent;
            }
        }
        // 截断多余的选项，如选择“省份”，则只会有“国家”、“省份”，去掉“城市”、“区县”
        if (index < this._activatedOptions.length - 1) {
            this._activatedOptions = this._activatedOptions.slice(0, index + 1);
        }
        // trigger select event, and display label
        this._onSelectOption(option, index);
    }
    /**
     * @param {?} option
     * @param {?} index
     * @return {?}
     */
    _onSelectOption(option, index) {
        // trigger `nzSelect` event
        this.nzSelect.emit({
            option,
            index
        });
        // load children directly
        if (option.children && option.children.length) {
            option.isLeaf = false;
            option.children.forEach(child => child.parent = option);
            this._setColumnData(option.children, index + 1);
        }
        else if (!option.isLeaf) {
            // load children async
            new Promise((resolve, reject) => {
                this.nzLoad.emit({
                    option,
                    index,
                    resolve,
                    reject
                });
            }).then((children) => {
                children.forEach(child => child.parent = option);
                this._setColumnData(children, index + 1);
                if (this.nzEnableCache) {
                    option.children = children; // next time we load children directly
                }
            }, (reason) => {
                option.isLeaf = true;
            });
        }
        else {
            // clicking leaf node will remove any children columns
            if (index < this._nzColumns.length - 1) {
                this._nzColumns = this._nzColumns.slice(0, index + 1);
            }
        }
        // 生成显示
        if (option.isLeaf || this.nzChangeOnSelect || this._isChangeOn(option, index)) {
            this._selectedOptions = this._activatedOptions;
            // 设置当前控件的显示值
            this._buildDisplayLabel();
            // 触发变更事件
            this._onValueChange();
        }
        // close menu if click on leaf
        if (option.isLeaf) {
            this._delaySetPopupVisible(false, this.nzMouseLeaveDelay);
        }
    }
    /**
     * @param {?} options
     * @param {?} index
     * @return {?}
     */
    _setColumnData(options, index) {
        if (!arrayEquals(this._nzColumns[index], options)) {
            this._nzColumns[index] = options;
            if (index < this._nzColumns.length - 1) {
                this._nzColumns = this._nzColumns.slice(0, index + 1);
            }
        }
    }
    /**
     * 鼠标点击选项
     *
     * @param {?} option 菜单选项
     * @param {?} index 选项所在的列组的索引
     * @param {?} event 鼠标事件
     * @return {?}
     */
    _onOptionClick(option, index, event) {
        event.preventDefault();
        // Keep focused state for keyboard support
        this._el.focus();
        if (option && option.disabled) {
            return;
        }
        this._setActiveOption(option, index);
    }
    /**
     * press `up` or `down` arrow to select the sibling option.
     * @param {?} isUp
     * @return {?}
     */
    _moveUpOrDown(isUp) {
        const /** @type {?} */ columnIndex = Math.max(this._activatedOptions.length - 1, 0);
        // 该组中已经被激活的选项
        const /** @type {?} */ activeOption = this._activatedOptions[columnIndex];
        // 该组所有的选项，用于遍历获取下一个被激活的选项
        const /** @type {?} */ options = this._nzColumns[columnIndex];
        if (!options || !options.length) {
            return;
        }
        const /** @type {?} */ length = options.length;
        let /** @type {?} */ nextOptIndex = -1;
        if (!activeOption) {
            // 该列还没有选中的选项
            nextOptIndex = isUp ? length : -1;
        }
        else {
            nextOptIndex = options.indexOf(activeOption);
        }
        while (true) {
            nextOptIndex = isUp ? nextOptIndex - 1 : nextOptIndex + 1;
            if (nextOptIndex < 0 || nextOptIndex >= length) {
                break;
            }
            const /** @type {?} */ nextOption = options[nextOptIndex];
            if (!nextOption || nextOption.disabled) {
                continue;
            }
            this._setActiveOption(nextOption, columnIndex);
            break;
        }
    }
    /**
     * @return {?}
     */
    _moveUp() {
        this._moveUpOrDown(true);
    }
    /**
     * @return {?}
     */
    _moveDown() {
        this._moveUpOrDown(false);
    }
    /**
     * press `left` arrow to remove the last selected option.
     * If there is no option selected, emit `nzClear` event.
     * @return {?}
     */
    _moveLeft() {
        const /** @type {?} */ options = this._selectedOptions;
        if (options.length) {
            options.pop(); // Remove the last one
            const /** @type {?} */ len = options.length;
            if (len) {
                this._setActiveOption(options[len - 1], len - 1);
            }
            else {
                this.nzClear.emit();
            }
        }
    }
    /**
     * press `right` arrow to select the next column option.
     * @return {?}
     */
    _moveRight() {
        const /** @type {?} */ columns = this._nzColumns;
        const /** @type {?} */ length = this._selectedOptions.length;
        if (length === 0) {
            return;
        }
        const /** @type {?} */ nextColIndex = length;
        const /** @type {?} */ options = columns.length > nextColIndex ? columns[nextColIndex] : null;
        if (options) {
            // 存在`下级选项`
            const /** @type {?} */ len = options.length;
            for (let /** @type {?} */ i = 0; i < len; i++) {
                const /** @type {?} */ activeOpt = options[i];
                if (activeOpt && !activeOpt.disabled) {
                    this._setActiveOption(activeOpt, nextColIndex);
                    return;
                }
            }
        }
    }
    /**
     * 鼠标划入选项
     *
     * @param {?} option 菜单选项
     * @param {?} index 选项所在的列组的索引
     * @param {?} event 鼠标事件
     * @return {?}
     */
    _onOptionMouseEnter(option, index, event) {
        event.preventDefault();
        if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
            this._delaySelect(option, index, true);
        }
    }
    /**
     * 鼠标划出选项
     *
     * @param {?} option 菜单选项
     * @param {?} index 选项所在的列组的索引
     * @param {?} event 鼠标事件
     * @return {?}
     */
    _onOptionMouseLeave(option, index, event) {
        event.preventDefault();
        if (this.nzExpandTrigger === 'hover' && !option.isLeaf) {
            this._delaySelect(option, index, false);
        }
    }
    /**
     * @param {?} option
     * @param {?} index
     * @param {?} doSelect
     * @return {?}
     */
    _delaySelect(option, index, doSelect) {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
        if (doSelect) {
            this._delayTimer = setTimeout(() => {
                this._setActiveOption(option, index);
                this._delayTimer = null;
            }, 150);
        }
    }
    /**
     * @return {?}
     */
    _getSubmitValue() {
        const /** @type {?} */ values = [];
        this._selectedOptions.forEach(option => {
            values.push(this._getOptionValue(option));
        });
        return values;
    }
    /**
     * @return {?}
     */
    _onValueChange() {
        const /** @type {?} */ value = this._getSubmitValue();
        if (!arrayEquals(this._lastValue, value)) {
            this._lastValue = value;
            this.onChange(value); // Angular need this
            if (value.length === 0) {
                this.nzClear.emit(); // first trigger `clear` and then `change`
            }
            this.nzSelectionChange.emit(this._selectedOptions);
            this.nzChange.emit(value);
        }
    }
    /**
     * @param {?} classname
     * @return {?}
     */
    _addHostClass(classname) {
        this._render.addClass(this._el, classname);
    }
    /**
     * @param {?} classname
     * @return {?}
     */
    _removeHostClass(classname) {
        this._render.removeClass(this._el, classname);
    }
    /**
     * Write a new value to the element.
     *
     * \@Override (From ControlValueAccessor interface)
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        const /** @type {?} */ array = [];
        toArray(value).forEach((v, index) => {
            if (typeof v !== 'object') {
                const /** @type {?} */ obj = {};
                obj[this.nzValueProperty] = v;
                obj[this.nzLabelProperty] = v;
                array[index] = obj;
            }
            else {
                array[index] = v;
            }
        });
        this._activatedOptions = array;
        this._selectedOptions = array;
        this._buildDisplayLabel();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        if (isDisabled) {
            this._closeMenu();
            this._addHostClass(`${this._prefixCls}-picker-disabled`);
        }
        else {
            this._removeHostClass(`${this._prefixCls}-picker-disabled`);
        }
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // 设置第一列
        if (this.nzOptions && this.nzOptions.length) {
            this._nzColumns.push(this.nzOptions);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._delayTimer) {
            clearTimeout(this._delayTimer);
            this._delayTimer = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const /** @type {?} */ nzDisabled = changes["nzDisabled"];
        if (nzDisabled) {
            if (nzDisabled.currentValue) {
                this._addHostClass(`${this._prefixCls}-picker-disabled`);
            }
            else {
                this._removeHostClass(`${this._prefixCls}-picker-disabled`);
            }
        }
        const /** @type {?} */ nzOptions = changes["nzOptions"];
        if (nzOptions && !nzOptions.isFirstChange()) {
            this._nzColumns.splice(0);
            const /** @type {?} */ newOptions = nzOptions.currentValue;
            if (newOptions && newOptions.length) {
                this._nzColumns.push(newOptions);
                this._clearSelection(null);
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._addHostClass(this._prefixCls);
        this._addHostClass(`${this._prefixCls}-picker`);
    }
}
NzCascaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-cascader',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    dropDownAnimation
                ],
                template: `
    <div
      cdkOverlayOrigin
      #origin="cdkOverlayOrigin"
      #trigger
    >
      <div *ngIf="nzShowInput">
        <input #input
          nz-input
          [attr.autoComplete]="'off'"
          [attr.placeholder]="_hasInput() || _hasSelection() ? null : nzPlaceHolder"
          [readonly]="!nzShowSearch"
          [disabled]="nzDisabled"
          [nzSize]="nzSize"
          [ngClass]="_inputCls"
          [(ngModel)]="_inputValue"
          (blur)="_handleInputBlur($event)"
          (focus)="_handleInputFocus($event)"
          (keydown)="_handleInputKeyDown($event)"
          (change)="_handlerInputChange($event)"
        >
        <i *ngIf="_showClearIcon"
          [class]="'anticon anticon-cross-circle'"
          [ngClass]="_clearCls"
          [attr.title]="nzClearText"
          (click)="_clearSelection($event)"></i>
        <i *ngIf="nzShowArrow"
          class="anticon anticon-down"
          [ngClass]="_arrowCls"></i>
        <span [ngClass]="_pickerLabelCls">
          <ng-container *ngIf="_displayLabelIsTemplate">
            <ng-container *ngTemplateOutlet="_displayLabel; context: _displayLabelContext"></ng-container>
          </ng-container>
          <ng-container *ngIf="!_displayLabelIsTemplate">{{ _displayLabel }}</ng-container>
        </span>
      </div>
      <ng-content></ng-content>
    </div>
    <ng-template
      cdkConnectedOverlay
      cdkConnectedOverlayHasBackdrop
      [cdkConnectedOverlayOrigin]="origin"
      (backdropClick)="_closeMenu()"
      (detach)="_closeMenu()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayOpen]="_popupVisible"
    >
      <div #menu
        [ngClass]="_menuCls"
        [@dropDownAnimation]="_dropDownPosition"
      >
        <ul *ngFor="let options of _nzColumns; let i = index;"
          [ngClass]="_columnCls"
          [attr.data-key]="i">
          <li *ngFor="let option of options"
            [attr.data-key]="_getOptionValue(option)"
            [attr.title]="option.title || _getOptionLabel(option)"
            [ngClass]="_getOptionCls(option, i)"
            (mouseenter)="_onOptionMouseEnter(option, i, $event)"
            (mouseleave)="_onOptionMouseLeave(option, i, $event)"
            (click)="_onOptionClick(option, i, $event)"
          >
            {{ _getOptionLabel(option) }}
          </li>
        </ul>
      </div>
    </ng-template>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzCascaderComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-cascader {
  font-size: 12px;
}
.ant-cascader-input.ant-input {
  background-color: transparent !important;
  cursor: pointer;
  width: 100%;
  display: block;
}
.ant-cascader-picker {
  position: relative;
  display: inline-block;
  cursor: pointer;
  font-size: 12px;
  background-color: #fff;
  border-radius: 4px;
  outline: 0;
}
.ant-cascader-picker-with-value .ant-cascader-picker-label {
  color: transparent;
}
.ant-cascader-picker-disabled {
  cursor: not-allowed;
  background: #f7f7f7;
  color: rgba(0, 0, 0, 0.25);
}
.ant-cascader-picker-disabled .ant-cascader-input {
  cursor: not-allowed;
}
.ant-cascader-picker:focus .ant-cascader-input {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-cascader-picker-label {
  position: absolute;
  left: 0;
  height: 20px;
  line-height: 20px;
  top: 50%;
  margin-top: -10px;
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
  width: 100%;
  padding: 0 12px 0 8px;
}
.ant-cascader-picker-clear {
  opacity: 0;
  position: absolute;
  right: 8px;
  z-index: 2;
  background: #fff;
  top: 50%;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  cursor: pointer;
  transition: color 0.3s ease, opacity 0.15s ease;
}
.ant-cascader-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-cascader-picker:hover .ant-cascader-picker-clear {
  opacity: 1;
}
.ant-cascader-picker-arrow {
  position: absolute;
  z-index: 1;
  top: 50%;
  right: 8px;
  width: 12px;
  height: 12px;
  margin-top: -6px;
  line-height: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-cascader-picker-arrow {
  filter: none;
}
:root .ant-cascader-picker-arrow {
  font-size: 12px;
}
.ant-cascader-picker-arrow:before {
  transition: transform 0.2s ease;
}
.ant-cascader-picker-arrow.ant-cascader-picker-arrow-expand {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";
}
.ant-cascader-picker-arrow.ant-cascader-picker-arrow-expand:before {
  transform: rotate(180deg);
}
.ant-cascader-menus {
  font-size: 12px;
  background: #fff;
  position: absolute;
  z-index: 1050;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  white-space: nowrap;
}
.ant-cascader-menus-empty,
.ant-cascader-menus-hidden {
  display: none;
}
.ant-cascader-menus.slide-up-enter.slide-up-enter-active.ant-cascader-menus-placement-bottomLeft,
.ant-cascader-menus.slide-up-appear.slide-up-appear-active.ant-cascader-menus-placement-bottomLeft {
  animation-name: antSlideUpIn;
}
.ant-cascader-menus.slide-up-enter.slide-up-enter-active.ant-cascader-menus-placement-topLeft,
.ant-cascader-menus.slide-up-appear.slide-up-appear-active.ant-cascader-menus-placement-topLeft {
  animation-name: antSlideDownIn;
}
.ant-cascader-menus.slide-up-leave.slide-up-leave-active.ant-cascader-menus-placement-bottomLeft {
  animation-name: antSlideUpOut;
}
.ant-cascader-menus.slide-up-leave.slide-up-leave-active.ant-cascader-menus-placement-topLeft {
  animation-name: antSlideDownOut;
}
.ant-cascader-menu {
  display: inline-block;
  vertical-align: top;
  min-width: 111px;
  height: 180px;
  list-style: none;
  margin: 0;
  padding: 0;
  border-right: 1px solid #e9e9e9;
  overflow: auto;
}
.ant-cascader-menu:first-child {
  border-radius: 4px 0 0 4px;
}
.ant-cascader-menu:last-child {
  border-right-color: transparent;
  margin-right: -1px;
  border-radius: 0 4px 4px 0;
}
.ant-cascader-menu:only-child {
  border-radius: 4px;
}
.ant-cascader-menu-item {
  padding: 7px 8px;
  cursor: pointer;
  white-space: nowrap;
  transition: all 0.3s;
}
.ant-cascader-menu-item:hover {
  background: #ecf6fd;
}
.ant-cascader-menu-item-disabled {
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-cascader-menu-item-disabled:hover {
  background: transparent;
}
.ant-cascader-menu-item-active:not(.ant-cascader-menu-item-disabled),
.ant-cascader-menu-item-active:not(.ant-cascader-menu-item-disabled):hover {
  background: #f7f7f7;
  font-weight: 600;
}
.ant-cascader-menu-item-expand {
  position: relative;
  padding-right: 24px;
}
.ant-cascader-menu-item-expand:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e61f";
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  color: rgba(0, 0, 0, 0.43);
  position: absolute;
  right: 8px;
}
:root .ant-cascader-menu-item-expand:after {
  filter: none;
}
:root .ant-cascader-menu-item-expand:after {
  font-size: 12px;
}
.ant-cascader-menu-item-loading:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e64d";
  animation: loadingCircle 1s infinite linear;
}
.ant-cascader-menu-item .ant-cascader-menu-item-keyword {
  color: #f04134;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-cascader {
  display: block;
}
.ant-cascader-menus {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzCascaderComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzCascaderComponent.propDecorators = {
    "nzDisabled": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzPlaceHolder": [{ type: Input },],
    "nzShowInput": [{ type: Input },],
    "nzShowSearch": [{ type: Input },],
    "nzAllowClear": [{ type: Input },],
    "nzClearText": [{ type: Input },],
    "nzShowArrow": [{ type: Input },],
    "nzNotFoundContent": [{ type: Input },],
    "nzPopupClassName": [{ type: Input },],
    "nzColumnClassName": [{ type: Input },],
    "nzOptions": [{ type: Input },],
    "nzEnableCache": [{ type: Input },],
    "nzExpandTrigger": [{ type: Input },],
    "nzChangeOnSelect": [{ type: Input },],
    "nzChangeOn": [{ type: Input },],
    "nzMouseEnterDelay": [{ type: Input },],
    "nzMouseLeaveDelay": [{ type: Input },],
    "nzTriggerAction": [{ type: Input },],
    "nzDisplayRender": [{ type: Input },],
    "nzValueProperty": [{ type: Input },],
    "nzLabelProperty": [{ type: Input },],
    "menu": [{ type: ViewChild, args: ['menu',] },],
    "tabIndex": [{ type: HostBinding, args: ['attr.tabIndex',] },],
    "nzVisibleChange": [{ type: Output },],
    "nzChange": [{ type: Output },],
    "nzSelectionChange": [{ type: Output },],
    "nzSelect": [{ type: Output },],
    "nzLoad": [{ type: Output },],
    "nzClear": [{ type: Output },],
    "onKeyDown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
    "_onTriggerClick": [{ type: HostListener, args: ['click', ['$event'],] },],
    "_onTriggerMouseEnter": [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    "_onTriggerMouseLeave": [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCascaderModule {
}
NzCascaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, OverlayModule, NzInputModule],
                declarations: [
                    NzCascaderComponent
                ],
                exports: [
                    NzCascaderComponent
                ]
            },] },
];
/** @nocollapse */
NzCascaderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCheckboxGroupComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._disabled = false;
        this._prefixCls = 'ant-checkbox-group';
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this._el = this._elementRef.nativeElement;
        this._render.setElementClass(this._el, `${this._prefixCls}`, true);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    _optionChange() {
        this.onChange(this._options);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._options = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
}
NzCheckboxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-checkbox-group',
                encapsulation: ViewEncapsulation.None,
                template: `
    <label
      [class.ant-checkbox-vertical]="nzType=='vertical'"
      nz-checkbox
      *ngFor="let option of _options"
      [nzDisabled]="option.disabled||nzDisabled"
      [(ngModel)]="option.checked"
      (ngModelChange)="_optionChange()">
      <span>{{ option.label }}</span>
    </label>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzCheckboxGroupComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
@keyframes antCheckboxEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
.ant-checkbox {
  white-space: nowrap;
  cursor: pointer;
  outline: none;
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: text-bottom;
}
.ant-checkbox-wrapper:hover .ant-checkbox-inner,
.ant-checkbox:hover .ant-checkbox-inner,
.ant-checkbox-input:focus + .ant-checkbox-inner {
  border-color: #108ee9;
}
.ant-checkbox-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 2px;
  border: 1px solid #108ee9;
  content: '';
  animation: antCheckboxEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-checkbox:hover:after,
.ant-checkbox-wrapper:hover .ant-checkbox:after {
  visibility: visible;
}
.ant-checkbox-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
  background-color: #fff;
  transition: all .3s;
}
.ant-checkbox-inner:after {
  transform: rotate(45deg) scale(0);
  position: absolute;
  left: 4px;
  top: 1px;
  display: table;
  width: 5px;
  height: 8px;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.1s cubic-bezier(0.71, -0.46, 0.88, 0.6);
}
.ant-checkbox-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  filter: alpha(opacity=0);
  top: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
}
.ant-checkbox-indeterminate .ant-checkbox-inner:after {
  content: ' ';
  transform: scale(1);
  position: absolute;
  left: 2px;
  top: 5px;
  width: 8px;
  height: 1px;
}
.ant-checkbox-indeterminate.ant-checkbox-disabled .ant-checkbox-inner:after {
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-checked .ant-checkbox-inner:after {
  transform: rotate(45deg) scale(1);
  position: absolute;
  display: table;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.2s cubic-bezier(0.12, 0.4, 0.29, 1.46) 0.1s;
}
.ant-checkbox-checked .ant-checkbox-inner,
.ant-checkbox-indeterminate .ant-checkbox-inner {
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-checkbox-disabled {
  cursor: not-allowed;
}
.ant-checkbox-disabled.ant-checkbox-checked .ant-checkbox-inner:after {
  animation-name: none;
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-disabled .ant-checkbox-input {
  cursor: not-allowed;
}
.ant-checkbox-disabled .ant-checkbox-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-checkbox-disabled .ant-checkbox-inner:after {
  animation-name: none;
  border-color: #f7f7f7;
}
.ant-checkbox-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-checkbox-wrapper {
  cursor: pointer;
  font-size: 12px;
  display: inline-block;
}
.ant-checkbox-wrapper + .ant-checkbox-wrapper {
  margin-left: 8px;
}
.ant-checkbox-wrapper + span,
.ant-checkbox + span {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-checkbox-group {
  font-size: 12px;
}
.ant-checkbox-group-item {
  display: inline-block;
  margin-right: 8px;
}
.ant-checkbox-group-item:last-child {
  margin-right: 0;
}
.ant-checkbox-group-item + .ant-checkbox-group-item {
  margin-left: 0;
}
@media \0screen {
  .ant-checkbox-checked .ant-checkbox-inner:before,
  .ant-checkbox-checked .ant-checkbox-inner:after {
    font-family: 'anticon';
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: "\\e632";
    font-weight: bold;
    font-size: 8px;
    border: 0;
    color: #fff;
    left: 2px;
    top: 3px;
    position: absolute;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzCheckboxGroupComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer, },
];
NzCheckboxGroupComponent.propDecorators = {
    "nzType": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCheckboxComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._disabled = false;
        this._indeterminate = false;
        this._prefixCls = 'ant-checkbox';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._inputPrefixCls = `${this._prefixCls}-input`;
        this._checked = false;
        this._focused = false;
        // ngModel Access
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked && (!this.nzIndeterminate),
            [`${this._prefixCls}-focused`]: this._focused,
            [`${this._prefixCls}-disabled`]: this.nzDisabled,
            [`${this._prefixCls}-indeterminate`]: this.nzIndeterminate,
        };
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIndeterminate(value) {
        this._indeterminate = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIndeterminate() {
        return this._indeterminate;
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this.nzDisabled) {
            this.updateValue(!this._checked);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (value === this._checked) {
            return;
        }
        this.onChange(value);
        this._checked = value;
        this.updateClassMap();
    }
    /**
     * @return {?}
     */
    nzFocus() {
        this._focused = true;
    }
    /**
     * @return {?}
     */
    nzBlur() {
        this._focused = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._checked = value;
        this.updateClassMap();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    updateClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked && (!this.nzIndeterminate),
            [`${this._prefixCls}-focused`]: this._focused,
            [`${this._prefixCls}-disabled`]: this.nzDisabled,
            [`${this._prefixCls}-indeterminate`]: this.nzIndeterminate,
        };
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._render.addClass(this._el, `${this._prefixCls}-wrapper`);
        this.updateClassMap();
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.updateClassMap();
    }
}
NzCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-checkbox]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap">
      <span [ngClass]="_innerPrefixCls"></span>
      <input type="checkbox"
        [ngClass]="_inputPrefixCls"
        [ngModel]="nzChecked"
        (focus)="nzFocus()"
        (blur)="onTouched();nzBlur()">
    </span>
    <ng-content></ng-content>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzCheckboxComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
@keyframes antCheckboxEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
.ant-checkbox {
  white-space: nowrap;
  cursor: pointer;
  outline: none;
  display: inline-block;
  line-height: 1;
  position: relative;
  vertical-align: text-bottom;
}
.ant-checkbox-wrapper:hover .ant-checkbox-inner,
.ant-checkbox:hover .ant-checkbox-inner,
.ant-checkbox-input:focus + .ant-checkbox-inner {
  border-color: #108ee9;
}
.ant-checkbox-checked:after {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 2px;
  border: 1px solid #108ee9;
  content: '';
  animation: antCheckboxEffect 0.36s ease-in-out;
  animation-fill-mode: both;
  visibility: hidden;
}
.ant-checkbox:hover:after,
.ant-checkbox-wrapper:hover .ant-checkbox:after {
  visibility: visible;
}
.ant-checkbox-inner {
  position: relative;
  top: 0;
  left: 0;
  display: block;
  width: 14px;
  height: 14px;
  border: 1px solid #d9d9d9;
  border-radius: 2px;
  background-color: #fff;
  transition: all .3s;
}
.ant-checkbox-inner:after {
  transform: rotate(45deg) scale(0);
  position: absolute;
  left: 4px;
  top: 1px;
  display: table;
  width: 5px;
  height: 8px;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.1s cubic-bezier(0.71, -0.46, 0.88, 0.6);
}
.ant-checkbox-input {
  position: absolute;
  left: 0;
  z-index: 1;
  cursor: pointer;
  opacity: 0;
  filter: alpha(opacity=0);
  top: 0;
  bottom: 0;
  right: 0;
  width: 100%;
  height: 100%;
}
.ant-checkbox-indeterminate .ant-checkbox-inner:after {
  content: ' ';
  transform: scale(1);
  position: absolute;
  left: 2px;
  top: 5px;
  width: 8px;
  height: 1px;
}
.ant-checkbox-indeterminate.ant-checkbox-disabled .ant-checkbox-inner:after {
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-checked .ant-checkbox-inner:after {
  transform: rotate(45deg) scale(1);
  position: absolute;
  display: table;
  border: 2px solid #fff;
  border-top: 0;
  border-left: 0;
  content: ' ';
  transition: all 0.2s cubic-bezier(0.12, 0.4, 0.29, 1.46) 0.1s;
}
.ant-checkbox-checked .ant-checkbox-inner,
.ant-checkbox-indeterminate .ant-checkbox-inner {
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-checkbox-disabled {
  cursor: not-allowed;
}
.ant-checkbox-disabled.ant-checkbox-checked .ant-checkbox-inner:after {
  animation-name: none;
  border-color: rgba(0, 0, 0, 0.25);
}
.ant-checkbox-disabled .ant-checkbox-input {
  cursor: not-allowed;
}
.ant-checkbox-disabled .ant-checkbox-inner {
  border-color: #d9d9d9 !important;
  background-color: #f7f7f7;
}
.ant-checkbox-disabled .ant-checkbox-inner:after {
  animation-name: none;
  border-color: #f7f7f7;
}
.ant-checkbox-disabled + span {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-checkbox-wrapper {
  cursor: pointer;
  font-size: 12px;
  display: inline-block;
}
.ant-checkbox-wrapper + .ant-checkbox-wrapper {
  margin-left: 8px;
}
.ant-checkbox-wrapper + span,
.ant-checkbox + span {
  padding-left: 8px;
  padding-right: 8px;
}
.ant-checkbox-group {
  font-size: 12px;
}
.ant-checkbox-group-item {
  display: inline-block;
  margin-right: 8px;
}
.ant-checkbox-group-item:last-child {
  margin-right: 0;
}
.ant-checkbox-group-item + .ant-checkbox-group-item {
  margin-left: 0;
}
@media \0screen {
  .ant-checkbox-checked .ant-checkbox-inner:before,
  .ant-checkbox-checked .ant-checkbox-inner:after {
    font-family: 'anticon';
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    content: "\\e632";
    font-weight: bold;
    font-size: 8px;
    border: 0;
    color: #fff;
    left: 2px;
    top: 3px;
    position: absolute;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzCheckboxComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzCheckboxComponent.propDecorators = {
    "nzDisabled": [{ type: Input },],
    "nzIndeterminate": [{ type: Input },],
    "nzChecked": [{ type: Input },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCheckboxModule {
}
NzCheckboxModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    NzCheckboxComponent,
                    NzCheckboxGroupComponent
                ],
                exports: [
                    NzCheckboxComponent,
                    NzCheckboxGroupComponent
                ]
            },] },
];
/** @nocollapse */
NzCheckboxModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCollapsesetComponent {
    constructor() {
        this._accordion = false;
        this._bordered = true;
        // all child collapse
        this.panels = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAccordion(value) {
        this._accordion = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAccordion() {
        return this._accordion;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzBordered(value) {
        this._bordered = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzBordered() {
        return this._bordered;
    }
    /**
     * @param {?} collapse
     * @return {?}
     */
    nzClick(collapse) {
        if (this.nzAccordion) {
            this.panels.map((item, index) => {
                const /** @type {?} */ curIndex = this.panels.indexOf(collapse);
                if (index !== curIndex) {
                    item.nzActive = false;
                }
            });
        }
    }
    /**
     * @param {?} collapse
     * @return {?}
     */
    addTab(collapse) {
        this.panels.push(collapse);
    }
}
NzCollapsesetComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-collapseset',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-collapse" [class.ant-collapse-borderless]="!nzBordered">
      <ng-content></ng-content>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-collapse {
  background-color: #f7f7f7;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  border-bottom: 0;
}
.ant-collapse > .ant-collapse-item {
  border-bottom: 1px solid #d9d9d9;
}
.ant-collapse > .ant-collapse-item:last-child,
.ant-collapse > .ant-collapse-item:last-child > .ant-collapse-header {
  border-radius: 0 0 4px 4px;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header {
  line-height: 22px;
  padding: 8px 0 8px 32px;
  color: rgba(0, 0, 0, 0.85);
  cursor: pointer;
  position: relative;
  transition: all .3s;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow {
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  position: absolute;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-weight: bold;
  line-height: 40px;
  vertical-align: top;
  transition: transform 0.24s;
  top: 0;
  left: 16px;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow {
  filter: none;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow {
  font-size: 12px;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow:before {
  display: block;
  font-family: "anticon" !important;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header .arrow:before {
  content: "\\E61F";
}
.ant-collapse-anim-active {
  transition: height 0.2s cubic-bezier(0.215, 0.61, 0.355, 1);
}
.ant-collapse-content {
  overflow: hidden;
  color: rgba(0, 0, 0, 0.65);
  padding: 0 16px;
  background-color: #fff;
}
.ant-collapse-content > .ant-collapse-content-box {
  padding-top: 16px;
  padding-bottom: 16px;
}
.ant-collapse-content-inactive {
  display: none;
}
.ant-collapse-item:last-child > .ant-collapse-content {
  border-radius: 0 0 4px 4px;
}
.ant-collapse > .ant-collapse-item > .ant-collapse-header[aria-expanded="true"] .arrow {
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(90deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=0.00000000000000006123, M12=-1, M21=1, M22=0.00000000000000006123)";
  zoom: 1;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header[aria-expanded="true"] .arrow {
  filter: none;
}
:root .ant-collapse > .ant-collapse-item > .ant-collapse-header[aria-expanded="true"] .arrow {
  font-size: 12px;
}
.ant-collapse-borderless {
  background-color: #fff;
  border: 0;
}
.ant-collapse-borderless > .ant-collapse-item:last-child,
.ant-collapse-borderless > .ant-collapse-item:last-child .ant-collapse-header {
  border-radius: 0;
}
.ant-collapse-borderless > .ant-collapse-item-active {
  border: 0;
}
.ant-collapse-borderless > .ant-collapse-item > .ant-collapse-content {
  background-color: transparent;
  border-top: 1px solid #d9d9d9;
}
.ant-collapse-borderless > .ant-collapse-item > .ant-collapse-header {
  transition: all .3s;
}
.ant-collapse-borderless > .ant-collapse-item > .ant-collapse-header:hover {
  background-color: #f7f7f7;
}
.ant-collapse .ant-collapse-item-disabled > .ant-collapse-header,
.ant-collapse .ant-collapse-item-disabled > .ant-collapse-header > .arrow {
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
}
.ant-collapse > .ant-collapse-item:not(.ant-collapse-item-disabled) > .ant-collapse-header:active {
  background-color: #eee;
}
`,
                    `nz-collapse {
  display: block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzCollapsesetComponent.ctorParameters = () => [];
NzCollapsesetComponent.propDecorators = {
    "nzAccordion": [{ type: Input },],
    "nzBordered": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCollapseComponent {
    /**
     * @param {?} _collapseSet
     * @param {?} _elementRef
     */
    constructor(_collapseSet, _elementRef) {
        this._collapseSet = _collapseSet;
        this._elementRef = _elementRef;
        this._disabled = false;
        this._active = false;
        this._el = this._elementRef.nativeElement;
        this._collapseSet.addTab(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzActive(value) {
        const /** @type {?} */ active = toBoolean(value);
        if (this._active === active) {
            return;
        }
        if (!this.nzDisabled) {
            this._active = active;
        }
    }
    /**
     * @return {?}
     */
    get nzActive() {
        return this._active;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    clickHeader($event) {
        this.nzActive = !this.nzActive;
        /** trigger host collapseSet click event */
        this._collapseSet.nzClick(this);
    }
}
NzCollapseComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-collapse',
                template: `
    <div class="ant-collapse-header" [attr.aria-expanded]="_active" (click)="clickHeader($event)" role="tab">
      <i class="arrow"></i>
      <ng-template [ngIf]="nzTitle">
        {{ nzTitle }}
      </ng-template>
      <ng-template [ngIf]="!nzTitle">
        <ng-content select="[collapse-title]"></ng-content>
      </ng-template>
    </div>
    <div [ngClass]="{'ant-collapse-content':true,'ant-collapse-content-status-active':_active,'ant-collapse-contents-status-inactive':!_active}" [@collapseState]="_active?'active':'inactive'">
      <div class="ant-collapse-content-box">
        <ng-content></ng-content>
      </div>
    </div>
  `,
                animations: [
                    trigger('collapseState', [
                        state('inactive', style({
                            opacity: '0',
                            height: 0
                        })),
                        state('active', style({
                            opacity: '1',
                            height: '*'
                        })),
                        transition('inactive => active', animate('150ms ease-in')),
                        transition('active => inactive', animate('150ms ease-out'))
                    ])
                ],
                host: {
                    '[class.ant-collapse-item]': 'true'
                }
            },] },
];
/** @nocollapse */
NzCollapseComponent.ctorParameters = () => [
    { type: NzCollapsesetComponent, decorators: [{ type: Host },] },
    { type: ElementRef, },
];
NzCollapseComponent.propDecorators = {
    "nzTitle": [{ type: Input },],
    "nzDisabled": [{ type: Input }, { type: HostBinding, args: ['class.ant-collapse-item-disabled',] },],
    "nzActive": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const NZ_COLLAPSE_DIRECTIVES = [NzCollapsesetComponent, NzCollapseComponent];
class NzCollapseModule {
}
NzCollapseModule.decorators = [
    { type: NgModule, args: [{
                declarations: NZ_COLLAPSE_DIRECTIVES,
                exports: NZ_COLLAPSE_DIRECTIVES,
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzCollapseModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDatePipe {
    /**
     * @param {?} value
     * @param {?} formatString
     * @return {?}
     */
    transform(value, formatString) {
        if (moment(value).isValid()) {
            return moment(value).format(formatString);
        }
        else {
            return '';
        }
    }
}
NzDatePipe.decorators = [
    { type: Pipe, args: [{ name: 'nzDate' },] },
];
/** @nocollapse */
NzDatePipe.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzUtilModule {
}
NzUtilModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzDatePipe],
                exports: [NzDatePipe]
            },] },
];
/** @nocollapse */
NzUtilModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class NzTimePickerInnerComponent {
    /**
     * @param {?} _cdr
     * @param {?} _locale
     */
    constructor(_cdr, _locale) {
        this._cdr = _cdr;
        this._locale = _locale;
        this._disabled = false;
        this._hideDisabledOptions = false;
        this._now = new Date();
        this._open = false;
        this._hourList = [];
        this._minuteList = [];
        this._secondList = [];
        this._value = null;
        this._selectedHour = moment(this._now).hours();
        this._selectedMinute = moment(this._now).minutes();
        this._selectedSecond = moment(this._now).seconds();
        this._format = 'HH:mm:ss';
        this._showHour = this._format.indexOf('HH') > -1;
        this._showMinute = this._format.indexOf('mm') > -1;
        this._showSecond = this._format.indexOf('ss') > -1;
        this._width = `${(+this._showHour + +this._showMinute + +this._showSecond) * 56 + 1}px`;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.nzPlaceHolder = this._locale.translate('DateTime.chooseTimePlease');
        this.nzSize = 'default';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzHideDisabledOptions(value) {
        this._hideDisabledOptions = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzHideDisabledOptions() {
        return this._hideDisabledOptions;
    }
    /**
     * @param {?} fun
     * @return {?}
     */
    set nzDisabledHours(fun) {
        this._nzDisabledHours = fun;
        this._buildHours();
    }
    /**
     * @return {?}
     */
    get nzDisabledHours() {
        return this._nzDisabledHours;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzFormat(value) {
        this._format = value;
        this._showHour = this._format.indexOf('HH') > -1;
        this._showMinute = this._format.indexOf('mm') > -1;
        this._showSecond = this._format.indexOf('ss') > -1;
        this._width = `${(+this._showHour + +this._showMinute + +this._showSecond) * 56 + 1}px`;
    }
    /**
     * @return {?}
     */
    get nzFormat() {
        return this._format;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || this._now;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        if (this._value === value) {
            return;
        }
        this._value = value;
        this._selectedHour = moment(this.nzValue).hours();
        this._selectedMinute = moment(this.nzValue).minutes();
        this._selectedSecond = moment(this.nzValue).seconds();
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?=} duration
     * @param {?=} unit
     * @return {?}
     */
    _scrollToSelected(instance, index, duration = 0, unit) {
        const /** @type {?} */ _transIndex = this._translateIndex(index, unit);
        const /** @type {?} */ currentOption = /** @type {?} */ ((instance.children[0].children[_transIndex] || instance.children[0].children[0]));
        this.scrollTo(instance, currentOption.offsetTop, duration);
    }
    /**
     * @param {?} element
     * @param {?} to
     * @param {?} duration
     * @return {?}
     */
    scrollTo(element, to, duration) {
        if (duration <= 0) {
            element.scrollTop = to;
            return;
        }
        const /** @type {?} */ difference = to - element.scrollTop;
        const /** @type {?} */ perTick = difference / duration * 10;
        reqAnimFrame(() => {
            element.scrollTop = element.scrollTop + perTick;
            if (element.scrollTop === to) {
                return;
            }
            this.scrollTo(element, to, duration - 10);
        });
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?} disabled
     * @return {?}
     */
    _selectHour(instance, index, disabled) {
        if (disabled) {
            return;
        }
        this._scrollToSelected(instance, index, 120, 'hour');
        this._selectedHour = index;
        this.nzValue = moment(this.nzValue).hour(index).toDate();
        this.onChange(this._value);
        this._buildMinutes();
        this._buildSeconds();
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?} disabled
     * @return {?}
     */
    _selectMinute(instance, index, disabled) {
        if (disabled) {
            return;
        }
        this._scrollToSelected(instance, index, 120, 'minute');
        this._selectedMinute = index;
        this.nzValue = moment(this.nzValue).minute(index).toDate();
        this.onChange(this._value);
        this._buildSeconds();
    }
    /**
     * @param {?} instance
     * @param {?} index
     * @param {?} disabled
     * @return {?}
     */
    _selectSecond(instance, index, disabled) {
        if (disabled) {
            return;
        }
        this._scrollToSelected(instance, index, 120, 'second');
        this._selectedSecond = index;
        this.nzValue = moment(this.nzValue).second(index).toDate();
        this.onChange(this._value);
    }
    /**
     * @param {?} index
     * @param {?} unit
     * @return {?}
     */
    _translateIndex(index, unit) {
        if (!this.nzHideDisabledOptions) {
            return index;
        }
        if (unit === 'hour') {
            const /** @type {?} */ disabledHours = this.nzDisabledHours && this.nzDisabledHours();
            return this._calcIndex(disabledHours, index);
        }
        else if (unit === 'minute') {
            const /** @type {?} */ disabledMinutes = this.nzDisabledMinutes && this.nzDisabledMinutes(this._selectedHour);
            return this._calcIndex(disabledMinutes, index);
        }
        else if (unit === 'second') {
            const /** @type {?} */ disabledSeconds = this.nzDisabledSeconds && this.nzDisabledSeconds(this._selectedHour, this._selectedMinute);
            return this._calcIndex(disabledSeconds, index);
        }
    }
    /**
     * @param {?} array
     * @param {?} index
     * @return {?}
     */
    _calcIndex(array, index) {
        if (array && array.length) {
            return index - array.reduce((pre, value) => {
                return pre + (value < index ? 1 : 0);
            }, 0);
        }
        else {
            return index;
        }
    }
    /**
     * @return {?}
     */
    _initPosition() {
        this._selectedHour = moment(this.nzValue).hours();
        this._selectedMinute = moment(this.nzValue).minutes();
        this._selectedSecond = moment(this.nzValue).seconds();
        if (this._showHour) {
            this._scrollToSelected(this._hourListInstance.nativeElement, this._selectedHour, 0, 'hour');
        }
        if (this._showMinute) {
            this._scrollToSelected(this._minuteListInstance.nativeElement, this._selectedMinute, 0, 'minute');
        }
        if (this._showSecond) {
            this._scrollToSelected(this._secondListInstance.nativeElement, this._selectedSecond, 0, 'second');
        }
    }
    /**
     * @return {?}
     */
    _buildTime() {
        this._buildHours();
        this._buildMinutes();
        this._buildSeconds();
    }
    /**
     * @return {?}
     */
    _buildHours() {
        this._hourList = [];
        for (let /** @type {?} */ i = 0; i <= 23; i++) {
            this._hourList.push({
                disabled: this.nzDisabledHours && (this.nzDisabledHours().indexOf(i) !== -1),
                name: i.toString().length === 1 ? ('0' + i) : ('' + i),
                index: i
            });
        }
    }
    /**
     * @return {?}
     */
    _buildMinutes() {
        this._minuteList = [];
        for (let /** @type {?} */ i = 0; i <= 59; i++) {
            this._minuteList.push({
                disabled: this.nzDisabledMinutes && (this.nzDisabledMinutes(this._selectedHour).indexOf(i) !== -1),
                name: i.toString().length === 1 ? ('0' + i) : ('' + i),
                index: i
            });
        }
    }
    /**
     * @return {?}
     */
    _buildSeconds() {
        this._secondList = [];
        for (let /** @type {?} */ i = 0; i <= 59; i++) {
            this._secondList.push({
                disabled: this.nzDisabledSeconds && (this.nzDisabledSeconds(this._selectedHour, this._selectedMinute).indexOf(i) !== -1),
                name: i.toString().length === 1 ? ('0' + i) : ('' + i),
                index: i
            });
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.nzValue = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._buildTime();
    }
}
NzTimePickerInnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timepicker-inner',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span
      class="ant-calendar-time-picker"
      [ngClass]="{'ant-time-picker-large':nzSize=='large','ant-time-picker-small':nzSize=='small'}">
      <div
        class="ant-calendar-time-picker-panel"
        [@dropDownAnimation]="'bottom'">
        <div class="ant-calendar-time-picker-inner"
          [class.ant-calendar-time-picker-column-3]="_showHour&&_showMinute&&_showSecond"
          [class.ant-calendar-time-picker-column-2]="_showHour&&_showMinute&&!_showSecond"
          [class.ant-calendar-time-picker-column-1]="_showHour&&(!_showMinute)&&(!_showSecond)">
        <div class="ant-calendar-time-picker-combobox">
          <div
            class="ant-calendar-time-picker-select"
            #hourListInstance
            *ngIf="_showHour">
            <ul>
              <ng-template
                ngFor
                let-_hour
                [ngForOf]="_hourList"
                let-i="index">
                 <li
                   [ngClass]="_hour.name"
                   *ngIf="!(nzHideDisabledOptions&&_hour.disabled)"
                   [class.ant-time-picker-panel-select-option-selected]="_hour.index===_selectedHour"
                   [class.ant-time-picker-panel-select-option-disabled]="_hour.disabled"
                   (click)="_selectHour(hourListInstance,_hour.index,_hour.disabled)">
                   {{ _hour.name }}
                 </li>
              </ng-template>
            </ul>
          </div>
          <div
            class="ant-calendar-time-picker-select"
            #minuteListInstance
            *ngIf="_showMinute">
            <ul>
              <ng-template
                ngFor
                let-_minute
                [ngForOf]="_minuteList"
                let-i="index">
                 <li
                   [ngClass]="_minute.name"
                   *ngIf="!(nzHideDisabledOptions&&_minute.disabled)"
                   [class.ant-time-picker-panel-select-option-selected]="_minute.index===_selectedMinute"
                   [class.ant-time-picker-panel-select-option-disabled]="_minute.disabled"
                   (click)="_selectMinute(minuteListInstance,_minute.index,_minute.disabled)">
                   {{ _minute.name }}
                 </li>
              </ng-template>
            </ul>
          </div>
          <div
            class="ant-calendar-time-picker-select"
            #secondListInstance
            *ngIf="_showSecond">
            <ul>
              <ng-template
                ngFor
                let-_second
                [ngForOf]="_secondList"
                let-i="index">
                 <li
                   [ngClass]="_second.name"
                   *ngIf="!(nzHideDisabledOptions&&_second.disabled)"
                   [class.ant-time-picker-panel-select-option-selected]="_second.index===_selectedSecond"
                   [class.ant-time-picker-panel-select-option-disabled]="_second.disabled"
                   (click)="_selectSecond(secondListInstance,_second.index,_second.disabled)">
                   {{ _second.name }}
                 </li>
              </ng-template>
            </ul>
          </div>
        </div>
      </div>
      </div>
    </span>`,
                animations: [
                    dropDownAnimation
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzTimePickerInnerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #ecf6fd;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 14px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #ecf6fd;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 14px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
.ant-time-picker-panel {
  position: relative;
  left: 0;
}
.ant-time-picker-panel.top {
  bottom: -8px;
}
.ant-time-picker-panel.bottom {
  top: -2px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzTimePickerInnerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: NzLocaleService, },
];
NzTimePickerInnerComponent.propDecorators = {
    "_hourListInstance": [{ type: ViewChild, args: ['hourListInstance',] },],
    "_minuteListInstance": [{ type: ViewChild, args: ['minuteListInstance',] },],
    "_inputTimeInstance": [{ type: ViewChild, args: ['inputTimeInstance',] },],
    "_secondListInstance": [{ type: ViewChild, args: ['secondListInstance',] },],
    "nzHideDisabledOptions": [{ type: Input },],
    "nzPlaceHolder": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzDisabledHours": [{ type: Input },],
    "nzDisabledMinutes": [{ type: Input },],
    "nzDisabledSeconds": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "nzFormat": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const POSITION_MAP = /** @type {?} */ (({
    'top': {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom'
    },
    'topCenter': {
        originX: 'center',
        originY: 'top',
        overlayX: 'center',
        overlayY: 'bottom'
    },
    'topLeft': {
        originX: 'start',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'bottom'
    },
    'topRight': {
        originX: 'end',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'bottom'
    },
    'right': {
        originX: 'end',
        originY: 'center',
        overlayX: 'start',
        overlayY: 'center',
    },
    'rightTop': {
        originX: 'end',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'top',
    },
    'rightBottom': {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'bottom',
    },
    'bottom': {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top',
    },
    'bottomCenter': {
        originX: 'center',
        originY: 'bottom',
        overlayX: 'center',
        overlayY: 'top',
    },
    'bottomLeft': {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'top',
    },
    'bottomRight': {
        originX: 'end',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'top',
    },
    'left': {
        originX: 'start',
        originY: 'center',
        overlayX: 'end',
        overlayY: 'center',
    },
    'leftTop': {
        originX: 'start',
        originY: 'top',
        overlayX: 'end',
        overlayY: 'top',
    },
    'leftBottom': {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'end',
        overlayY: 'bottom',
    },
}));
// TODO: The whole logic does not make sense here, _objectValues just returns a copy of original array
const DEFAULT_4_POSITIONS = _objectValues([POSITION_MAP["top"], POSITION_MAP["right"], POSITION_MAP["bottom"], POSITION_MAP["left"]]);
const DEFAULT_DROPDOWN_POSITIONS = _objectValues([POSITION_MAP["bottomLeft"], POSITION_MAP["topLeft"]]);
const DEFAULT_DATEPICKER_POSITIONS = /** @type {?} */ ([
    {
        originX: 'start',
        originY: 'top',
        overlayX: 'start',
        overlayY: 'top',
    },
    {
        originX: 'start',
        originY: 'bottom',
        overlayX: 'start',
        overlayY: 'bottom',
    }
]);
/**
 * @template T, S
 * @param {?} array
 * @param {?} iteratee
 * @return {?}
 */
function arrayMap(array, iteratee) {
    let /** @type {?} */ index = -1;
    const /** @type {?} */ length = array == null ? 0 : array.length;
    const /** @type {?} */ result = Array(length);
    while (++index < length) {
        result[index] = iteratee(array[index], index, array);
    }
    return result;
}
/**
 * @template T
 * @param {?} object
 * @param {?} props
 * @return {?}
 */
function baseValues(object, props) {
    return arrayMap(props, (key) => {
        return object[key];
    });
}
/**
 * @template T
 * @param {?} object
 * @return {?}
 */
function _objectValues(object) {
    return object == null ? [] : baseValues(object, Object.keys(object));
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTimePickerComponent extends NzTimePickerInnerComponent {
    constructor() {
        super(...arguments);
        this._timePickerDisabled = false;
        this._dropDownPosition = 'bottom';
        this._positions = [...DEFAULT_DATEPICKER_POSITIONS];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._timePickerDisabled = toBoolean(value);
        this._closeCalendar();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._timePickerDisabled;
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'top' : 'bottom';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @param {?} box
     * @return {?}
     */
    _manualChangeInput(box) {
        const /** @type {?} */ _tempMoment = moment(box.value, this._format);
        if (Date.parse(_tempMoment.toDate().toString())) {
            this.nzValue = new Date((moment(this._value).hour(_tempMoment.hour()).minute(_tempMoment.minute()).second(_tempMoment.second())).toDate().getTime());
            this.onChange(this._value);
        }
        // this._closeCalendar();
    }
    /**
     * @return {?}
     */
    _overHour() {
        const /** @type {?} */ _start = this._format.indexOf('HH');
        const /** @type {?} */ _end = _start + 2;
        this._inputTimeInstance.nativeElement.setSelectionRange(_start, _end);
    }
    /**
     * @return {?}
     */
    _overMinute() {
        const /** @type {?} */ _start = this._format.indexOf('mm');
        const /** @type {?} */ _end = _start + 2;
        this._inputTimeInstance.nativeElement.setSelectionRange(_start, _end);
    }
    /**
     * @return {?}
     */
    _overSecond() {
        const /** @type {?} */ _start = this._format.indexOf('ss');
        const /** @type {?} */ _end = _start + 2;
        this._inputTimeInstance.nativeElement.setSelectionRange(_start, _end);
    }
    /**
     * @return {?}
     */
    _clearValue() {
        this.nzValue = null;
        this._selectedHour = null;
        this._selectedMinute = null;
        this.onChange(this._value);
        this._selectedSecond = null;
    }
    /**
     * @return {?}
     */
    _openCalendar() {
        this._open = true;
        setTimeout(_ => {
            this._initPosition();
            this._inputTimeInstance.nativeElement.setSelectionRange(0, 8);
        });
    }
    /**
     * @return {?}
     */
    _closeCalendar() {
        if (!this._open) {
            return;
        }
        this._open = false;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
}
NzTimePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timepicker',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    dropDownAnimation
                ],
                template: `
    <span
      class="ant-time-picker"
      [class.ant-time-picker-large]="nzSize=='large'"
      [class.ant-time-picker-small]="nzSize=='small'"
      cdkOverlayOrigin #origin="cdkOverlayOrigin"
      #trigger>
      <input
        [disabled]="nzDisabled"
        class="ant-time-picker-input"
        [attr.placeholder]="nzPlaceHolder"
        (click)="_openCalendar()"
        (blur)="onTouched()"
        [value]="_value|nzDate:_format"
        readonly>
      <span class="ant-time-picker-icon"></span>
    </span>
    <ng-template
      cdkConnectedOverlay
      cdkConnectedOverlayHasBackdrop
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOrigin]="origin"
      (backdropClick)="_closeCalendar()"
      (detach)="_closeCalendar()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayOpen]="_open"
    >
      <div class="ant-time-picker-panel"
        [class.top]="_dropDownPosition==='top'"
        [class.bottom]="_dropDownPosition==='bottom'"
        [style.width]="_width"
        [@dropDownAnimation]="_dropDownPosition">
        <div class="ant-time-picker-panel-inner">
          <div class="ant-time-picker-panel-input-wrap">
            <input class="ant-time-picker-panel-input"
              [attr.placeholder]="nzPlaceHolder"
              #inputTimeInstance
              [value]="_value|nzDate:_format"
              (blur)="_manualChangeInput(inputTimeInstance)"
              (keydown.Enter)="_manualChangeInput(inputTimeInstance)">
            <a class="ant-time-picker-panel-clear-btn" title="{{ 'DateTime.clear' | nzTranslate }}" (click)="_clearValue()"></a>
          </div>
          <div class="ant-time-picker-panel-combobox">
            <div class="ant-time-picker-panel-select"
              #hourListInstance *ngIf="_showHour"
              (mouseover)="_overHour()">
              <ul>
                <ng-template
                  ngFor
                  let-_hour
                  [ngForOf]="_hourList"
                  let-i="index">
                  <li
                    [class.ant-time-picker-panel-select-option-selected]="_hour.index===_selectedHour"
                    [class.ant-time-picker-panel-select-option-disabled]="_hour.disabled"
                    [ngClass]="_hour.name"
                    *ngIf="!(nzHideDisabledOptions&&_hour.disabled)"
                    (click)="_selectHour(hourListInstance,_hour.index,_hour.disabled)">
                    {{ _hour.name }}
                  </li>
                </ng-template>
              </ul>
            </div>
            <div
              class="ant-time-picker-panel-select"
              #minuteListInstance
              *ngIf="_showMinute"
              (mouseover)="_overMinute()">
              <ul>
                <ng-template
                  ngFor
                  let-_minute
                  [ngForOf]="_minuteList"
                  let-i="index">
                  <li
                    [ngClass]="_minute.name"
                    *ngIf="!(nzHideDisabledOptions&&_minute.disabled)"
                    [class.ant-time-picker-panel-select-option-selected]="_minute.index===_selectedMinute"
                    [class.ant-time-picker-panel-select-option-disabled]="_minute.disabled"
                    (click)="_selectMinute(minuteListInstance,_minute.index,_minute.disabled)">
                    {{ _minute.name }}
                  </li>
                </ng-template>
              </ul>
            </div>
            <div
              class="ant-time-picker-panel-select"
              #secondListInstance *ngIf="_showSecond"
              (mouseover)="_overSecond()">
              <ul>
                <ng-template
                  ngFor
                  let-_second
                  [ngForOf]="_secondList"
                  let-i="index">
                  <li
                    [ngClass]="_second.name"
                    [class.ant-time-picker-panel-select-option-selected]="_second.index===_selectedSecond"
                    [class.ant-time-picker-panel-select-option-disabled]="_second.disabled"
                    *ngIf="!(nzHideDisabledOptions&&_second.disabled)"
                    (click)="_selectSecond(secondListInstance,_second.index,_second.disabled)">
                    {{ _second.name }}
                  </li>
                </ng-template>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzTimePickerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #ecf6fd;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 14px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-time-picker-panel {
  z-index: 1050;
  position: absolute;
}
.ant-time-picker-panel-inner {
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  left: -2px;
}
.ant-time-picker-panel-input {
  margin: 0;
  padding: 0;
  border: 0;
  width: 100%;
  cursor: auto;
  line-height: 1.5;
  outline: 0;
}
.ant-time-picker-panel-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-panel-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-panel-input-wrap {
  box-sizing: border-box;
  position: relative;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-time-picker-panel-input-invalid {
  border-color: red;
}
.ant-time-picker-panel-clear-btn {
  position: absolute;
  right: 5px;
  cursor: pointer;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 5px;
  margin: 0;
}
.ant-time-picker-panel-clear-btn:after {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  transition: color 0.3s ease;
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
}
.ant-time-picker-panel-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-time-picker-panel-narrow .ant-time-picker-panel-input-wrap {
  max-width: 112px;
}
.ant-time-picker-panel-select {
  float: left;
  font-size: 12px;
  border-left: 1px solid #e9e9e9;
  box-sizing: border-box;
  width: 56px;
  overflow: hidden;
  position: relative;
  max-height: 144px;
}
.ant-time-picker-panel-select:hover {
  overflow-y: auto;
}
.ant-time-picker-panel-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-time-picker-panel-select:last-child {
  border-right: 0;
}
.ant-time-picker-panel-select:only-child {
  width: 100%;
}
.ant-time-picker-panel-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0 0 120px;
  width: 100%;
}
.ant-time-picker-panel-select li {
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  padding: 0 0 0 8px;
  width: 100%;
  height: 24px;
  line-height: 24px;
  text-align: left;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s;
}
.ant-time-picker-panel-select li:hover {
  background: #ecf6fd;
}
li.ant-time-picker-panel-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-time-picker-panel-select-option-selected:hover {
  background: #f7f7f7;
}
li.ant-time-picker-panel-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-time-picker-panel-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-time-picker-panel-combobox {
  zoom: 1;
}
.ant-time-picker-panel-combobox:before,
.ant-time-picker-panel-combobox:after {
  content: " ";
  display: table;
}
.ant-time-picker-panel-combobox:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-time-picker-panel-addon {
  padding: 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-topRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-enter.slide-up-enter-active.ant-time-picker-panel-placement-bottomRight,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-appear.slide-up-appear-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomLeft,
.ant-time-picker-panel.slide-up-leave.slide-up-leave-active.ant-time-picker-panel-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-time-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s ease;
  width: 100px;
}
.ant-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
}
.ant-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-time-picker-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-time-picker-large .ant-time-picker-input {
  padding: 6px 7px;
  height: 32px;
}
.ant-time-picker-small .ant-time-picker-input {
  padding: 1px 7px;
  height: 22px;
}
.ant-time-picker-open {
  opacity: 0;
}
.ant-time-picker-icon {
  position: absolute;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  width: 14px;
  height: 12px;
  line-height: 12px;
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  top: 50%;
  margin-top: -6px;
}
.ant-time-picker-icon:after {
  content: "\\e641";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: block;
  line-height: 1;
}
.ant-time-picker-panel {
  position: relative;
  left: 0;
}
.ant-time-picker-panel.top {
  bottom: -8px;
}
.ant-time-picker-panel.bottom {
  top: -2px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzTimePickerComponent.ctorParameters = () => [];
NzTimePickerComponent.propDecorators = {
    "trigger": [{ type: ViewChild, args: ['trigger',] },],
    "nzDisabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTimePickerModule {
}
NzTimePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NzUtilModule, OverlayModule, NzLocaleModule],
                declarations: [NzTimePickerComponent, NzTimePickerInnerComponent],
                exports: [NzTimePickerComponent, NzTimePickerInnerComponent]
            },] },
];
/** @nocollapse */
NzTimePickerModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDatePickerComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _cdr
     * @param {?} _locale
     */
    constructor(_elementRef, _cdr, _locale) {
        this._elementRef = _elementRef;
        this._cdr = _cdr;
        this._locale = _locale;
        this._allowClear = true;
        this._disabled = false;
        this._showTime = null;
        this._open = false;
        this._mode = 'year';
        this._dropDownPosition = 'bottom';
        this._value = null;
        this._today = new Date();
        this._selectedMonth = moment(this.nzValue).month();
        this._selectedYear = moment(this.nzValue).year();
        this._selectedDate = moment(this.nzValue).date();
        this._showMonth = moment(new Date()).month();
        this._showYear = moment(new Date()).year();
        this._startDecade = Math.floor(this._showYear / 10) * 10;
        this._yearPanel = [];
        this._positions = [...DEFAULT_DATEPICKER_POSITIONS];
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.nzPlaceHolder = this._locale.translate('DateTime.chooseDatePlease');
        this.nzFormat = 'YYYY-MM-DD';
        this.nzSize = '';
        this.nzMode = 'day';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowTime(value) {
        if (typeof value === 'string' || typeof value === 'boolean') {
            this._showTime = toBoolean(value) ? {} : null;
        }
        else {
            this._showTime = value;
        }
    }
    /**
     * @return {?}
     */
    get nzShowTime() {
        return this._showTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAllowClear(value) {
        this._allowClear = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAllowClear() {
        return this._allowClear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this._closeCalendar();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabledDate(value) {
        this._disabledDate = value;
    }
    /**
     * @return {?}
     */
    get nzDisabledDate() {
        if (this._mode === 'month' && this.nzMode === 'day') {
            return;
        }
        return this._disabledDate;
    }
    /**
     * @return {?}
     */
    get _disabledToday() {
        if (this._disabledDate) {
            return this._disabledDate(new Date());
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'top' : 'bottom';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || new Date();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeTime($event) {
        this._value = $event;
    }
    /**
     * @param {?} box
     * @return {?}
     */
    _blurInput(box) {
        if (Date.parse(box.value)) {
            this.nzValue = new Date(box.value);
            this.onChange(this._value);
        }
    }
    /**
     * @return {?}
     */
    _preYear() {
        this._showYear = this._showYear - 1;
    }
    /**
     * @return {?}
     */
    _nextYear() {
        this._showYear = this._showYear + 1;
    }
    /**
     * @return {?}
     */
    _preMonth() {
        if (this._showMonth - 1 < 0) {
            this._showMonth = 11;
            this._preYear();
        }
        else {
            this._showMonth = this._showMonth - 1;
        }
    }
    /**
     * @return {?}
     */
    _nextMonth() {
        if (this._showMonth + 1 > 11) {
            this._showMonth = 0;
            this._nextYear();
        }
        else {
            this._showMonth = this._showMonth + 1;
        }
    }
    /**
     * @param {?} year
     * @param {?} $event
     * @return {?}
     */
    _setShowYear(year, $event) {
        $event.stopPropagation();
        this._showYear = year;
        this._mode = this.nzMode === 'day' ? 'year' : 'month';
    }
    /**
     * @return {?}
     */
    _preDecade() {
        this._startDecade = this._startDecade - 10;
    }
    /**
     * @return {?}
     */
    _nextDecade() {
        this._startDecade = this._startDecade + 10;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _clearValue(e) {
        e.preventDefault();
        e.stopPropagation();
        this.nzValue = null;
        this.onChange(this._value);
    }
    /**
     * @return {?}
     */
    _changeToToday() {
        if (!this._disabledToday) {
            this.nzValue = new Date();
            this.onChange(this._value);
            this._closeCalendar();
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    _clickDay(day) {
        if (!this.nzShowTime) {
            this._closeCalendar();
            this.nzValue = day.date.toDate();
            this.onChange(this._value);
        }
        else {
            this.nzValue = moment(this.nzValue).year(day.date.year()).month(day.date.month()).date(day.date.date()).toDate();
            this.onChange(this._value);
        }
    }
    /**
     * @param {?} month
     * @return {?}
     */
    _clickMonth(month) {
        if (this.nzMode === 'month') {
            this._closeCalendar();
            this.nzValue = moment(this.nzValue).year(this._showYear).month(month.index).toDate();
            this.onChange(this._value);
        }
        else {
            this._showMonth = month.index;
            this._mode = 'year';
        }
    }
    /**
     * @return {?}
     */
    _openCalendar() {
        if (this.nzDisabled) {
            return;
        }
        this._mode = this.nzMode === 'day' ? 'year' : 'month';
        this._open = true;
    }
    /**
     * @return {?}
     */
    _closeCalendar() {
        if (!this._open) {
            return;
        }
        if (this.nzShowTime) {
            this._updateValue(this._value);
            this.onChange(this._value);
        }
        this._open = false;
    }
    /**
     * @return {?}
     */
    _changeMonthView() {
        this._mode = 'month';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeDecadeView($event) {
        $event.stopPropagation();
        this._mode = 'decade';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeTimeView($event) {
        $event.stopPropagation();
        this._mode = 'time';
        setTimeout(_ => {
            this.timePickerInner._initPosition();
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeYearView($event) {
        $event.stopPropagation();
        this._mode = 'year';
    }
    /**
     * @return {?}
     */
    get _showClearIcon() {
        return this._value && !this.nzDisabled && this.nzAllowClear;
    }
    /**
     * @return {?}
     */
    _generateYearPanel() {
        let /** @type {?} */ _t = [];
        for (let /** @type {?} */ i = 0; i < 10; i++) {
            if (i === 1 || i === 4 || i === 7 || i === 9) {
                _t.push(i);
                this._yearPanel.push(_t);
                _t = [];
            }
            else {
                _t.push(i);
            }
        }
        this._yearPanel[0].unshift('start');
        this._yearPanel[3].push('end');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._generateYearPanel();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        // this.nzValue = value;
        this._updateValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _updateValue(value) {
        if (this._value === value) {
            return;
        }
        if (this._disabledDate && this._disabledDate(value)) {
            return;
        }
        this._value = value;
        this._selectedMonth = moment(this.nzValue).month();
        this._selectedYear = moment(this.nzValue).year();
        this._selectedDate = moment(this.nzValue).date();
        this._showYear = moment(this.nzValue).year();
        this._showMonth = moment(this.nzValue).month();
        this._startDecade = Math.floor(this._showYear / 10) * 10;
    }
}
NzDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-datepicker',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    dropDownAnimation
                ],
                template: `
    <span style="display: block"
      (click)="_openCalendar()"
      cdkOverlayOrigin
      #origin="cdkOverlayOrigin"
      #trigger>
    <input
      nz-input
      (blur)="onTouched()"
      [attr.placeholder]="nzPlaceHolder"
      [nzDisabled]="nzDisabled"
      [nzSize]="nzSize"
      class="ant-calendar-picker-input"
      [value]="_value|nzDate:nzFormat"
      readonly>
    <i class="ant-calendar-picker-clear anticon anticon-cross-circle"
      *ngIf="_showClearIcon"
      (click)="onTouched();_clearValue($event)">
    </i>
    <span class="ant-calendar-picker-icon"></span>
  </span>
    <ng-template
      cdkConnectedOverlay
      cdkConnectedOverlayHasBackdrop
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOrigin]="origin"
      (backdropClick)="_closeCalendar()"
      (detach)="_closeCalendar()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayOpen]="_open"
    >
      <div class="ant-calendar-picker-container"
        [class.top]="_dropDownPosition==='top'"
        [class.bottom]="_dropDownPosition==='bottom'"
        [@dropDownAnimation]="_dropDownPosition">
        <div class="ant-calendar" tabindex="0" [class.ant-calendar-time]="nzShowTime">
          <div class="ant-calendar-input-wrap">
            <div class="ant-calendar-date-input-wrap">
              <input class="ant-calendar-input"
                [attr.placeholder]="nzPlaceHolder"
                [value]="_value|nzDate:nzFormat"
                #dateBox
                (blur)="_blurInput(dateBox)">
            </div>
            <a class="ant-calendar-clear-btn" title="{{ 'DateTime.clear' | nzTranslate }}"></a>
          </div>
          <div class="ant-calendar-date-panel">
            <div class="ant-calendar-header">
              <div style="position: relative;" *ngIf="_mode!='time'">
                <a class="ant-calendar-prev-year-btn" title="{{ 'DateTime.prevYear' | nzTranslate }}" (click)="_preYear()"></a>
                <a class="ant-calendar-prev-month-btn" title="{{ 'DateTime.prevMonth' | nzTranslate }}" (click)="_preMonth()"></a>
                <span class="ant-calendar-ym-select">
              <a class="ant-calendar-month-select" title="{{ 'DateTime.chooseMonth' | nzTranslate }}" (click)="_changeMonthView()">{{ 'DateTime.nMonth' | nzTranslate: {num: _showMonth + 1} }}</a>
              <a class="ant-calendar-year-select" title="{{ 'DateTime.chooseYear' | nzTranslate }}" (click)="_changeDecadeView($event)">{{ 'DateTime.nYear' | nzTranslate: {num: _showYear} }}</a>
              </span>
                <a class="ant-calendar-next-month-btn" title="{{ 'DateTime.nextMonth' | nzTranslate }}" (click)="_nextMonth()"></a>
                <a class="ant-calendar-next-year-btn" title="{{ 'DateTime.nextYear' | nzTranslate }}" (click)="_nextYear()"></a>
              </div>
              <div style="position: relative;" *ngIf="_mode=='time'">
              <span class="ant-calendar-my-select">
                <a class="ant-calendar-year-select" title="Choose a month">{{ 'DateTime.nYear' | nzTranslate: {num: _selectedYear} }}</a>
                <a class="ant-calendar-month-select" title="Choose a month">{{ 'DateTime.nMonth' | nzTranslate: {num: _showMonth + 1} }}</a>
                <a class="ant-calendar-day-select">{{ 'DateTime.nDay' | nzTranslate: {num: _selectedDate} }}</a>
              </span>
              </div>
              <div class="ant-calendar-month-panel" *ngIf="_mode=='month'">
                <div>
                  <div class="ant-calendar-month-panel-header">
                    <a class="ant-calendar-month-panel-prev-year-btn" title="{{ 'DateTime.prevYear' | nzTranslate }}" (click)="_preYear()"></a>
                    <a class="ant-calendar-month-panel-year-select" title="{{ 'DateTime.chooseYear' | nzTranslate }}" (click)="_changeDecadeView($event)">
                      <span class="ant-calendar-month-panel-year-select-content">{{ _showYear }}</span>
                      <span class="ant-calendar-month-panel-year-select-arrow">x</span>
                    </a>
                    <a class="ant-calendar-month-panel-next-year-btn" title="{{ 'DateTime.nextYear' | nzTranslate }}" (click)="_nextYear()"></a>
                  </div>
                  <div class="ant-calendar-month-panel-body">
                    <nz-calendar
                      [nzClearTime]="!nzShowTime"
                      [nzDisabledDate]="nzDisabledDate"
                      (nzClickDay)="_clickDay($event)"
                      [nzShowMonth]="_showMonth"
                      [nzShowYear]="_showYear"
                      [nzValue]="_value"
                      (nzClickMonth)="_clickMonth($event)"
                      [nzMode]="'month'"
                      [nzFullScreen]="false"
                      [nzShowHeader]="false"
                      nzDatePicker>
                    </nz-calendar>
                  </div>
                </div>
              </div>
              <div class="ant-calendar-year-panel" *ngIf="_mode=='decade'">
                <div>
                  <div class="ant-calendar-year-panel-header">
                    <a class="ant-calendar-year-panel-prev-decade-btn" title="{{ 'DateTime.prevDecade' | nzTranslate }}" (click)="_preDecade()"></a>
                    <a class="ant-calendar-year-panel-decade-select" title="{{ 'DateTime.chooseDecade' | nzTranslate }}">
                      <span class="ant-calendar-year-panel-decade-select-content">{{ _startDecade }}-{{ _startDecade + 9 }}</span>
                      <span class="ant-calendar-year-panel-decade-select-arrow">x</span>
                    </a>
                    <a class="ant-calendar-year-panel-next-decade-btn" title="{{ 'DateTime.nextDecade' | nzTranslate }}" (click)="_nextDecade()"></a>
                  </div>
                  <div class="ant-calendar-year-panel-body">
                    <table class="ant-calendar-year-panel-table" cellspacing="0" role="grid">
                      <tbody class="ant-calendar-year-panel-tbody">
                        <tr *ngFor="let tr of _yearPanel">
                          <ng-template ngFor let-td [ngForOf]="tr">
                            <td class="ant-calendar-year-panel-cell ant-calendar-year-panel-last-decade-cell" *ngIf="td=='start'">
                              <a class="ant-calendar-year-panel-year" (click)="_preDecade()">{{ _startDecade - 1 }}</a>
                            </td>
                            <td *ngIf="(td!='start')&&(td!='end')" [attr.title]="_startDecade+td" class="ant-calendar-year-panel-cell" [ngClass]="{'ant-calendar-year-panel-selected-cell':(_startDecade+td==_showYear)}">
                              <a class="ant-calendar-year-panel-year" (click)="_setShowYear(_startDecade+td,$event)">{{ _startDecade + td }}</a>
                            </td>
                            <td class="ant-calendar-year-panel-cell ant-calendar-year-panel-next-decade-cell" *ngIf="td=='end'">
                              <a class="ant-calendar-year-panel-year" (click)="_nextDecade()">{{ _startDecade + 10 }}</a>
                            </td>
                          </ng-template>
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
            <nz-timepicker-inner
              [nzPlaceHolder]="nzShowTime && nzShowTime.nzPlaceHolder || ('DateTime.chooseTimePlease' | nzTranslate)"
              [nzFormat]="nzShowTime&&nzShowTime.nzFormat||'HH:mm:ss'"
              [nzDisabled]="nzShowTime&&nzShowTime.nzDisabled||false"
              [nzDisabledHours]="nzShowTime&&nzShowTime.nzDisabledHours||null"
              [nzDisabledMinutes]="nzShowTime&&nzShowTime.nzDisabledMinutes||null"
              [nzDisabledSeconds]="nzShowTime&&nzShowTime.nzDisabledSeconds||null"
              [nzHideDisabledOptions]="nzShowTime&&nzShowTime.nzHideDisabledOptions||false"
              [ngModel]="_value" (ngModelChange)="_changeTime($event)"
              *ngIf="nzShowTime&&(_mode == 'time')"></nz-timepicker-inner>
            <div class="ant-calendar-calendar-body">
              <nz-calendar [nzClearTime]="!nzShowTime" [nzDisabledDate]="nzDisabledDate" (nzClickDay)="_clickDay($event)" [nzShowMonth]="_showMonth" [nzShowYear]="_showYear" [nzValue]="_value" (nzClickMonth)="_clickMonth($event)" [nzMode]="'year'" [nzFullScreen]="false" [nzShowHeader]="false" nzDatePicker></nz-calendar>
            </div>
            <div class="ant-calendar-footer ant-calendar-footer-show-ok">
              <span class="ant-calendar-footer-btn">
                <a class="ant-calendar-today-btn" [class.ant-calendar-today-btn-disabled]="_disabledToday" [attr.title]="_today|nzDate:nzFormat" (click)="_changeToToday()">{{ (nzShowTime ? 'DateTime.thisMoment' : 'DateTime.today') | nzTranslate }}</a>
                <a class="ant-calendar-time-picker-btn" (click)="_changeTimeView($event)" *ngIf="(_mode != 'time')&&nzShowTime">{{ 'DateTime.chooseTime' | nzTranslate }}</a>
                <a class="ant-calendar-time-picker-btn" (click)="_changeYearView($event)" *ngIf="(_mode == 'time')&&nzShowTime">{{ 'DateTime.chooseDate' | nzTranslate }}</a>
                <a class="ant-calendar-ok-btn" *ngIf="nzShowTime" (click)="_closeCalendar()">{{ 'DateTime.ok' | nzTranslate }}</a>
              </span>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzDatePickerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-calendar-picker-container {
  position: absolute;
  z-index: 1050;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-calendar-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s;
}
.ant-calendar-picker-input {
  outline: none;
  display: block;
}
.ant-calendar-picker:hover .ant-calendar-picker-input:not(.ant-input-disabled) {
  border-color: #108ee9;
}
.ant-calendar-picker-clear,
.ant-calendar-picker-icon {
  position: absolute;
  width: 14px;
  height: 14px;
  right: 8px;
  top: 50%;
  margin-top: -7px;
  line-height: 14px;
  font-size: 12px;
  transition: all .3s;
  user-select: none;
}
.ant-calendar-picker-clear {
  opacity: 0;
  z-index: 1;
  color: rgba(0, 0, 0, 0.25);
  background: #fff;
  pointer-events: none;
  cursor: pointer;
}
.ant-calendar-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker:hover .ant-calendar-picker-clear {
  opacity: 1;
  pointer-events: auto;
}
.ant-calendar-picker-icon {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker-icon:after {
  content: "\\e6bb";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  line-height: 1;
}
.ant-calendar {
  position: relative;
  outline: none;
  width: 231px;
  border: 1px solid #fff;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
}
.ant-calendar-input-wrap {
  height: 34px;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-input {
  border: 0;
  width: 100%;
  cursor: auto;
  outline: 0;
  height: 22px;
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
}
.ant-calendar-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-week-number {
  width: 286px;
}
.ant-calendar-week-number-cell {
  text-align: center;
}
.ant-calendar-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-header a:hover {
  color: #49a9ee;
}
.ant-calendar-header .ant-calendar-century-select,
.ant-calendar-header .ant-calendar-decade-select,
.ant-calendar-header .ant-calendar-year-select,
.ant-calendar-header .ant-calendar-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-century-select-arrow,
.ant-calendar-header .ant-calendar-decade-select-arrow,
.ant-calendar-header .ant-calendar-year-select-arrow,
.ant-calendar-header .ant-calendar-month-select-arrow {
  display: none;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-prev-month-btn,
.ant-calendar-header .ant-calendar-next-month-btn,
.ant-calendar-header .ant-calendar-prev-year-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-prev-year-btn {
  left: 7px;
}
.ant-calendar-header .ant-calendar-prev-century-btn:after,
.ant-calendar-header .ant-calendar-prev-decade-btn:after,
.ant-calendar-header .ant-calendar-prev-year-btn:after {
  content: '«';
}
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  right: 7px;
}
.ant-calendar-header .ant-calendar-next-century-btn:after,
.ant-calendar-header .ant-calendar-next-decade-btn:after,
.ant-calendar-header .ant-calendar-next-year-btn:after {
  content: '»';
}
.ant-calendar-header .ant-calendar-prev-month-btn {
  left: 29px;
}
.ant-calendar-header .ant-calendar-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-header .ant-calendar-next-month-btn {
  right: 29px;
}
.ant-calendar-header .ant-calendar-next-month-btn:after {
  content: '›';
}
.ant-calendar-body {
  padding: 4px 8px;
}
.ant-calendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
}
.ant-calendar table,
.ant-calendar th,
.ant-calendar td {
  border: 0;
}
.ant-calendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-calendar-column-header {
  line-height: 18px;
  width: 33px;
  padding: 6px 0;
  text-align: center;
}
.ant-calendar-column-header .ant-calendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-calendar-week-number-header .ant-calendar-column-header-inner {
  display: none;
}
.ant-calendar-cell {
  padding: 4px 0;
}
.ant-calendar-date {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 2px;
  width: 20px;
  height: 20px;
  line-height: 18px;
  border: 1px solid transparent;
  padding: 0;
  background: transparent;
  text-align: center;
  transition: background 0.3s ease;
}
.ant-calendar-date-panel {
  position: relative;
}
.ant-calendar-date:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-date:active {
  color: #fff;
  background: #49a9ee;
}
.ant-calendar-today .ant-calendar-date {
  border-color: #108ee9;
  font-weight: bold;
  color: #108ee9;
}
.ant-calendar-last-month-cell .ant-calendar-date,
.ant-calendar-next-month-btn-day .ant-calendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-selected-day .ant-calendar-date {
  background: #108ee9;
  color: #fff;
  border: 1px solid transparent;
}
.ant-calendar-selected-day .ant-calendar-date:hover {
  background: #108ee9;
}
.ant-calendar-disabled-cell .ant-calendar-date {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
  border-radius: 0;
  width: auto;
  border: 1px solid transparent;
}
.ant-calendar-disabled-cell .ant-calendar-date:hover {
  background: #f7f7f7;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date {
  position: relative;
  margin-right: 5px;
  padding-left: 5px;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date:before {
  content: " ";
  position: absolute;
  top: -1px;
  left: 5px;
  width: 20px;
  height: 20px;
  border: 1px solid #bcbcbc;
  border-radius: 4px;
}
.ant-calendar-disabled-cell-first-of-row .ant-calendar-date {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-calendar-disabled-cell-last-of-row .ant-calendar-date {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-calendar-footer {
  border-top: 1px solid #e9e9e9;
  line-height: 38px;
  padding: 0 12px;
}
.ant-calendar-footer:empty {
  border-top: 0;
}
.ant-calendar-footer-btn {
  text-align: center;
  display: block;
}
.ant-calendar-footer-extra + .ant-calendar-footer-btn {
  border-top: 1px solid #e9e9e9;
  margin: 0 -12px;
  padding: 0 12px;
}
.ant-calendar .ant-calendar-today-btn,
.ant-calendar .ant-calendar-clear-btn {
  display: inline-block;
  text-align: center;
  margin: 0 0 0 8px;
}
.ant-calendar .ant-calendar-today-btn-disabled,
.ant-calendar .ant-calendar-clear-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-today-btn:only-child,
.ant-calendar .ant-calendar-clear-btn:only-child {
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn {
  display: none;
  position: absolute;
  right: 5px;
  text-indent: -76px;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 7px;
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  text-indent: 43px;
  transition: color 0.3s ease;
}
.ant-calendar .ant-calendar-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar .ant-calendar-ok-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
  line-height: 20px;
}
.ant-calendar .ant-calendar-ok-btn > .anticon {
  line-height: 1;
}
.ant-calendar .ant-calendar-ok-btn,
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn:focus {
  outline: 0;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled] {
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn.disabled > *,
.ant-calendar .ant-calendar-ok-btn[disabled] > * {
  pointer-events: none;
}
.ant-calendar .ant-calendar-ok-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-calendar .ant-calendar-ok-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:hover,
.ant-calendar .ant-calendar-ok-btn:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled],
.ant-calendar .ant-calendar-ok-btn.disabled:hover,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover,
.ant-calendar .ant-calendar-ok-btn.disabled:focus,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus,
.ant-calendar .ant-calendar-ok-btn.disabled:active,
.ant-calendar .ant-calendar-ok-btn[disabled]:active,
.ant-calendar .ant-calendar-ok-btn.disabled.active,
.ant-calendar .ant-calendar-ok-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar-range-picker-input {
  background-color: transparent;
  border: 0;
  height: 99%;
  outline: 0;
  width: 43%;
  text-align: center;
  vertical-align: top;
}
.ant-calendar-range-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input[disabled] {
  cursor: not-allowed;
}
.ant-calendar-range-picker-separator {
  color: rgba(0, 0, 0, 0.43);
  width: 8px;
  display: inline-block;
  line-height: 18px;
  vertical-align: top;
}
.ant-calendar-range {
  width: 470px;
  overflow: hidden;
}
.ant-calendar-range .ant-calendar-date-panel::after {
  content: ".";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
.ant-calendar-range-part {
  width: 50%;
  position: relative;
}
.ant-calendar-range-left {
  float: left;
}
.ant-calendar-range-left .ant-calendar-time-picker-inner {
  border-right: 2px solid #e9e9e9;
}
.ant-calendar-range-right {
  float: right;
}
.ant-calendar-range-right .ant-calendar-time-picker-inner {
  border-left: 2px solid #e9e9e9;
}
.ant-calendar-range-middle {
  position: absolute;
  left: 50%;
  width: 20px;
  margin-left: -132px;
  text-align: center;
  height: 34px;
  line-height: 34px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: -118px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-middle {
  margin-left: -12px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: 0;
}
.ant-calendar-range .ant-calendar-input-wrap {
  position: relative;
  height: 34px;
}
.ant-calendar-range .ant-calendar-input,
.ant-calendar-range .ant-calendar-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  height: 22px;
  border: 0;
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-input::-moz-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range .ant-calendar-input:-ms-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input::-webkit-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input:hover,
.ant-calendar-range .ant-calendar-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-calendar-range .ant-calendar-input-disabled,
.ant-calendar-range .ant-calendar-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-range .ant-calendar-input-disabled:hover,
.ant-calendar-range .ant-calendar-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-calendar-range .ant-calendar-input,
textarea.ant-calendar-range .ant-calendar-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-calendar-range .ant-calendar-input-lg,
.ant-calendar-range .ant-calendar-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-calendar-range .ant-calendar-input-sm,
.ant-calendar-range .ant-calendar-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-time-picker-icon {
  display: none;
}
.ant-calendar-range.ant-calendar-week-number {
  width: 574px;
}
.ant-calendar-range.ant-calendar-week-number .ant-calendar-range-part {
  width: 286px;
}
.ant-calendar-range .ant-calendar-year-panel,
.ant-calendar-range .ant-calendar-month-panel {
  top: 34px;
}
.ant-calendar-range .ant-calendar-month-panel .ant-calendar-year-panel {
  top: 0;
}
.ant-calendar-range .ant-calendar-decade-panel-table,
.ant-calendar-range .ant-calendar-year-panel-table,
.ant-calendar-range .ant-calendar-month-panel-table {
  height: 208px;
}
.ant-calendar-range .ant-calendar-in-range-cell {
  border-radius: 0;
  position: relative;
}
.ant-calendar-range .ant-calendar-in-range-cell > div {
  position: relative;
  z-index: 1;
}
.ant-calendar-range .ant-calendar-in-range-cell:before {
  content: '';
  display: block;
  background: #ecf6fd;
  border-radius: 0;
  border: 0;
  position: absolute;
  top: 4px;
  bottom: 4px;
  left: 0;
  right: 0;
}
div.ant-calendar-range-quick-selector {
  text-align: left;
}
div.ant-calendar-range-quick-selector > a {
  margin-right: 8px;
}
.ant-calendar-range .ant-calendar-header,
.ant-calendar-range .ant-calendar-month-panel-header,
.ant-calendar-range .ant-calendar-year-panel-header {
  border-bottom: 0;
}
.ant-calendar-range .ant-calendar-body,
.ant-calendar-range .ant-calendar-month-panel-body,
.ant-calendar-range .ant-calendar-year-panel-body {
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker {
  height: 207px;
  width: 100%;
  top: 68px;
  z-index: 2;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 241px;
  margin-top: -34px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-inner {
  padding-top: 34px;
  height: 100%;
  background: none;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-combobox {
  display: inline-block;
  height: 100%;
  background-color: #fff;
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select {
  height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select ul {
  max-height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  margin-right: 8px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-today-btn {
  margin: 8px 12px;
  height: 22px;
  line-height: 22px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker {
  height: 247px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 281px;
}
.ant-calendar-range.ant-calendar-show-time-picker .ant-calendar-body {
  border-top-color: transparent;
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #ecf6fd;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-month-panel > div {
  height: 100%;
}
.ant-calendar-month-panel-hidden {
  display: none;
}
.ant-calendar-month-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-month-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select-arrow {
  display: none;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-month-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-cell {
  text-align: center;
}
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month,
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month:hover {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
}
.ant-calendar-month-panel-month {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-month-panel-month:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-year-panel > div {
  height: 100%;
}
.ant-calendar-year-panel-hidden {
  display: none;
}
.ant-calendar-year-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-year-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select-arrow {
  display: none;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-year-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-year-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-year-panel-cell {
  text-align: center;
}
.ant-calendar-year-panel-year {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-year-panel-year:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-last-decade-cell .ant-calendar-year-panel-year,
.ant-calendar-year-panel-next-decade-cell .ant-calendar-year-panel-year {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-decade-panel {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff;
  border-radius: 4px;
  outline: none;
}
.ant-calendar-decade-panel-hidden {
  display: none;
}
.ant-calendar-decade-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-decade-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select-arrow {
  display: none;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-decade-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-decade-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-decade-panel-cell {
  text-align: center;
  white-space: nowrap;
}
.ant-calendar-decade-panel-decade {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-decade-panel-decade:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-last-century-cell .ant-calendar-decade-panel-decade,
.ant-calendar-decade-panel-next-century-cell .ant-calendar-decade-panel-decade {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month .ant-calendar-month-panel,
.ant-calendar-month .ant-calendar-year-panel {
  top: 0;
  height: 248px;
}
`,
                    `nz-datepicker {
  display: inline-block;
  position: relative;
}
/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-calendar-picker-container {
  position: absolute;
  z-index: 1050;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-calendar-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s;
}
.ant-calendar-picker-input {
  outline: none;
  display: block;
}
.ant-calendar-picker:hover .ant-calendar-picker-input:not(.ant-input-disabled) {
  border-color: #108ee9;
}
.ant-calendar-picker-clear,
.ant-calendar-picker-icon {
  position: absolute;
  width: 14px;
  height: 14px;
  right: 8px;
  top: 50%;
  margin-top: -7px;
  line-height: 14px;
  font-size: 12px;
  transition: all .3s;
  user-select: none;
}
.ant-calendar-picker-clear {
  opacity: 0;
  z-index: 1;
  color: rgba(0, 0, 0, 0.25);
  background: #fff;
  pointer-events: none;
  cursor: pointer;
}
.ant-calendar-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker:hover .ant-calendar-picker-clear {
  opacity: 1;
  pointer-events: auto;
}
.ant-calendar-picker-icon {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker-icon:after {
  content: "\\e6bb";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  line-height: 1;
}
.ant-calendar {
  position: relative;
  outline: none;
  width: 231px;
  border: 1px solid #fff;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
}
.ant-calendar-input-wrap {
  height: 34px;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-input {
  border: 0;
  width: 100%;
  cursor: auto;
  outline: 0;
  height: 22px;
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
}
.ant-calendar-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-week-number {
  width: 286px;
}
.ant-calendar-week-number-cell {
  text-align: center;
}
.ant-calendar-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-header a:hover {
  color: #49a9ee;
}
.ant-calendar-header .ant-calendar-century-select,
.ant-calendar-header .ant-calendar-decade-select,
.ant-calendar-header .ant-calendar-year-select,
.ant-calendar-header .ant-calendar-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-century-select-arrow,
.ant-calendar-header .ant-calendar-decade-select-arrow,
.ant-calendar-header .ant-calendar-year-select-arrow,
.ant-calendar-header .ant-calendar-month-select-arrow {
  display: none;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-prev-month-btn,
.ant-calendar-header .ant-calendar-next-month-btn,
.ant-calendar-header .ant-calendar-prev-year-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-prev-year-btn {
  left: 7px;
}
.ant-calendar-header .ant-calendar-prev-century-btn:after,
.ant-calendar-header .ant-calendar-prev-decade-btn:after,
.ant-calendar-header .ant-calendar-prev-year-btn:after {
  content: '«';
}
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  right: 7px;
}
.ant-calendar-header .ant-calendar-next-century-btn:after,
.ant-calendar-header .ant-calendar-next-decade-btn:after,
.ant-calendar-header .ant-calendar-next-year-btn:after {
  content: '»';
}
.ant-calendar-header .ant-calendar-prev-month-btn {
  left: 29px;
}
.ant-calendar-header .ant-calendar-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-header .ant-calendar-next-month-btn {
  right: 29px;
}
.ant-calendar-header .ant-calendar-next-month-btn:after {
  content: '›';
}
.ant-calendar-body {
  padding: 4px 8px;
}
.ant-calendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
}
.ant-calendar table,
.ant-calendar th,
.ant-calendar td {
  border: 0;
}
.ant-calendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-calendar-column-header {
  line-height: 18px;
  width: 33px;
  padding: 6px 0;
  text-align: center;
}
.ant-calendar-column-header .ant-calendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-calendar-week-number-header .ant-calendar-column-header-inner {
  display: none;
}
.ant-calendar-cell {
  padding: 4px 0;
}
.ant-calendar-date {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 2px;
  width: 20px;
  height: 20px;
  line-height: 18px;
  border: 1px solid transparent;
  padding: 0;
  background: transparent;
  text-align: center;
  transition: background 0.3s ease;
}
.ant-calendar-date-panel {
  position: relative;
}
.ant-calendar-date:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-date:active {
  color: #fff;
  background: #49a9ee;
}
.ant-calendar-today .ant-calendar-date {
  border-color: #108ee9;
  font-weight: bold;
  color: #108ee9;
}
.ant-calendar-last-month-cell .ant-calendar-date,
.ant-calendar-next-month-btn-day .ant-calendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-selected-day .ant-calendar-date {
  background: #108ee9;
  color: #fff;
  border: 1px solid transparent;
}
.ant-calendar-selected-day .ant-calendar-date:hover {
  background: #108ee9;
}
.ant-calendar-disabled-cell .ant-calendar-date {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
  border-radius: 0;
  width: auto;
  border: 1px solid transparent;
}
.ant-calendar-disabled-cell .ant-calendar-date:hover {
  background: #f7f7f7;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date {
  position: relative;
  margin-right: 5px;
  padding-left: 5px;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date:before {
  content: " ";
  position: absolute;
  top: -1px;
  left: 5px;
  width: 20px;
  height: 20px;
  border: 1px solid #bcbcbc;
  border-radius: 4px;
}
.ant-calendar-disabled-cell-first-of-row .ant-calendar-date {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-calendar-disabled-cell-last-of-row .ant-calendar-date {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-calendar-footer {
  border-top: 1px solid #e9e9e9;
  line-height: 38px;
  padding: 0 12px;
}
.ant-calendar-footer:empty {
  border-top: 0;
}
.ant-calendar-footer-btn {
  text-align: center;
  display: block;
}
.ant-calendar-footer-extra + .ant-calendar-footer-btn {
  border-top: 1px solid #e9e9e9;
  margin: 0 -12px;
  padding: 0 12px;
}
.ant-calendar .ant-calendar-today-btn,
.ant-calendar .ant-calendar-clear-btn {
  display: inline-block;
  text-align: center;
  margin: 0 0 0 8px;
}
.ant-calendar .ant-calendar-today-btn-disabled,
.ant-calendar .ant-calendar-clear-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-today-btn:only-child,
.ant-calendar .ant-calendar-clear-btn:only-child {
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn {
  display: none;
  position: absolute;
  right: 5px;
  text-indent: -76px;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 7px;
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  text-indent: 43px;
  transition: color 0.3s ease;
}
.ant-calendar .ant-calendar-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar .ant-calendar-ok-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
  line-height: 20px;
}
.ant-calendar .ant-calendar-ok-btn > .anticon {
  line-height: 1;
}
.ant-calendar .ant-calendar-ok-btn,
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn:focus {
  outline: 0;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled] {
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn.disabled > *,
.ant-calendar .ant-calendar-ok-btn[disabled] > * {
  pointer-events: none;
}
.ant-calendar .ant-calendar-ok-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-calendar .ant-calendar-ok-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:hover,
.ant-calendar .ant-calendar-ok-btn:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled],
.ant-calendar .ant-calendar-ok-btn.disabled:hover,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover,
.ant-calendar .ant-calendar-ok-btn.disabled:focus,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus,
.ant-calendar .ant-calendar-ok-btn.disabled:active,
.ant-calendar .ant-calendar-ok-btn[disabled]:active,
.ant-calendar .ant-calendar-ok-btn.disabled.active,
.ant-calendar .ant-calendar-ok-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar-range-picker-input {
  background-color: transparent;
  border: 0;
  height: 99%;
  outline: 0;
  width: 43%;
  text-align: center;
  vertical-align: top;
}
.ant-calendar-range-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input[disabled] {
  cursor: not-allowed;
}
.ant-calendar-range-picker-separator {
  color: rgba(0, 0, 0, 0.43);
  width: 8px;
  display: inline-block;
  line-height: 18px;
  vertical-align: top;
}
.ant-calendar-range {
  width: 470px;
  overflow: hidden;
}
.ant-calendar-range .ant-calendar-date-panel::after {
  content: ".";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
.ant-calendar-range-part {
  width: 50%;
  position: relative;
}
.ant-calendar-range-left {
  float: left;
}
.ant-calendar-range-left .ant-calendar-time-picker-inner {
  border-right: 2px solid #e9e9e9;
}
.ant-calendar-range-right {
  float: right;
}
.ant-calendar-range-right .ant-calendar-time-picker-inner {
  border-left: 2px solid #e9e9e9;
}
.ant-calendar-range-middle {
  position: absolute;
  left: 50%;
  width: 20px;
  margin-left: -132px;
  text-align: center;
  height: 34px;
  line-height: 34px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: -118px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-middle {
  margin-left: -12px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: 0;
}
.ant-calendar-range .ant-calendar-input-wrap {
  position: relative;
  height: 34px;
}
.ant-calendar-range .ant-calendar-input,
.ant-calendar-range .ant-calendar-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  height: 22px;
  border: 0;
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-input::-moz-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range .ant-calendar-input:-ms-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input::-webkit-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input:hover,
.ant-calendar-range .ant-calendar-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-calendar-range .ant-calendar-input-disabled,
.ant-calendar-range .ant-calendar-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-range .ant-calendar-input-disabled:hover,
.ant-calendar-range .ant-calendar-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-calendar-range .ant-calendar-input,
textarea.ant-calendar-range .ant-calendar-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-calendar-range .ant-calendar-input-lg,
.ant-calendar-range .ant-calendar-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-calendar-range .ant-calendar-input-sm,
.ant-calendar-range .ant-calendar-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-time-picker-icon {
  display: none;
}
.ant-calendar-range.ant-calendar-week-number {
  width: 574px;
}
.ant-calendar-range.ant-calendar-week-number .ant-calendar-range-part {
  width: 286px;
}
.ant-calendar-range .ant-calendar-year-panel,
.ant-calendar-range .ant-calendar-month-panel {
  top: 34px;
}
.ant-calendar-range .ant-calendar-month-panel .ant-calendar-year-panel {
  top: 0;
}
.ant-calendar-range .ant-calendar-decade-panel-table,
.ant-calendar-range .ant-calendar-year-panel-table,
.ant-calendar-range .ant-calendar-month-panel-table {
  height: 208px;
}
.ant-calendar-range .ant-calendar-in-range-cell {
  border-radius: 0;
  position: relative;
}
.ant-calendar-range .ant-calendar-in-range-cell > div {
  position: relative;
  z-index: 1;
}
.ant-calendar-range .ant-calendar-in-range-cell:before {
  content: '';
  display: block;
  background: #ecf6fd;
  border-radius: 0;
  border: 0;
  position: absolute;
  top: 4px;
  bottom: 4px;
  left: 0;
  right: 0;
}
div.ant-calendar-range-quick-selector {
  text-align: left;
}
div.ant-calendar-range-quick-selector > a {
  margin-right: 8px;
}
.ant-calendar-range .ant-calendar-header,
.ant-calendar-range .ant-calendar-month-panel-header,
.ant-calendar-range .ant-calendar-year-panel-header {
  border-bottom: 0;
}
.ant-calendar-range .ant-calendar-body,
.ant-calendar-range .ant-calendar-month-panel-body,
.ant-calendar-range .ant-calendar-year-panel-body {
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker {
  height: 207px;
  width: 100%;
  top: 68px;
  z-index: 2;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 241px;
  margin-top: -34px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-inner {
  padding-top: 34px;
  height: 100%;
  background: none;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-combobox {
  display: inline-block;
  height: 100%;
  background-color: #fff;
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select {
  height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select ul {
  max-height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  margin-right: 8px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-today-btn {
  margin: 8px 12px;
  height: 22px;
  line-height: 22px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker {
  height: 247px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 281px;
}
.ant-calendar-range.ant-calendar-show-time-picker .ant-calendar-body {
  border-top-color: transparent;
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #ecf6fd;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-month-panel > div {
  height: 100%;
}
.ant-calendar-month-panel-hidden {
  display: none;
}
.ant-calendar-month-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-month-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select-arrow {
  display: none;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-month-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-cell {
  text-align: center;
}
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month,
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month:hover {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
}
.ant-calendar-month-panel-month {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-month-panel-month:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-year-panel > div {
  height: 100%;
}
.ant-calendar-year-panel-hidden {
  display: none;
}
.ant-calendar-year-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-year-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select-arrow {
  display: none;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-year-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-year-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-year-panel-cell {
  text-align: center;
}
.ant-calendar-year-panel-year {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-year-panel-year:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-last-decade-cell .ant-calendar-year-panel-year,
.ant-calendar-year-panel-next-decade-cell .ant-calendar-year-panel-year {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-decade-panel {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff;
  border-radius: 4px;
  outline: none;
}
.ant-calendar-decade-panel-hidden {
  display: none;
}
.ant-calendar-decade-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-decade-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select-arrow {
  display: none;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-decade-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-decade-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-decade-panel-cell {
  text-align: center;
  white-space: nowrap;
}
.ant-calendar-decade-panel-decade {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-decade-panel-decade:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-last-century-cell .ant-calendar-decade-panel-decade,
.ant-calendar-decade-panel-next-century-cell .ant-calendar-decade-panel-decade {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month .ant-calendar-month-panel,
.ant-calendar-month .ant-calendar-year-panel {
  top: 0;
  height: 248px;
}
.ant-calendar-picker-container {
  position: relative;
  left: -2px;
}
.ant-calendar-picker-container.top {
  bottom: -2px;
}
.ant-calendar-picker-container.bottom {
  top: -2px;
}
.ant-input > .ant-calendar-range-picker-input {
  background-color: transparent;
  border: 0;
  height: 99%;
  outline: 0;
  width: 43%;
  text-align: center;
  vertical-align: top;
}
.ant-input > .ant-calendar-range-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input > .ant-calendar-range-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input > .ant-calendar-range-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input > .ant-calendar-range-picker-input[disabled] {
  cursor: not-allowed;
}
.ant-input > .ant-calendar-range-picker-input:focus {
  border: 0;
  box-shadow: none;
}
.ant-calendar-time-picker-body {
  height: 247px;
}
`
                ],
                host: {
                    '[class.ant-calendar-picker]': 'true'
                }
            },] },
];
/** @nocollapse */
NzDatePickerComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: NzLocaleService, },
];
NzDatePickerComponent.propDecorators = {
    "nzPlaceHolder": [{ type: Input },],
    "nzFormat": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzMode": [{ type: Input },],
    "trigger": [{ type: ViewChild, args: ['trigger',] },],
    "timePickerInner": [{ type: ViewChild, args: [NzTimePickerInnerComponent,] },],
    "nzShowTime": [{ type: Input },],
    "nzAllowClear": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "nzDisabledDate": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRangePickerComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _cdr
     * @param {?} _locale
     */
    constructor(_elementRef, _cdr, _locale) {
        this._elementRef = _elementRef;
        this._cdr = _cdr;
        this._locale = _locale;
        this._disabled = false;
        this._showTime = null;
        this._now = moment();
        this._oldValue = this._defaultRangeValue;
        this._value = this._defaultRangeValue;
        this._part = RangePart;
        this._disabledDatePart = [null, null];
        this._mode = ['year', 'year'];
        this._selectedMonth = [];
        this._selectedYear = [];
        this._selectedDate = [];
        this._showMonth = [this._now.month(), this._now.clone().add(1, 'month').month()];
        this._showYear = [this._now.year(), this._now.year()];
        this._yearPanel = [];
        this._startDecade = new Array(2).fill(Math.floor(this._showYear[RangePart.Start] / 10) * 10);
        this._triggerWidth = 0;
        this._dropDownPosition = 'bottom';
        this._positions = [...DEFAULT_DATEPICKER_POSITIONS];
        this.onTouched = () => null;
        this.onChange = () => null;
        this.nzSize = '';
        this.nzFormat = 'YYYY-MM-DD';
        this.nzAllowClear = true;
        this.nzPlaceholder = [this._locale.translate('DateTime.chooseStartDatePlease'), this._locale.translate('DateTime.chooseEndDatePlease')];
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get _defaultRangeValue() {
        return [null, null];
    }
    /**
     * @return {?}
     */
    get start() {
        return moment(this._value[RangePart.Start]);
    }
    /**
     * @return {?}
     */
    get end() {
        return moment(this._value[RangePart.End]);
    }
    /**
     * @return {?}
     */
    get showClearIcon() {
        return this._isComplete() && !this.nzDisabled && this.nzAllowClear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowTime(value) {
        if (typeof value === 'string' || typeof value === 'boolean') {
            this._showTime = toBoolean(value) ? {} : null;
        }
        else {
            this._showTime = value;
        }
    }
    /**
     * @return {?}
     */
    get nzShowTime() {
        return this._showTime;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this._closeCalendar();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value || this._defaultRangeValue;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabledDate(value) {
        this._disabledDate = value;
        this._bindDisabledDateToPart();
    }
    /**
     * @return {?}
     */
    get nzDisabledDate() {
        return this._disabledDate;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._generateYearPanel();
    }
    /**
     * @return {?}
     */
    _bindDisabledDateToPart() {
        // when the mode is month, not needed disable it
        this._disabledDatePart[RangePart.Start] = this._mode[RangePart.Start] === 'month' ? null : this._disabledDate;
        this._disabledDatePart[RangePart.End] = this._mode[RangePart.End] === 'month' ? null : this._disabledDate;
    }
    /**
     * @return {?}
     */
    _generateYearPanel() {
        let /** @type {?} */ _t = [];
        for (let /** @type {?} */ i = 0; i < 10; i++) {
            if (i === 1 || i === 4 || i === 7 || i === 9) {
                _t.push(i);
                this._yearPanel.push(_t);
                _t = [];
            }
            else {
                _t.push(i);
            }
        }
        this._yearPanel[0].unshift('start');
        this._yearPanel[3].push('end');
    }
    /**
     * @return {?}
     */
    _openCalendar() {
        if (this.nzDisabled) {
            return;
        }
        this._mode = ['year', 'year'];
        this._open = true;
        this._setTriggerWidth();
        this._initShow();
    }
    /**
     * @return {?}
     */
    _closeCalendar() {
        if (!this._open) {
            return;
        }
        if (this._isComplete()) {
            this._onChange();
        }
        else {
            this._value = [...this._oldValue];
        }
        this._open = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _clearValue(e) {
        e.preventDefault();
        e.stopPropagation();
        this.nzValue = this._defaultRangeValue;
        this.onChange(this._value);
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this.trigger.nativeElement.getBoundingClientRect().width;
    }
    /**
     * @param {?} year
     * @param {?} part
     * @param {?} $event
     * @return {?}
     */
    _setShowYear(year, part, $event) {
        $event.stopPropagation();
        this._showYear[part] = year;
        this._mode[part] = 'month';
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _isValid(part) {
        return moment(this._value[part]).isValid();
    }
    /**
     * @return {?}
     */
    _isComplete() {
        return this.start.isValid() && this.end.isValid();
    }
    /**
     * @param {?} $event
     * @param {?} part
     * @return {?}
     */
    _changeTime($event, part) {
        this._value[part] = $event;
    }
    /**
     * @param {?} box
     * @param {?} part
     * @return {?}
     */
    _blurInput(box, part) {
        if (Date.parse(box.value)) {
            this._value[part] = new Date(box.value);
            this._onChange();
        }
    }
    /**
     * @param {?} day
     * @return {?}
     */
    _hoverDay(day) {
        if (!this._isComplete() && this._value.some(e => moment(e).isValid())) {
            this.hoveringSelectValue = day.date.toDate();
        }
        else {
            this.hoveringSelectValue = null;
        }
    }
    /**
     * @param {?} day
     * @param {?} part
     * @return {?}
     */
    _clickDay(day, part) {
        const /** @type {?} */ newDate = day.date.toDate();
        // if have completed, then reset
        if (this._isComplete()) {
            this._value = this._defaultRangeValue;
            this._value[part] = newDate;
            this.rangeValueSort();
            return;
        }
        if (moment(this._value[part]).isValid()) {
            if (part === RangePart.Start) {
                this._value[RangePart.End] = newDate;
            }
            else {
                this._value[RangePart.Start] = newDate;
            }
        }
        else {
            this._value[part] = newDate;
        }
        // the result depends the before step
        if (this._isComplete()) {
            this.rangeValueSort();
            if (!this.nzShowTime) {
                this._closeCalendar();
                return;
            }
            this._initShow();
        }
        this.rangeValueSort();
    }
    /**
     * @param {?} month
     * @param {?} part
     * @return {?}
     */
    _clickMonth(month, part) {
        this._showMonth[part] = month.index;
        this._mode[part] = 'year';
        this._bindDisabledDateToPart();
        this.adjustShowMonth();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeTimeView($event) {
        $event.stopPropagation();
        this._mode = ['time', 'time'];
        this.setSelectedValue();
        setTimeout(_ => {
            this.timePickerInner.forEach(e => e._initPosition());
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _changeYearView($event) {
        $event.stopPropagation();
        this._mode = ['year', 'year'];
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _showBtn(part) {
        if (this._mode[part] === 'month') {
            return true;
        }
        const /** @type {?} */ showStart = moment().month(this._showMonth[RangePart.Start]).year(this._showYear[RangePart.Start]);
        const /** @type {?} */ showEnd = moment().month(this._showMonth[RangePart.End]).year(this._showYear[RangePart.End]);
        return !showStart.add(1, 'month').isSame(showEnd, 'month');
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _preYear(part) {
        this._showYear[part] = this._showYear[part] - 1;
        this.adjustShowMonth();
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _nextYear(part) {
        this._showYear[part] = this._showYear[part] + 1;
        this.adjustShowMonth();
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _preMonth(part) {
        if (this._showMonth[part] - 1 < 0) {
            this._showMonth[part] = 11;
            this._preYear(part);
        }
        else {
            this._showMonth[part] = this._showMonth[part] - 1;
        }
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _nextMonth(part) {
        if (this._showMonth[part] + 1 > 11) {
            this._showMonth[part] = 0;
            this._nextYear(part);
        }
        else {
            this._showMonth[part] = this._showMonth[part] + 1;
        }
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _preDecade(part) {
        this._startDecade[part] = this._startDecade[part] - 10;
    }
    /**
     * @param {?} part
     * @return {?}
     */
    _nextDecade(part) {
        this._startDecade[part] = this._startDecade[part] + 10;
    }
    /**
     * @return {?}
     */
    rangeValueSort() {
        if (this.start.isValid() && this.end.isValid() && this.start.isAfter(this.end)) {
            this._value = this._value.reverse();
        }
        else {
            this._value = this._value.concat();
        }
    }
    /**
     * @return {?}
     */
    _initShow() {
        if (this.start.isValid()) {
            this._showMonth[RangePart.Start] = this.start.month();
            this._showYear[RangePart.Start] = this.start.year();
        }
        else {
            this._showMonth[RangePart.Start] = this._now.month();
            this._showYear[RangePart.Start] = this._now.year();
        }
        if (this.end.isValid() && !this.start.isSameOrAfter(this.end, 'month')) {
            this._showMonth[RangePart.End] = this.end.month();
            this._showYear[RangePart.End] = this.end.year();
        }
        else {
            const /** @type {?} */ nextMonthOfStart = this.start.clone().add(1, 'month');
            const /** @type {?} */ nextMonthOfNow = this._now.clone().add(1, 'month');
            this._showMonth[RangePart.End] = this.start.isValid() ? nextMonthOfStart.month() : nextMonthOfNow.month();
            this._showYear[RangePart.End] = this.start.isValid() ? nextMonthOfStart.year() : nextMonthOfNow.year();
        }
        this._showMonth = this._showMonth.concat();
        this._showYear = this._showYear.concat();
    }
    /**
     * @return {?}
     */
    adjustShowMonth() {
        if (this._showYear[RangePart.Start] === this._showYear[RangePart.End] && this._showMonth[RangePart.Start] === this._showMonth[RangePart.End]) {
            this._nextMonth(RangePart.End);
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    onPositionChange(position) {
        const /** @type {?} */ _position = position.connectionPair.originY === 'bottom' ? 'top' : 'bottom';
        if (this._dropDownPosition !== _position) {
            this._dropDownPosition = _position;
            this._cdr.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    setSelectedValue() {
        this._selectedYear = [this.start.year(), this.end.year()];
        this._selectedMonth = [this.start.month(), this.end.month()];
        this._selectedDate = [this.start.date(), this.end.date()];
    }
    /**
     * @return {?}
     */
    isValueChange() {
        return this._value.some((value, index) => {
            return this._oldValue[index] === null
                || (moment.isDate(this._oldValue[index])
                    && moment.isDate(value)
                    && this._oldValue[index].getTime() !== value.getTime());
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._updateValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _updateValue(value) {
        if (Array.isArray(value) && value.length === 2) {
            this._value = [value[RangePart.Start], value[RangePart.End]];
        }
        else {
            this._value = this._defaultRangeValue;
        }
        this._oldValue = [...this._value];
    }
    /**
     * @return {?}
     */
    _onChange() {
        if (this._isValid(RangePart.Start) && this._isValid(RangePart.End) && this.isValueChange()) {
            this.onChange(this._value);
            this._oldValue = [...this._value];
        }
    }
}
NzRangePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-rangepicker',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    dropDownAnimation
                ],
                template: `
    <span class="ant-calendar-picker"
          (click)="_openCalendar()"
          cdkOverlayOrigin
          #origin="cdkOverlayOrigin"
          #trigger>
      <span class="ant-calendar-picker-input ant-input"
            [class.ant-input-disabled]="nzDisabled"
            [class.ant-input-sm]="nzSize === 'small'"
            [class.ant-input-lg]="nzSize === 'large'">
        <ng-container *ngTemplateOutlet="inputRangePart; context: { part: _part.Start }"></ng-container>
        <span class="ant-calendar-range-picker-separator"> ~ </span>
        <ng-container *ngTemplateOutlet="inputRangePart; context: { part: _part.End }"></ng-container>
      </span>
      <i class="ant-calendar-picker-clear anticon anticon-cross-circle"
         *ngIf="showClearIcon"
         (click)="onTouched();
         _clearValue($event)">
      </i>
      <span class="ant-calendar-picker-icon"></span>
    </span>

    <ng-template cdkConnectedOverlay
                 cdkConnectedOverlayHasBackdrop
                 [cdkConnectedOverlayPositions]="_positions"
                 [cdkConnectedOverlayOrigin]="origin"
                 (backdropClick)="_closeCalendar()"
                 (detach)="_closeCalendar()"
                 (positionChange)="onPositionChange($event)"
                 [cdkConnectedOverlayOpen]="_open">
      <div class="ant-calendar-picker-container"
           [class.top]="_dropDownPosition === 'top'"
           [class.bottom]="_dropDownPosition === 'bottom'"
           [@dropDownAnimation]="_dropDownPosition">
        <div class="ant-calendar-range-with-ranges ant-calendar ant-calendar-range"
             [class.ant-calendar-time]="nzShowTime"
             [class.ant-calendar-show-time-picker]="_mode[_part.Start] === 'time' || _mode[_part.End] === 'time'"
             tabindex="0">
          <div class="ant-calendar-panel">
            <div class="ant-calendar-date-panel">
              <ng-container *ngTemplateOutlet="calendarRangePart; context: { part: _part.Start }"></ng-container>
              <span class="ant-calendar-range-middle">~</span>
              <ng-container *ngTemplateOutlet="calendarRangePart; context: { part: _part.End }"></ng-container>
            </div>
            <div class="ant-calendar-footer ant-calendar-range-bottom ant-calendar-footer-show-ok">
                <span class="ant-calendar-footer-btn">
                  <a class="ant-calendar-time-picker-btn"
                     [class.ant-calendar-time-picker-btn-disabled]="!_isComplete()"
                     (click)="_changeTimeView($event)"
                     *ngIf="_mode[_part.Start] !== 'time' && nzShowTime">
                    {{ 'DateTime.chooseTime' | nzTranslate }}
                  </a>
                  <a class="ant-calendar-time-picker-btn"
                     (click)="_changeYearView($event)"
                     *ngIf="_mode[_part.Start] === 'time' && nzShowTime">
                    {{ 'DateTime.chooseDate' | nzTranslate }}
                  </a>
                  <a class="ant-calendar-ok-btn"
                     [class.ant-calendar-ok-btn-disabled]="!_isComplete()"
                     *ngIf="nzShowTime" (click)="_closeCalendar()">
                    {{ 'DateTime.ok' | nzTranslate }}
                  </a>
                </span>
            </div>
          </div>
        </div>
      </div>
    </ng-template>
    <!-- input template -->
    <ng-template #inputRangePart let-part="part">
      <input class="ant-calendar-range-picker-input" nz-input [nzDisabled]="nzDisabled"
             [value]="nzValue[part] | nzDate: nzFormat"
             [placeholder]="nzPlaceholder[part]">
    </ng-template>
    <!-- calendar template -->
    <ng-template #calendarRangePart let-part="part">
      <div class="ant-calendar-range-part"
           [class.ant-calendar-range-left]="part === _part.Start"
           [class.ant-calendar-range-right]="part === _part.End">
        <div class="ant-calendar-input-wrap">
          <div class="ant-calendar-date-input-wrap">
            <input class="ant-calendar-input"
                   [placeholder]="nzPlaceholder[part]"
                   [value]="nzValue[part] | nzDate: nzFormat"
                   #dateBox
                   (blur)="_blurInput(dateBox, part)">
          </div>
        </div>
        <div class="ant-calendar-header">
          <div style="position: relative;" *ngIf="_mode[part] !== 'time'">
            <a class="ant-calendar-prev-year-btn"
               *ngIf="part !== _part.End || _showBtn(part)"
               title="{{ 'DateTime.prevYear' | nzTranslate }}"
               (click)="_preYear(part)"></a>
            <a class="ant-calendar-prev-month-btn"
               *ngIf="_mode[part] !== 'month' && (part !== _part.End ||_showBtn(part))"
               title="{{ 'DateTime.prevMonth' | nzTranslate }}"
               (click)="_preMonth(part)"></a>
            <span class="ant-calendar-ym-select">
                        <a class="ant-calendar-month-select"
                           title="{{ 'DateTime.chooseMonth' | nzTranslate }}"
                           *ngIf="_mode[part] !== 'month'"
                           (click)="_mode[part] = 'month'; _bindDisabledDateToPart()">
                          {{ 'DateTime.nMonth' | nzTranslate: {num: _showMonth[part] + 1} }}
                        </a>
                        <a class="ant-calendar-year-select"
                           (click)="_mode[part] = 'decade'"
                           title="{{ 'DateTime.chooseYear' | nzTranslate }}">
                          {{ 'DateTime.nYear' | nzTranslate: {num: _showYear[part]} }}</a>
                      </span>
            <a class="ant-calendar-next-month-btn"
               *ngIf="_mode[part] !== 'month' && (part !== _part.Start || _showBtn(part))"
               title="{{ 'DateTime.nextMonth' | nzTranslate }}"
               (click)="_nextMonth(part)"></a>
            <a class="ant-calendar-next-year-btn"
               *ngIf="part !== _part.Start || _showBtn(part)"
               title="{{ 'DateTime.nextYear' | nzTranslate }}"
               (click)="_nextYear(part)"></a>
          </div>
          <div style="position: relative;" *ngIf="_mode[part] === 'time'">
              <span class="ant-calendar-my-select">
                <a class="ant-calendar-year-select"
                   title="Choose a month">{{ 'DateTime.nYear' | nzTranslate: {num: _selectedYear[part]} }}</a>
                <a class="ant-calendar-month-select"
                   title="Choose a month">{{ 'DateTime.nMonth' | nzTranslate: {num: _showMonth[part] + 1} }}</a>
                <a class="ant-calendar-day-select">{{ 'DateTime.nDay' | nzTranslate: {num: _selectedDate[part]} }}</a>
              </span>
          </div>
        </div>
        <div class="ant-calendar-year-panel" *ngIf="_mode[part] === 'decade'">
          <div>
            <div class="ant-calendar-year-panel-header">
              <a class="ant-calendar-year-panel-prev-decade-btn" title="{{ 'DateTime.prevDecade' | nzTranslate }}"
                 (click)="_preDecade(part)"></a>
              <a class="ant-calendar-year-panel-decade-select" title="{{ 'DateTime.chooseDecade' | nzTranslate }}">
                <span class="ant-calendar-year-panel-decade-select-content">
                  {{ _startDecade[part] }}-{{ _startDecade[part] + 9 }}</span>
                <span class="ant-calendar-year-panel-decade-select-arrow">x</span>
              </a>
              <a class="ant-calendar-year-panel-next-decade-btn" title="{{ 'DateTime.nextDecade' | nzTranslate }}"
                 (click)="_nextDecade(part)"></a>
            </div>
            <div class="ant-calendar-year-panel-body">
              <table class="ant-calendar-year-panel-table" cellspacing="0" role="grid">
                <tbody class="ant-calendar-year-panel-tbody">
                <tr *ngFor="let tr of _yearPanel">
                  <ng-template ngFor let-td [ngForOf]="tr">
                    <td class="ant-calendar-year-panel-cell ant-calendar-year-panel-last-decade-cell"
                        *ngIf="td === 'start'">
                      <a class="ant-calendar-year-panel-year" (click)="_preDecade()">{{ _startDecade[part] - 1 }}</a>
                    </td>
                    <td *ngIf="(td !== 'start') && (td !== 'end')" [attr.title]="_startDecade[part] + td"
                        class="ant-calendar-year-panel-cell"
                        [ngClass]="{'ant-calendar-year-panel-selected-cell':(_startDecade[part] + td === _showYear[part])}">
                      <a class="ant-calendar-year-panel-year"
                         (click)="_setShowYear(_startDecade[part] + td, part, $event)">{{ _startDecade[part] + td }}</a>
                    </td>
                    <td class="ant-calendar-year-panel-cell ant-calendar-year-panel-next-decade-cell"
                        *ngIf="td === 'end'">
                      <a class="ant-calendar-year-panel-year" (click)="_nextDecade()">{{ _startDecade[part] + 10 }}</a>
                    </td>
                  </ng-template>
                </tr>
                </tbody>
              </table>
            </div>
          </div>
        </div>
        <div class="ant-calendar-body">
          <nz-calendar
            (nzClickMonth)="_clickMonth($event, part)"
            (nzClickDay)="_clickDay($event, part)"
            [nzClearTime]="!nzShowTime"
            (nzHoverDay)="_hoverDay($event)"
            [nzHoveringSelectValue]="hoveringSelectValue"
            [nzRangeValue]="nzValue"
            [nzShowMonth]="_showMonth[part]"
            [nzShowYear]="_showYear[part]"
            [nzMode]="_mode[part] === 'decade' ? 'year' : _mode[part]"
            [nzDisabledDate]="_disabledDatePart[part]"
            [nzFullScreen]="false"
            [nzShowHeader]="false"
            [nzIsRange]="true"
            [nzDatePicker]="true">
          </nz-calendar>
        </div>
        <div class="ant-calendar-time-picker-body" *ngIf="nzShowTime && _mode[part] === 'time'">
          <nz-timepicker-inner
            [nzPlaceHolder]="nzShowTime && nzShowTime.nzPlaceHolder || ('DateTime.chooseTimePlease' | nzTranslate)"
            [nzFormat]="nzShowTime && nzShowTime.nzFormat||'HH:mm:ss'"
            [nzDisabled]="nzShowTime && nzShowTime.nzDisabled||false"
            [nzDisabledHours]="nzShowTime && nzShowTime.nzDisabledHours||null"
            [nzDisabledMinutes]="nzShowTime && nzShowTime.nzDisabledMinutes||null"
            [nzDisabledSeconds]="nzShowTime && nzShowTime.nzDisabledSeconds||null"
            [nzHideDisabledOptions]="nzShowTime && nzShowTime.nzHideDisabledOptions||false"
            [ngModel]="nzValue[part]" (ngModelChange)="_changeTime($event, part)"></nz-timepicker-inner>
        </div>
      </div>
    </ng-template>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzRangePickerComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-calendar-picker-container {
  position: absolute;
  z-index: 1050;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-calendar-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s;
}
.ant-calendar-picker-input {
  outline: none;
  display: block;
}
.ant-calendar-picker:hover .ant-calendar-picker-input:not(.ant-input-disabled) {
  border-color: #108ee9;
}
.ant-calendar-picker-clear,
.ant-calendar-picker-icon {
  position: absolute;
  width: 14px;
  height: 14px;
  right: 8px;
  top: 50%;
  margin-top: -7px;
  line-height: 14px;
  font-size: 12px;
  transition: all .3s;
  user-select: none;
}
.ant-calendar-picker-clear {
  opacity: 0;
  z-index: 1;
  color: rgba(0, 0, 0, 0.25);
  background: #fff;
  pointer-events: none;
  cursor: pointer;
}
.ant-calendar-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker:hover .ant-calendar-picker-clear {
  opacity: 1;
  pointer-events: auto;
}
.ant-calendar-picker-icon {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker-icon:after {
  content: "\\e6bb";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  line-height: 1;
}
.ant-calendar {
  position: relative;
  outline: none;
  width: 231px;
  border: 1px solid #fff;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
}
.ant-calendar-input-wrap {
  height: 34px;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-input {
  border: 0;
  width: 100%;
  cursor: auto;
  outline: 0;
  height: 22px;
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
}
.ant-calendar-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-week-number {
  width: 286px;
}
.ant-calendar-week-number-cell {
  text-align: center;
}
.ant-calendar-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-header a:hover {
  color: #49a9ee;
}
.ant-calendar-header .ant-calendar-century-select,
.ant-calendar-header .ant-calendar-decade-select,
.ant-calendar-header .ant-calendar-year-select,
.ant-calendar-header .ant-calendar-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-century-select-arrow,
.ant-calendar-header .ant-calendar-decade-select-arrow,
.ant-calendar-header .ant-calendar-year-select-arrow,
.ant-calendar-header .ant-calendar-month-select-arrow {
  display: none;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-prev-month-btn,
.ant-calendar-header .ant-calendar-next-month-btn,
.ant-calendar-header .ant-calendar-prev-year-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-prev-year-btn {
  left: 7px;
}
.ant-calendar-header .ant-calendar-prev-century-btn:after,
.ant-calendar-header .ant-calendar-prev-decade-btn:after,
.ant-calendar-header .ant-calendar-prev-year-btn:after {
  content: '«';
}
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  right: 7px;
}
.ant-calendar-header .ant-calendar-next-century-btn:after,
.ant-calendar-header .ant-calendar-next-decade-btn:after,
.ant-calendar-header .ant-calendar-next-year-btn:after {
  content: '»';
}
.ant-calendar-header .ant-calendar-prev-month-btn {
  left: 29px;
}
.ant-calendar-header .ant-calendar-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-header .ant-calendar-next-month-btn {
  right: 29px;
}
.ant-calendar-header .ant-calendar-next-month-btn:after {
  content: '›';
}
.ant-calendar-body {
  padding: 4px 8px;
}
.ant-calendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
}
.ant-calendar table,
.ant-calendar th,
.ant-calendar td {
  border: 0;
}
.ant-calendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-calendar-column-header {
  line-height: 18px;
  width: 33px;
  padding: 6px 0;
  text-align: center;
}
.ant-calendar-column-header .ant-calendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-calendar-week-number-header .ant-calendar-column-header-inner {
  display: none;
}
.ant-calendar-cell {
  padding: 4px 0;
}
.ant-calendar-date {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 2px;
  width: 20px;
  height: 20px;
  line-height: 18px;
  border: 1px solid transparent;
  padding: 0;
  background: transparent;
  text-align: center;
  transition: background 0.3s ease;
}
.ant-calendar-date-panel {
  position: relative;
}
.ant-calendar-date:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-date:active {
  color: #fff;
  background: #49a9ee;
}
.ant-calendar-today .ant-calendar-date {
  border-color: #108ee9;
  font-weight: bold;
  color: #108ee9;
}
.ant-calendar-last-month-cell .ant-calendar-date,
.ant-calendar-next-month-btn-day .ant-calendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-selected-day .ant-calendar-date {
  background: #108ee9;
  color: #fff;
  border: 1px solid transparent;
}
.ant-calendar-selected-day .ant-calendar-date:hover {
  background: #108ee9;
}
.ant-calendar-disabled-cell .ant-calendar-date {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
  border-radius: 0;
  width: auto;
  border: 1px solid transparent;
}
.ant-calendar-disabled-cell .ant-calendar-date:hover {
  background: #f7f7f7;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date {
  position: relative;
  margin-right: 5px;
  padding-left: 5px;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date:before {
  content: " ";
  position: absolute;
  top: -1px;
  left: 5px;
  width: 20px;
  height: 20px;
  border: 1px solid #bcbcbc;
  border-radius: 4px;
}
.ant-calendar-disabled-cell-first-of-row .ant-calendar-date {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-calendar-disabled-cell-last-of-row .ant-calendar-date {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-calendar-footer {
  border-top: 1px solid #e9e9e9;
  line-height: 38px;
  padding: 0 12px;
}
.ant-calendar-footer:empty {
  border-top: 0;
}
.ant-calendar-footer-btn {
  text-align: center;
  display: block;
}
.ant-calendar-footer-extra + .ant-calendar-footer-btn {
  border-top: 1px solid #e9e9e9;
  margin: 0 -12px;
  padding: 0 12px;
}
.ant-calendar .ant-calendar-today-btn,
.ant-calendar .ant-calendar-clear-btn {
  display: inline-block;
  text-align: center;
  margin: 0 0 0 8px;
}
.ant-calendar .ant-calendar-today-btn-disabled,
.ant-calendar .ant-calendar-clear-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-today-btn:only-child,
.ant-calendar .ant-calendar-clear-btn:only-child {
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn {
  display: none;
  position: absolute;
  right: 5px;
  text-indent: -76px;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 7px;
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  text-indent: 43px;
  transition: color 0.3s ease;
}
.ant-calendar .ant-calendar-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar .ant-calendar-ok-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
  line-height: 20px;
}
.ant-calendar .ant-calendar-ok-btn > .anticon {
  line-height: 1;
}
.ant-calendar .ant-calendar-ok-btn,
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn:focus {
  outline: 0;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled] {
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn.disabled > *,
.ant-calendar .ant-calendar-ok-btn[disabled] > * {
  pointer-events: none;
}
.ant-calendar .ant-calendar-ok-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-calendar .ant-calendar-ok-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:hover,
.ant-calendar .ant-calendar-ok-btn:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled],
.ant-calendar .ant-calendar-ok-btn.disabled:hover,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover,
.ant-calendar .ant-calendar-ok-btn.disabled:focus,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus,
.ant-calendar .ant-calendar-ok-btn.disabled:active,
.ant-calendar .ant-calendar-ok-btn[disabled]:active,
.ant-calendar .ant-calendar-ok-btn.disabled.active,
.ant-calendar .ant-calendar-ok-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar-range-picker-input {
  background-color: transparent;
  border: 0;
  height: 99%;
  outline: 0;
  width: 43%;
  text-align: center;
  vertical-align: top;
}
.ant-calendar-range-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input[disabled] {
  cursor: not-allowed;
}
.ant-calendar-range-picker-separator {
  color: rgba(0, 0, 0, 0.43);
  width: 8px;
  display: inline-block;
  line-height: 18px;
  vertical-align: top;
}
.ant-calendar-range {
  width: 470px;
  overflow: hidden;
}
.ant-calendar-range .ant-calendar-date-panel::after {
  content: ".";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
.ant-calendar-range-part {
  width: 50%;
  position: relative;
}
.ant-calendar-range-left {
  float: left;
}
.ant-calendar-range-left .ant-calendar-time-picker-inner {
  border-right: 2px solid #e9e9e9;
}
.ant-calendar-range-right {
  float: right;
}
.ant-calendar-range-right .ant-calendar-time-picker-inner {
  border-left: 2px solid #e9e9e9;
}
.ant-calendar-range-middle {
  position: absolute;
  left: 50%;
  width: 20px;
  margin-left: -132px;
  text-align: center;
  height: 34px;
  line-height: 34px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: -118px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-middle {
  margin-left: -12px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: 0;
}
.ant-calendar-range .ant-calendar-input-wrap {
  position: relative;
  height: 34px;
}
.ant-calendar-range .ant-calendar-input,
.ant-calendar-range .ant-calendar-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  height: 22px;
  border: 0;
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-input::-moz-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range .ant-calendar-input:-ms-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input::-webkit-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input:hover,
.ant-calendar-range .ant-calendar-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-calendar-range .ant-calendar-input-disabled,
.ant-calendar-range .ant-calendar-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-range .ant-calendar-input-disabled:hover,
.ant-calendar-range .ant-calendar-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-calendar-range .ant-calendar-input,
textarea.ant-calendar-range .ant-calendar-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-calendar-range .ant-calendar-input-lg,
.ant-calendar-range .ant-calendar-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-calendar-range .ant-calendar-input-sm,
.ant-calendar-range .ant-calendar-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-time-picker-icon {
  display: none;
}
.ant-calendar-range.ant-calendar-week-number {
  width: 574px;
}
.ant-calendar-range.ant-calendar-week-number .ant-calendar-range-part {
  width: 286px;
}
.ant-calendar-range .ant-calendar-year-panel,
.ant-calendar-range .ant-calendar-month-panel {
  top: 34px;
}
.ant-calendar-range .ant-calendar-month-panel .ant-calendar-year-panel {
  top: 0;
}
.ant-calendar-range .ant-calendar-decade-panel-table,
.ant-calendar-range .ant-calendar-year-panel-table,
.ant-calendar-range .ant-calendar-month-panel-table {
  height: 208px;
}
.ant-calendar-range .ant-calendar-in-range-cell {
  border-radius: 0;
  position: relative;
}
.ant-calendar-range .ant-calendar-in-range-cell > div {
  position: relative;
  z-index: 1;
}
.ant-calendar-range .ant-calendar-in-range-cell:before {
  content: '';
  display: block;
  background: #ecf6fd;
  border-radius: 0;
  border: 0;
  position: absolute;
  top: 4px;
  bottom: 4px;
  left: 0;
  right: 0;
}
div.ant-calendar-range-quick-selector {
  text-align: left;
}
div.ant-calendar-range-quick-selector > a {
  margin-right: 8px;
}
.ant-calendar-range .ant-calendar-header,
.ant-calendar-range .ant-calendar-month-panel-header,
.ant-calendar-range .ant-calendar-year-panel-header {
  border-bottom: 0;
}
.ant-calendar-range .ant-calendar-body,
.ant-calendar-range .ant-calendar-month-panel-body,
.ant-calendar-range .ant-calendar-year-panel-body {
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker {
  height: 207px;
  width: 100%;
  top: 68px;
  z-index: 2;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 241px;
  margin-top: -34px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-inner {
  padding-top: 34px;
  height: 100%;
  background: none;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-combobox {
  display: inline-block;
  height: 100%;
  background-color: #fff;
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select {
  height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select ul {
  max-height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  margin-right: 8px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-today-btn {
  margin: 8px 12px;
  height: 22px;
  line-height: 22px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker {
  height: 247px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 281px;
}
.ant-calendar-range.ant-calendar-show-time-picker .ant-calendar-body {
  border-top-color: transparent;
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #ecf6fd;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-month-panel > div {
  height: 100%;
}
.ant-calendar-month-panel-hidden {
  display: none;
}
.ant-calendar-month-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-month-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select-arrow {
  display: none;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-month-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-cell {
  text-align: center;
}
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month,
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month:hover {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
}
.ant-calendar-month-panel-month {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-month-panel-month:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-year-panel > div {
  height: 100%;
}
.ant-calendar-year-panel-hidden {
  display: none;
}
.ant-calendar-year-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-year-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select-arrow {
  display: none;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-year-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-year-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-year-panel-cell {
  text-align: center;
}
.ant-calendar-year-panel-year {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-year-panel-year:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-last-decade-cell .ant-calendar-year-panel-year,
.ant-calendar-year-panel-next-decade-cell .ant-calendar-year-panel-year {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-decade-panel {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff;
  border-radius: 4px;
  outline: none;
}
.ant-calendar-decade-panel-hidden {
  display: none;
}
.ant-calendar-decade-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-decade-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select-arrow {
  display: none;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-decade-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-decade-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-decade-panel-cell {
  text-align: center;
  white-space: nowrap;
}
.ant-calendar-decade-panel-decade {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-decade-panel-decade:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-last-century-cell .ant-calendar-decade-panel-decade,
.ant-calendar-decade-panel-next-century-cell .ant-calendar-decade-panel-decade {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month .ant-calendar-month-panel,
.ant-calendar-month .ant-calendar-year-panel {
  top: 0;
  height: 248px;
}
`,
                    `nz-datepicker {
  display: inline-block;
  position: relative;
}
/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-calendar-picker-container {
  position: absolute;
  z-index: 1050;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-topRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-enter.slide-up-enter-active.ant-calendar-picker-container-placement-bottomRight,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-appear.slide-up-appear-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomLeft,
.ant-calendar-picker-container.slide-up-leave.slide-up-leave-active.ant-calendar-picker-container-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-calendar-picker {
  position: relative;
  display: inline-block;
  outline: none;
  font-size: 12px;
  transition: opacity 0.3s;
}
.ant-calendar-picker-input {
  outline: none;
  display: block;
}
.ant-calendar-picker:hover .ant-calendar-picker-input:not(.ant-input-disabled) {
  border-color: #108ee9;
}
.ant-calendar-picker-clear,
.ant-calendar-picker-icon {
  position: absolute;
  width: 14px;
  height: 14px;
  right: 8px;
  top: 50%;
  margin-top: -7px;
  line-height: 14px;
  font-size: 12px;
  transition: all .3s;
  user-select: none;
}
.ant-calendar-picker-clear {
  opacity: 0;
  z-index: 1;
  color: rgba(0, 0, 0, 0.25);
  background: #fff;
  pointer-events: none;
  cursor: pointer;
}
.ant-calendar-picker-clear:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker:hover .ant-calendar-picker-clear {
  opacity: 1;
  pointer-events: auto;
}
.ant-calendar-picker-icon {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-picker-icon:after {
  content: "\\e6bb";
  font-family: "anticon";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  line-height: 1;
}
.ant-calendar {
  position: relative;
  outline: none;
  width: 231px;
  border: 1px solid #fff;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
  line-height: 1.5;
}
.ant-calendar-input-wrap {
  height: 34px;
  padding: 6px;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-input {
  border: 0;
  width: 100%;
  cursor: auto;
  outline: 0;
  height: 22px;
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
}
.ant-calendar-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-week-number {
  width: 286px;
}
.ant-calendar-week-number-cell {
  text-align: center;
}
.ant-calendar-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-header a:hover {
  color: #49a9ee;
}
.ant-calendar-header .ant-calendar-century-select,
.ant-calendar-header .ant-calendar-decade-select,
.ant-calendar-header .ant-calendar-year-select,
.ant-calendar-header .ant-calendar-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-century-select-arrow,
.ant-calendar-header .ant-calendar-decade-select-arrow,
.ant-calendar-header .ant-calendar-year-select-arrow,
.ant-calendar-header .ant-calendar-month-select-arrow {
  display: none;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-prev-month-btn,
.ant-calendar-header .ant-calendar-next-month-btn,
.ant-calendar-header .ant-calendar-prev-year-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-header .ant-calendar-prev-century-btn,
.ant-calendar-header .ant-calendar-prev-decade-btn,
.ant-calendar-header .ant-calendar-prev-year-btn {
  left: 7px;
}
.ant-calendar-header .ant-calendar-prev-century-btn:after,
.ant-calendar-header .ant-calendar-prev-decade-btn:after,
.ant-calendar-header .ant-calendar-prev-year-btn:after {
  content: '«';
}
.ant-calendar-header .ant-calendar-next-century-btn,
.ant-calendar-header .ant-calendar-next-decade-btn,
.ant-calendar-header .ant-calendar-next-year-btn {
  right: 7px;
}
.ant-calendar-header .ant-calendar-next-century-btn:after,
.ant-calendar-header .ant-calendar-next-decade-btn:after,
.ant-calendar-header .ant-calendar-next-year-btn:after {
  content: '»';
}
.ant-calendar-header .ant-calendar-prev-month-btn {
  left: 29px;
}
.ant-calendar-header .ant-calendar-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-header .ant-calendar-next-month-btn {
  right: 29px;
}
.ant-calendar-header .ant-calendar-next-month-btn:after {
  content: '›';
}
.ant-calendar-body {
  padding: 4px 8px;
}
.ant-calendar table {
  border-collapse: collapse;
  max-width: 100%;
  background-color: transparent;
  width: 100%;
}
.ant-calendar table,
.ant-calendar th,
.ant-calendar td {
  border: 0;
}
.ant-calendar-calendar-table {
  border-spacing: 0;
  margin-bottom: 0;
}
.ant-calendar-column-header {
  line-height: 18px;
  width: 33px;
  padding: 6px 0;
  text-align: center;
}
.ant-calendar-column-header .ant-calendar-column-header-inner {
  display: block;
  font-weight: normal;
}
.ant-calendar-week-number-header .ant-calendar-column-header-inner {
  display: none;
}
.ant-calendar-cell {
  padding: 4px 0;
}
.ant-calendar-date {
  display: block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 2px;
  width: 20px;
  height: 20px;
  line-height: 18px;
  border: 1px solid transparent;
  padding: 0;
  background: transparent;
  text-align: center;
  transition: background 0.3s ease;
}
.ant-calendar-date-panel {
  position: relative;
}
.ant-calendar-date:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-date:active {
  color: #fff;
  background: #49a9ee;
}
.ant-calendar-today .ant-calendar-date {
  border-color: #108ee9;
  font-weight: bold;
  color: #108ee9;
}
.ant-calendar-last-month-cell .ant-calendar-date,
.ant-calendar-next-month-btn-day .ant-calendar-date {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-selected-day .ant-calendar-date {
  background: #108ee9;
  color: #fff;
  border: 1px solid transparent;
}
.ant-calendar-selected-day .ant-calendar-date:hover {
  background: #108ee9;
}
.ant-calendar-disabled-cell .ant-calendar-date {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
  border-radius: 0;
  width: auto;
  border: 1px solid transparent;
}
.ant-calendar-disabled-cell .ant-calendar-date:hover {
  background: #f7f7f7;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date {
  position: relative;
  margin-right: 5px;
  padding-left: 5px;
}
.ant-calendar-disabled-cell.ant-calendar-today .ant-calendar-date:before {
  content: " ";
  position: absolute;
  top: -1px;
  left: 5px;
  width: 20px;
  height: 20px;
  border: 1px solid #bcbcbc;
  border-radius: 4px;
}
.ant-calendar-disabled-cell-first-of-row .ant-calendar-date {
  border-top-left-radius: 4px;
  border-bottom-left-radius: 4px;
}
.ant-calendar-disabled-cell-last-of-row .ant-calendar-date {
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
}
.ant-calendar-footer {
  border-top: 1px solid #e9e9e9;
  line-height: 38px;
  padding: 0 12px;
}
.ant-calendar-footer:empty {
  border-top: 0;
}
.ant-calendar-footer-btn {
  text-align: center;
  display: block;
}
.ant-calendar-footer-extra + .ant-calendar-footer-btn {
  border-top: 1px solid #e9e9e9;
  margin: 0 -12px;
  padding: 0 12px;
}
.ant-calendar .ant-calendar-today-btn,
.ant-calendar .ant-calendar-clear-btn {
  display: inline-block;
  text-align: center;
  margin: 0 0 0 8px;
}
.ant-calendar .ant-calendar-today-btn-disabled,
.ant-calendar .ant-calendar-clear-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-today-btn:only-child,
.ant-calendar .ant-calendar-clear-btn:only-child {
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn {
  display: none;
  position: absolute;
  right: 5px;
  text-indent: -76px;
  overflow: hidden;
  width: 20px;
  height: 20px;
  text-align: center;
  line-height: 20px;
  top: 7px;
  margin: 0;
}
.ant-calendar .ant-calendar-clear-btn:after {
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "\\e62e";
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
  display: inline-block;
  line-height: 1;
  width: 20px;
  text-indent: 43px;
  transition: color 0.3s ease;
}
.ant-calendar .ant-calendar-clear-btn:hover:after {
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar .ant-calendar-ok-btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: 500;
  text-align: center;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: 1.15;
  padding: 0 15px;
  height: 28px;
  user-select: none;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  color: #fff;
  background-color: #108ee9;
  border-color: #108ee9;
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
  line-height: 20px;
}
.ant-calendar .ant-calendar-ok-btn > .anticon {
  line-height: 1;
}
.ant-calendar .ant-calendar-ok-btn,
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn:focus {
  outline: 0;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):hover {
  text-decoration: none;
}
.ant-calendar .ant-calendar-ok-btn:not([disabled]):active {
  outline: 0;
  transition: none;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled] {
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn.disabled > *,
.ant-calendar .ant-calendar-ok-btn[disabled] > * {
  pointer-events: none;
}
.ant-calendar .ant-calendar-ok-btn-lg {
  padding: 0 15px;
  font-size: 14px;
  border-radius: 4px;
  height: 32px;
}
.ant-calendar .ant-calendar-ok-btn-sm {
  padding: 0 7px;
  font-size: 12px;
  border-radius: 4px;
  height: 22px;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:hover,
.ant-calendar .ant-calendar-ok-btn:focus {
  color: #fff;
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn:focus > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn:active,
.ant-calendar .ant-calendar-ok-btn.active {
  color: #fff;
  background-color: #0e77ca;
  border-color: #0e77ca;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn.disabled,
.ant-calendar .ant-calendar-ok-btn[disabled],
.ant-calendar .ant-calendar-ok-btn.disabled:hover,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover,
.ant-calendar .ant-calendar-ok-btn.disabled:focus,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus,
.ant-calendar .ant-calendar-ok-btn.disabled:active,
.ant-calendar .ant-calendar-ok-btn[disabled]:active,
.ant-calendar .ant-calendar-ok-btn.disabled.active,
.ant-calendar .ant-calendar-ok-btn[disabled].active {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn.disabled > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled] > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:hover > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:focus > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled]:active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn.disabled.active > a:only-child:after,
.ant-calendar .ant-calendar-ok-btn[disabled].active > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
  cursor: not-allowed;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #f7f7f7;
  border-color: #d9d9d9;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child {
  color: currentColor;
}
.ant-calendar .ant-calendar-ok-btn-disabled:hover > a:only-child:after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  background: transparent;
}
.ant-calendar-range-picker-input {
  background-color: transparent;
  border: 0;
  height: 99%;
  outline: 0;
  width: 43%;
  text-align: center;
  vertical-align: top;
}
.ant-calendar-range-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range-picker-input[disabled] {
  cursor: not-allowed;
}
.ant-calendar-range-picker-separator {
  color: rgba(0, 0, 0, 0.43);
  width: 8px;
  display: inline-block;
  line-height: 18px;
  vertical-align: top;
}
.ant-calendar-range {
  width: 470px;
  overflow: hidden;
}
.ant-calendar-range .ant-calendar-date-panel::after {
  content: ".";
  display: block;
  height: 0;
  clear: both;
  visibility: hidden;
}
.ant-calendar-range-part {
  width: 50%;
  position: relative;
}
.ant-calendar-range-left {
  float: left;
}
.ant-calendar-range-left .ant-calendar-time-picker-inner {
  border-right: 2px solid #e9e9e9;
}
.ant-calendar-range-right {
  float: right;
}
.ant-calendar-range-right .ant-calendar-time-picker-inner {
  border-left: 2px solid #e9e9e9;
}
.ant-calendar-range-middle {
  position: absolute;
  left: 50%;
  width: 20px;
  margin-left: -132px;
  text-align: center;
  height: 34px;
  line-height: 34px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: -118px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-middle {
  margin-left: -12px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-range-right .ant-calendar-date-input-wrap {
  margin-left: 0;
}
.ant-calendar-range .ant-calendar-input-wrap {
  position: relative;
  height: 34px;
}
.ant-calendar-range .ant-calendar-input,
.ant-calendar-range .ant-calendar-time-picker-input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  height: 22px;
  border: 0;
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-input::-moz-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-calendar-range .ant-calendar-input:-ms-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input::-webkit-input-placeholder,
.ant-calendar-range .ant-calendar-time-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-calendar-range .ant-calendar-input:hover,
.ant-calendar-range .ant-calendar-time-picker-input:hover {
  border-color: #49a9ee;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-calendar-range .ant-calendar-input-disabled,
.ant-calendar-range .ant-calendar-time-picker-input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-range .ant-calendar-input-disabled:hover,
.ant-calendar-range .ant-calendar-time-picker-input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-calendar-range .ant-calendar-input,
textarea.ant-calendar-range .ant-calendar-time-picker-input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-calendar-range .ant-calendar-input-lg,
.ant-calendar-range .ant-calendar-time-picker-input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-calendar-range .ant-calendar-input-sm,
.ant-calendar-range .ant-calendar-time-picker-input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-calendar-range .ant-calendar-input:focus,
.ant-calendar-range .ant-calendar-time-picker-input:focus {
  box-shadow: none;
}
.ant-calendar-range .ant-calendar-time-picker-icon {
  display: none;
}
.ant-calendar-range.ant-calendar-week-number {
  width: 574px;
}
.ant-calendar-range.ant-calendar-week-number .ant-calendar-range-part {
  width: 286px;
}
.ant-calendar-range .ant-calendar-year-panel,
.ant-calendar-range .ant-calendar-month-panel {
  top: 34px;
}
.ant-calendar-range .ant-calendar-month-panel .ant-calendar-year-panel {
  top: 0;
}
.ant-calendar-range .ant-calendar-decade-panel-table,
.ant-calendar-range .ant-calendar-year-panel-table,
.ant-calendar-range .ant-calendar-month-panel-table {
  height: 208px;
}
.ant-calendar-range .ant-calendar-in-range-cell {
  border-radius: 0;
  position: relative;
}
.ant-calendar-range .ant-calendar-in-range-cell > div {
  position: relative;
  z-index: 1;
}
.ant-calendar-range .ant-calendar-in-range-cell:before {
  content: '';
  display: block;
  background: #ecf6fd;
  border-radius: 0;
  border: 0;
  position: absolute;
  top: 4px;
  bottom: 4px;
  left: 0;
  right: 0;
}
div.ant-calendar-range-quick-selector {
  text-align: left;
}
div.ant-calendar-range-quick-selector > a {
  margin-right: 8px;
}
.ant-calendar-range .ant-calendar-header,
.ant-calendar-range .ant-calendar-month-panel-header,
.ant-calendar-range .ant-calendar-year-panel-header {
  border-bottom: 0;
}
.ant-calendar-range .ant-calendar-body,
.ant-calendar-range .ant-calendar-month-panel-body,
.ant-calendar-range .ant-calendar-year-panel-body {
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker {
  height: 207px;
  width: 100%;
  top: 68px;
  z-index: 2;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 241px;
  margin-top: -34px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-inner {
  padding-top: 34px;
  height: 100%;
  background: none;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-combobox {
  display: inline-block;
  height: 100%;
  background-color: #fff;
  border-top: 1px solid #e9e9e9;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select {
  height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-time-picker-select ul {
  max-height: 100%;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  margin-right: 8px;
}
.ant-calendar-range.ant-calendar-time .ant-calendar-today-btn {
  margin: 8px 12px;
  height: 22px;
  line-height: 22px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker {
  height: 247px;
}
.ant-calendar-range-with-ranges.ant-calendar-time .ant-calendar-time-picker-panel {
  height: 281px;
}
.ant-calendar-range.ant-calendar-show-time-picker .ant-calendar-body {
  border-top-color: transparent;
}
.ant-calendar-time-picker {
  position: absolute;
  width: 100%;
  top: 34px;
  background-color: #fff;
}
.ant-calendar-time-picker-panel {
  z-index: 1050;
  position: absolute;
  width: 100%;
}
.ant-calendar-time-picker-inner {
  display: inline-block;
  position: relative;
  outline: none;
  list-style: none;
  font-size: 12px;
  text-align: left;
  background-color: #fff;
  background-clip: padding-box;
  line-height: 1.5;
  overflow: hidden;
  width: 100%;
}
.ant-calendar-time-picker-combobox {
  width: 100%;
}
.ant-calendar-time-picker-column-1,
.ant-calendar-time-picker-column-1 .ant-calendar-time-picker-select {
  width: 100%;
}
.ant-calendar-time-picker-column-2 .ant-calendar-time-picker-select {
  width: 50%;
}
.ant-calendar-time-picker-column-3 .ant-calendar-time-picker-select {
  width: 33.33%;
}
.ant-calendar-time-picker-column-4 .ant-calendar-time-picker-select {
  width: 25%;
}
.ant-calendar-time-picker-input-wrap {
  display: none;
}
.ant-calendar-time-picker-select {
  float: left;
  font-size: 12px;
  border-right: 1px solid #e9e9e9;
  box-sizing: border-box;
  overflow: hidden;
  position: relative;
  height: 206px;
}
.ant-calendar-time-picker-select:hover {
  overflow-y: auto;
}
.ant-calendar-time-picker-select:first-child {
  border-left: 0;
  margin-left: 0;
}
.ant-calendar-time-picker-select:last-child {
  border-right: 0;
}
.ant-calendar-time-picker-select ul {
  list-style: none;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  width: 100%;
  max-height: 206px;
}
.ant-calendar-time-picker-select li {
  text-align: center;
  list-style: none;
  box-sizing: content-box;
  margin: 0;
  width: 100%;
  height: 24px;
  line-height: 24px;
  cursor: pointer;
  user-select: none;
  transition: background 0.3s ease;
}
.ant-calendar-time-picker-select li:last-child:after {
  content: '';
  height: 182px;
  display: block;
}
.ant-calendar-time-picker-select li:hover {
  background: #ecf6fd;
}
li.ant-calendar-time-picker-select-option-selected {
  background: #f7f7f7;
  font-weight: bold;
}
li.ant-calendar-time-picker-select-option-disabled {
  color: rgba(0, 0, 0, 0.25);
}
li.ant-calendar-time-picker-select-option-disabled:hover {
  background: transparent;
  cursor: not-allowed;
}
.ant-calendar-time .ant-calendar-day-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-time .ant-calendar-footer {
  position: relative;
  height: auto;
  line-height: auto;
}
.ant-calendar-time .ant-calendar-footer-btn {
  text-align: right;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-today-btn {
  float: left;
  margin: 0;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn {
  display: inline-block;
  margin-right: 8px;
}
.ant-calendar-time .ant-calendar-footer .ant-calendar-time-picker-btn-disabled {
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-month-panel > div {
  height: 100%;
}
.ant-calendar-month-panel-hidden {
  display: none;
}
.ant-calendar-month-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-month-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-century-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-decade-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-year-select-arrow,
.ant-calendar-month-panel-header .ant-calendar-month-panel-month-select-arrow {
  display: none;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-century-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-decade-btn:after,
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-month-panel-header .ant-calendar-month-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-month-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-month-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-selected-cell .ant-calendar-month-panel-month:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-month-panel-cell {
  text-align: center;
}
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month,
.ant-calendar-month-panel-cell-disabled .ant-calendar-month-panel-month:hover {
  cursor: not-allowed;
  color: #bcbcbc;
  background: #f7f7f7;
}
.ant-calendar-month-panel-month {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-month-panel-month:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel {
  position: absolute;
  top: 1px;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  border-radius: 4px;
  background: #fff;
  outline: none;
}
.ant-calendar-year-panel > div {
  height: 100%;
}
.ant-calendar-year-panel-hidden {
  display: none;
}
.ant-calendar-year-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-year-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-century-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-decade-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-year-select-arrow,
.ant-calendar-year-panel-header .ant-calendar-year-panel-month-select-arrow {
  display: none;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-century-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-decade-btn:after,
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-year-panel-header .ant-calendar-year-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-year-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-year-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-year-panel-cell {
  text-align: center;
}
.ant-calendar-year-panel-year {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-year-panel-year:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-selected-cell .ant-calendar-year-panel-year:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-year-panel-last-decade-cell .ant-calendar-year-panel-year,
.ant-calendar-year-panel-next-decade-cell .ant-calendar-year-panel-year {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-decade-panel {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 10;
  background: #fff;
  border-radius: 4px;
  outline: none;
}
.ant-calendar-decade-panel-hidden {
  display: none;
}
.ant-calendar-decade-panel-header {
  height: 34px;
  line-height: 34px;
  text-align: center;
  user-select: none;
  border-bottom: 1px solid #e9e9e9;
}
.ant-calendar-decade-panel-header a:hover {
  color: #49a9ee;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select {
  padding: 0 2px;
  font-weight: bold;
  display: inline-block;
  color: rgba(0, 0, 0, 0.65);
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-century-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-decade-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-year-select-arrow,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-month-select-arrow {
  display: none;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  position: absolute;
  top: 0;
  color: rgba(0, 0, 0, 0.43);
  font-family: Arial, "Hiragino Sans GB", "Microsoft Yahei", "Microsoft Sans Serif", sans-serif;
  padding: 0 5px;
  font-size: 16px;
  display: inline-block;
  line-height: 34px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn {
  left: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-year-btn:after {
  content: '«';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn {
  right: 7px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-century-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-decade-btn:after,
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-year-btn:after {
  content: '»';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn {
  left: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-prev-month-btn:after {
  content: '‹';
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn {
  right: 29px;
}
.ant-calendar-decade-panel-header .ant-calendar-decade-panel-next-month-btn:after {
  content: '›';
}
.ant-calendar-decade-panel-body {
  height: calc(100% - 34px);
}
.ant-calendar-decade-panel-table {
  table-layout: fixed;
  width: 100%;
  height: 100%;
  border-collapse: separate;
}
.ant-calendar-decade-panel-cell {
  text-align: center;
  white-space: nowrap;
}
.ant-calendar-decade-panel-decade {
  display: inline-block;
  margin: 0 auto;
  color: rgba(0, 0, 0, 0.65);
  background: transparent;
  text-align: center;
  height: 24px;
  line-height: 24px;
  padding: 0 6px;
  border-radius: 4px;
  transition: background 0.3s ease;
}
.ant-calendar-decade-panel-decade:hover {
  background: #ecf6fd;
  cursor: pointer;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-selected-cell .ant-calendar-decade-panel-decade:hover {
  background: #108ee9;
  color: #fff;
}
.ant-calendar-decade-panel-last-century-cell .ant-calendar-decade-panel-decade,
.ant-calendar-decade-panel-next-century-cell .ant-calendar-decade-panel-decade {
  user-select: none;
  color: rgba(0, 0, 0, 0.25);
}
.ant-calendar-month .ant-calendar-month-panel,
.ant-calendar-month .ant-calendar-year-panel {
  top: 0;
  height: 248px;
}
.ant-calendar-picker-container {
  position: relative;
  left: -2px;
}
.ant-calendar-picker-container.top {
  bottom: -2px;
}
.ant-calendar-picker-container.bottom {
  top: -2px;
}
.ant-input > .ant-calendar-range-picker-input {
  background-color: transparent;
  border: 0;
  height: 99%;
  outline: 0;
  width: 43%;
  text-align: center;
  vertical-align: top;
}
.ant-input > .ant-calendar-range-picker-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input > .ant-calendar-range-picker-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input > .ant-calendar-range-picker-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input > .ant-calendar-range-picker-input[disabled] {
  cursor: not-allowed;
}
.ant-input > .ant-calendar-range-picker-input:focus {
  border: 0;
  box-shadow: none;
}
.ant-calendar-time-picker-body {
  height: 247px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzRangePickerComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
    { type: NzLocaleService, },
];
NzRangePickerComponent.propDecorators = {
    "trigger": [{ type: ViewChild, args: ['trigger',] },],
    "nzSize": [{ type: Input },],
    "nzFormat": [{ type: Input },],
    "nzAllowClear": [{ type: Input },],
    "nzPlaceholder": [{ type: Input },],
    "timePickerInner": [{ type: ViewChildren, args: [NzTimePickerInnerComponent,] },],
    "nzShowTime": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "nzDisabledDate": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDatePickerModule {
}
NzDatePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, NzTimePickerModule, NzUtilModule, NzInputModule, NzCalendarModule, FormsModule, OverlayModule, NzLocaleModule],
                declarations: [NzDatePickerComponent, NzRangePickerComponent],
                exports: [NzDatePickerComponent, NzRangePickerComponent]
            },] },
];
/** @nocollapse */
NzDatePickerModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMenuDividerComponent {
}
NzMenuDividerComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu-divider]',
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    '[class.ant-dropdown-menu-item-divider]': 'true'
                }
            },] },
];
/** @nocollapse */
NzMenuDividerComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMenuGroupComponent {
}
NzMenuGroupComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu-group]',
                template: `
    <div class="ant-menu-item-group-title">
      <ng-content select="[title]"></ng-content>
    </div>
    <ul class="ant-menu-item-group-list">
      <ng-content></ng-content>
    </ul>
  `,
                host: {
                    '[class.ant-menu-item-group]': 'true'
                }
            },] },
];
/** @nocollapse */
NzMenuGroupComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMenuComponent {
    constructor() {
        this._clickActive = true;
        this._inlineCollapsed = false;
        /**
         * set when has submenu component
         */
        this.hasSubMenu = false;
        /**
         * set when in dropdown component
         */
        this.isInDropDown = false;
        /**
         * collection of menu item
         */
        this.menuItems = [];
        /**
         * collection of sub menu
         */
        this.subMenus = [];
        /**
         * view init flat
         */
        this.isInit = false;
        /**
         * opened index of array
         */
        this._subMenusOpenIndex = [];
        this.nzMode = 'vertical';
        this.nzTheme = 'light';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClickActive(value) {
        this._clickActive = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzClickActive() {
        return this._clickActive;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzInlineCollapsed(value) {
        const /** @type {?} */ state$$1 = toBoolean(value);
        this._inlineCollapsed = state$$1;
        if (!this.isInit) {
            return;
        }
        if (this._inlineCollapsed) {
            this.hideSubMenus();
            // after the animation is over
            setTimeout(() => this.nzMode = 'vertical', 150);
        }
        else {
            this.reductionSubMenus();
            this.nzMode = this._tempMode;
        }
    }
    /**
     * @return {?}
     */
    get nzInlineCollapsed() {
        return this._inlineCollapsed;
    }
    /**
     * define host class
     * @return {?}
     */
    get _isInDropDownClass() {
        return this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get _isNotInDropDownClass() {
        return !this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setDropDownThemeLightClass() {
        return this.isInDropDown && (this.nzTheme === 'light');
    }
    /**
     * @return {?}
     */
    get setDropDownThemeDarkClass() {
        return this.isInDropDown && (this.nzTheme === 'dark');
    }
    /**
     * @return {?}
     */
    get setMenuThemeLightClass() {
        return (!this.isInDropDown) && (this.nzTheme === 'light');
    }
    /**
     * @return {?}
     */
    get setMenuThemeDarkClass() {
        return (!this.isInDropDown) && (this.nzTheme === 'dark');
    }
    /**
     * @return {?}
     */
    get setMenuVerticalClass() {
        return (!this.isInDropDown) && (this.nzMode === 'vertical');
    }
    /**
     * @return {?}
     */
    get setMenuHorizontalClass() {
        return (!this.isInDropDown) && (this.nzMode === 'horizontal');
    }
    /**
     * @return {?}
     */
    get setMenuInlineClass() {
        return (!this.isInDropDown) && (this.nzMode === 'inline');
    }
    /**
     * @return {?}
     */
    get setMenuInlineCollapsedClass() {
        return (!this.isInDropDown) && (this.nzMode !== 'horizontal') && this.nzInlineCollapsed;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        for (const /** @type {?} */ propName in changes) {
            if (propName === 'nzMode') {
                if (this.isInit) {
                    this.subMenus.forEach(submenu => {
                        submenu.nzOpen = false;
                        submenu.nzOpenChange.emit(false);
                    });
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.isInit = true;
        this._tempMode = this.nzMode;
    }
    /**
     * trigger when menu item clicked
     * @return {?}
     */
    clearAllSelected() {
        this.menuItems.forEach(menu => menu.nzSelected = false);
    }
    /**
     * @return {?}
     */
    hideSubMenus() {
        this._subMenusOpenIndex = [];
        this.subMenus.forEach((submenu, index) => {
            if (submenu.nzOpen) {
                this._subMenusOpenIndex.push(index);
            }
            submenu.nzOpen = false;
        });
    }
    /**
     * @return {?}
     */
    reductionSubMenus() {
        this._subMenusOpenIndex.forEach(i => this.subMenus[i].nzOpen = true);
        this._subMenusOpenIndex = [];
    }
    /**
     * api for dropdown or navigation to set isInDropDown status
     * @param {?} value
     * @return {?}
     */
    setDropDown(value) {
        setTimeout(_ => {
            this.isInDropDown = value;
            this.menuItems.forEach(menu => menu.isInDropDown = value);
            this.subMenus.forEach(subMenu => subMenu.isInDropDown = value);
        });
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setHasSubMenu(value) {
        setTimeout(_ => {
            this.hasSubMenu = value;
        });
    }
}
NzMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-menu {
  outline: none;
  margin-bottom: 0;
  padding-left: 0;
  list-style: none;
  z-index: 1050;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  color: rgba(0, 0, 0, 0.65);
  background: #fff;
  line-height: 46px;
  transition: background .3s, width .2s;
}
.ant-menu-hidden {
  display: none;
}
.ant-menu-item-group-list {
  margin: 0;
  padding: 0;
}
.ant-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  font-size: 12px;
  line-height: 1.5;
  padding: 8px 16px;
  transition: all .3s;
}
.ant-menu-item,
.ant-menu-submenu,
.ant-menu-submenu-title {
  cursor: pointer;
}
.ant-menu-submenu,
.ant-menu-submenu-inline {
  transition: border-color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), padding 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item,
.ant-menu-submenu-title {
  transition: color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), border-color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), padding 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item:active,
.ant-menu-submenu-title:active {
  background: #ecf6fd;
}
.ant-menu-submenu .ant-menu-sub {
  cursor: initial;
  transition: background 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item > a {
  display: block;
  color: rgba(0, 0, 0, 0.65);
}
.ant-menu-item > a:hover {
  color: #108ee9;
}
.ant-menu-item > a:focus {
  text-decoration: none;
}
.ant-menu-item > a:before {
  position: absolute;
  background-color: transparent;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  content: '';
}
.ant-menu-item-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-menu-item:hover,
.ant-menu-item-active,
.ant-menu:not(.ant-menu-inline) .ant-menu-submenu-open,
.ant-menu-submenu-active,
.ant-menu-submenu-title:hover {
  color: #108ee9;
}
.ant-menu:not(.ant-menu-inline) .ant-menu-submenu-open {
  z-index: 1050;
}
.ant-menu-horizontal .ant-menu-item,
.ant-menu-horizontal .ant-menu-submenu {
  margin-top: -1px;
}
.ant-menu-horizontal > .ant-menu-item:hover,
.ant-menu-horizontal > .ant-menu-item-active,
.ant-menu-horizontal > .ant-menu-submenu .ant-menu-submenu-title:hover {
  background-color: transparent;
}
.ant-menu-item-selected {
  color: #108ee9;
}
.ant-menu-item-selected > a,
.ant-menu-item-selected > a:hover {
  color: #108ee9;
}
.ant-menu:not(.ant-menu-horizontal) .ant-menu-item-selected {
  background-color: #ecf6fd;
}
.ant-menu-horizontal,
.ant-menu-inline,
.ant-menu-vertical {
  z-index: auto;
}
.ant-menu-inline,
.ant-menu-vertical {
  border-right: 1px solid #e9e9e9;
}
.ant-menu-inline .ant-menu-item,
.ant-menu-vertical .ant-menu-item {
  margin-left: -1px;
  left: 1px;
  position: relative;
  z-index: 1;
}
.ant-menu-inline .ant-menu-item:after,
.ant-menu-vertical .ant-menu-item:after {
  content: "";
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  border-right: 3px solid #108ee9;
  transform: scaleY(0.0001);
  opacity: 0;
  transition: transform 0.15s cubic-bezier(0.215, 0.61, 0.355, 1), opacity 0.15s cubic-bezier(0.215, 0.61, 0.355, 1);
}
.ant-menu-vertical.ant-menu-sub {
  border-right: 0;
}
.ant-menu-vertical.ant-menu-sub .ant-menu-item {
  border-right: 0;
  margin-left: 0;
  left: 0;
}
.ant-menu-vertical.ant-menu-sub .ant-menu-item:after {
  border-right: 0;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item:first-child {
  border-radius: 4px 4px 0 0;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item:last-child,
.ant-menu-vertical.ant-menu-sub > .ant-menu-item-group:last-child > .ant-menu-item-group-list:last-child > .ant-menu-item:last-child {
  border-radius: 0 0 4px 4px;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item:only-child {
  border-radius: 4px;
}
.ant-menu-inline {
  width: 100%;
}
.ant-menu-inline .ant-menu-selected:after,
.ant-menu-inline .ant-menu-item-selected:after {
  transition: transform 0.15s cubic-bezier(0.645, 0.045, 0.355, 1), opacity 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
  opacity: 1;
  transform: scaleY(1);
}
.ant-menu-submenu-horizontal > .ant-menu {
  top: 100%;
  left: 0;
  position: absolute;
  min-width: 100%;
  margin-top: 7px;
  z-index: 1050;
}
.ant-menu-submenu-vertical {
  z-index: 1;
}
.ant-menu-submenu-vertical > .ant-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 160px;
  margin-left: 4px;
  z-index: 1050;
}
.ant-menu-item,
.ant-menu-submenu-title {
  margin: 0;
  padding: 0 20px;
  position: relative;
  display: block;
  white-space: nowrap;
}
.ant-menu-item .anticon,
.ant-menu-submenu-title .anticon {
  min-width: 14px;
  margin-right: 8px;
  transition: font-size 0.15s cubic-bezier(0.215, 0.61, 0.355, 1), margin 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-item .anticon + span,
.ant-menu-submenu-title .anticon + span {
  transition: opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  opacity: 1;
}
.ant-menu > .ant-menu-item-divider {
  height: 1px;
  margin: 1px 0;
  overflow: hidden;
  padding: 0;
  line-height: 0;
  background-color: #e9e9e9;
}
.ant-menu-submenu {
  position: relative;
}
.ant-menu-submenu > .ant-menu {
  background-color: #fff;
  border-radius: 4px;
}
.ant-menu-submenu > .ant-menu-submenu-title:after {
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-menu-submenu-vertical > .ant-menu-submenu-title:after {
  font-family: "anticon" !important;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  position: absolute;
  content: "\\e61d";
  right: 16px;
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";
  transform: rotate(270deg) scale(0.75);
}
.ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  font-family: "anticon" !important;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  position: absolute;
  content: "\\e61d";
  right: 16px;
  top: 0;
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  filter: none;
}
:root .ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  font-size: 12px;
}
.ant-menu-submenu-open.ant-menu-submenu-inline > .ant-menu-submenu-title:after {
  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";
  transform: rotate(180deg) scale(0.75);
}
.ant-menu-vertical .ant-menu-submenu-selected {
  color: #108ee9;
}
.ant-menu-vertical .ant-menu-submenu-selected > a {
  color: #108ee9;
}
.ant-menu-horizontal {
  border: 0;
  border-bottom: 1px solid #e9e9e9;
  box-shadow: none;
  z-index: 0;
}
.ant-menu-horizontal > .ant-menu-item,
.ant-menu-horizontal > .ant-menu-submenu {
  position: relative;
  top: 1px;
  float: left;
  border-bottom: 2px solid transparent;
}
.ant-menu-horizontal > .ant-menu-item:hover,
.ant-menu-horizontal > .ant-menu-submenu:hover,
.ant-menu-horizontal > .ant-menu-item-active,
.ant-menu-horizontal > .ant-menu-submenu-active,
.ant-menu-horizontal > .ant-menu-item-open,
.ant-menu-horizontal > .ant-menu-submenu-open,
.ant-menu-horizontal > .ant-menu-item-selected,
.ant-menu-horizontal > .ant-menu-submenu-selected {
  border-bottom: 2px solid #108ee9;
  color: #108ee9;
}
.ant-menu-horizontal > .ant-menu-item > a,
.ant-menu-horizontal > .ant-menu-submenu > a {
  display: block;
  color: rgba(0, 0, 0, 0.65);
}
.ant-menu-horizontal > .ant-menu-item > a:hover,
.ant-menu-horizontal > .ant-menu-submenu > a:hover {
  color: #108ee9;
}
.ant-menu-horizontal:after {
  content: "\\20";
  display: block;
  height: 0;
  clear: both;
}
.ant-menu-vertical .ant-menu-item,
.ant-menu-inline .ant-menu-item,
.ant-menu-vertical .ant-menu-submenu-title,
.ant-menu-inline .ant-menu-submenu-title {
  padding: 0 16px;
  font-size: 12px;
  line-height: 42px;
  height: 42px;
  overflow: hidden;
  text-overflow: ellipsis;
}
.ant-menu-inline-collapsed {
  width: 64px;
}
.ant-menu-inline-collapsed > .ant-menu-item,
.ant-menu-inline-collapsed > .ant-menu-item-group > .ant-menu-item-group-list > .ant-menu-item,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title {
  left: 0;
  text-overflow: clip;
  padding: 0 24px !important;
}
.ant-menu-inline-collapsed > .ant-menu-item:after,
.ant-menu-inline-collapsed > .ant-menu-item-group > .ant-menu-item-group-list > .ant-menu-item:after,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title:after {
  display: none;
}
.ant-menu-inline-collapsed > .ant-menu-item .anticon,
.ant-menu-inline-collapsed > .ant-menu-item-group > .ant-menu-item-group-list > .ant-menu-item .anticon,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title .anticon {
  font-size: 16px;
  line-height: 42px;
  margin: 0;
}
.ant-menu-inline-collapsed > .ant-menu-item .anticon + span,
.ant-menu-inline-collapsed > .ant-menu-item-group > .ant-menu-item-group-list > .ant-menu-item .anticon + span,
.ant-menu-inline-collapsed > .ant-menu-submenu > .ant-menu-submenu-title .anticon + span {
  max-width: 0;
  display: inline-block;
  opacity: 0;
}
.ant-menu-inline-collapsed-tooltip {
  pointer-events: none;
}
.ant-menu-inline-collapsed-tooltip .anticon {
  display: none;
}
.ant-menu-inline-collapsed-tooltip a {
  color: rgba(255, 255, 255, 0.91);
}
.ant-menu-inline-collapsed .ant-menu-item-group-title {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding-left: 4px;
  padding-right: 4px;
}
.ant-menu-item-group-list .ant-menu-item,
.ant-menu-item-group-list .ant-menu-submenu-title {
  padding: 0 16px 0 28px;
}
.ant-menu-vertical.ant-menu-sub {
  padding: 0;
  transform-origin: 0 0;
}
.ant-menu-vertical.ant-menu-sub > .ant-menu-item,
.ant-menu-vertical.ant-menu-sub > .ant-menu-submenu {
  transform-origin: 0 0;
}
.ant-menu-root.ant-menu-vertical,
.ant-menu-root.ant-menu-inline {
  box-shadow: none;
}
.ant-menu-sub.ant-menu-inline {
  padding: 0;
  border: 0;
  box-shadow: none;
  border-radius: 0;
}
.ant-menu-sub.ant-menu-inline > .ant-menu-item,
.ant-menu-sub.ant-menu-inline > .ant-menu-submenu > .ant-menu-submenu-title {
  line-height: 42px;
  height: 42px;
  list-style-type: disc;
  list-style-position: inside;
}
.ant-menu-sub.ant-menu-inline .ant-menu-item-group-title {
  padding-left: 32px;
}
.ant-menu-item-disabled,
.ant-menu-submenu-disabled {
  color: rgba(0, 0, 0, 0.25) !important;
  cursor: not-allowed;
  background: none;
  border-color: transparent !important;
}
.ant-menu-item-disabled > a,
.ant-menu-submenu-disabled > a {
  color: rgba(0, 0, 0, 0.25) !important;
  pointer-events: none;
}
.ant-menu-item-disabled > .ant-menu-submenu-title,
.ant-menu-submenu-disabled > .ant-menu-submenu-title {
  color: rgba(0, 0, 0, 0.25) !important;
  cursor: not-allowed;
}
.ant-menu-dark,
.ant-menu-dark .ant-menu-sub {
  color: rgba(255, 255, 255, 0.67);
  background: #404040;
}
.ant-menu-dark .ant-menu-inline.ant-menu-sub {
  background: #333;
}
.ant-menu-dark.ant-menu-horizontal {
  border-bottom-color: #404040;
}
.ant-menu-dark.ant-menu-horizontal > .ant-menu-item,
.ant-menu-dark.ant-menu-horizontal > .ant-menu-submenu {
  border-color: #404040;
  border-bottom: 0;
}
.ant-menu-dark .ant-menu-item,
.ant-menu-dark .ant-menu-item-group-title,
.ant-menu-dark .ant-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-menu-dark.ant-menu-inline,
.ant-menu-dark.ant-menu-vertical {
  border-right: 0;
}
.ant-menu-dark.ant-menu-inline .ant-menu-item,
.ant-menu-dark.ant-menu-vertical .ant-menu-item {
  border-right: 0;
  margin-left: 0;
  left: 0;
}
.ant-menu-dark.ant-menu-inline .ant-menu-item:after,
.ant-menu-dark.ant-menu-vertical .ant-menu-item:after {
  border-right: 0;
}
.ant-menu-dark .ant-menu-item:hover,
.ant-menu-dark .ant-menu-item-active,
.ant-menu-dark .ant-menu-submenu-active,
.ant-menu-dark:not(.ant-menu-inline) .ant-menu-submenu-open,
.ant-menu-dark .ant-menu-submenu-selected,
.ant-menu-dark .ant-menu-submenu-title:hover {
  background-color: transparent;
  color: #fff;
}
.ant-menu-dark .ant-menu-item:hover > a,
.ant-menu-dark .ant-menu-item-active > a,
.ant-menu-dark .ant-menu-submenu-active > a,
.ant-menu-dark:not(.ant-menu-inline) .ant-menu-submenu-open > a,
.ant-menu-dark .ant-menu-submenu-selected > a,
.ant-menu-dark .ant-menu-submenu-title:hover > a {
  color: #fff;
}
.ant-menu-dark .ant-menu-item-selected {
  border-right: 0;
  color: #fff;
}
.ant-menu-dark .ant-menu-item-selected:after {
  border-right: 0;
}
.ant-menu-dark .ant-menu-item-selected > a,
.ant-menu-dark .ant-menu-item-selected > a:hover {
  color: #fff;
}
.ant-menu.ant-menu-dark .ant-menu-item-selected {
  background-color: #108ee9;
}
.ant-menu-dark .ant-menu-item-disabled,
.ant-menu-dark .ant-menu-submenu-disabled,
.ant-menu-dark .ant-menu-item-disabled > a,
.ant-menu-dark .ant-menu-submenu-disabled > a {
  opacity: 0.8;
  color: rgba(255, 255, 255, 0.35) !important;
}
.ant-menu-dark .ant-menu-item-disabled > .ant-menu-submenu-title,
.ant-menu-dark .ant-menu-submenu-disabled > .ant-menu-submenu-title {
  color: rgba(255, 255, 255, 0.35) !important;
}
`
                ]
            },] },
];
/** @nocollapse */
NzMenuComponent.ctorParameters = () => [];
NzMenuComponent.propDecorators = {
    "nzMode": [{ type: Input },],
    "nzTheme": [{ type: Input },],
    "nzClickActive": [{ type: Input },],
    "nzInlineCollapsed": [{ type: Input },],
    "_isInDropDownClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu',] }, { type: HostBinding, args: ['class.ant-menu-dropdown-vertical',] }, { type: HostBinding, args: ['class.ant-dropdown-menu-root',] },],
    "_isNotInDropDownClass": [{ type: HostBinding, args: ['class.ant-menu',] }, { type: HostBinding, args: ['class.ant-menu-root',] },],
    "setDropDownThemeLightClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-light',] },],
    "setDropDownThemeDarkClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-dark',] },],
    "setMenuThemeLightClass": [{ type: HostBinding, args: ['class.ant-menu-light',] },],
    "setMenuThemeDarkClass": [{ type: HostBinding, args: ['class.ant-menu-dark',] },],
    "setMenuVerticalClass": [{ type: HostBinding, args: ['class.ant-menu-vertical',] },],
    "setMenuHorizontalClass": [{ type: HostBinding, args: ['class.ant-menu-horizontal',] },],
    "setMenuInlineClass": [{ type: HostBinding, args: ['class.ant-menu-inline',] },],
    "setMenuInlineCollapsedClass": [{ type: HostBinding, args: ['class.ant-menu-inline-collapsed',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSubMenuComponent {
    /**
     * @param {?} nzMenuComponent
     * @param {?} cd
     */
    constructor(nzMenuComponent, cd) {
        this.nzMenuComponent = nzMenuComponent;
        this.cd = cd;
        this._open = false;
        this.isInDropDown = false;
        this.level = 1;
        this._$mouseSubject = new Subject$1();
        this.nzOpenChange = new EventEmitter();
        this.nzMenuComponent.setHasSubMenu(true);
        this.nzMenuComponent.subMenus.push(this);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOpen(value) {
        this._open = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzOpen() {
        return this._open;
    }
    /**
     * @return {?}
     */
    get subItemSelected() {
        return !!this.nzMenuComponent.menuItems.find(e => e.nzSelected && e.nzSubMenuComponent === this);
    }
    /**
     * @return {?}
     */
    get submenuSelected() {
        return !!this.subMenus._results.find(e => e !== this && e.subItemSelected);
    }
    /**
     * @return {?}
     */
    get expandState() {
        if (this.nzOpen && this.nzMenuComponent.nzMode === 'inline') {
            return 'expand';
        }
        else if (this.nzOpen && this.nzMenuComponent.nzMode !== 'inline') {
            return 'fade';
        }
        return null;
    }
    /**
     * @return {?}
     */
    clickSubMenuTitle() {
        if ((this.nzMenuComponent.nzMode === 'inline') && (!this.isInDropDown)) {
            this.nzOpen = !this.nzOpen;
            this.nzOpenChange.emit(this.nzOpen);
        }
    }
    /**
     * @return {?}
     */
    clickSubMenuDropDown() {
        if (this.isInDropDown || (this.nzMenuComponent.nzMode === 'vertical') || (this.nzMenuComponent.nzMode === 'horizontal')) {
            this._$mouseSubject.next(false);
            this.nzOpen = false;
            this.nzOpenChange.emit(this.nzOpen);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseEnterEvent(e) {
        if ((this.nzMenuComponent.nzMode === 'horizontal') || (this.nzMenuComponent.nzMode === 'vertical') || this.isInDropDown) {
            this._$mouseSubject.next(true);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onMouseLeaveEvent(e) {
        if ((this.nzMenuComponent.nzMode === 'horizontal') || (this.nzMenuComponent.nzMode === 'vertical') || this.isInDropDown) {
            this._$mouseSubject.next(false);
        }
    }
    /**
     * @return {?}
     */
    get setDropDownSubmenuClass() {
        return this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setMenuSubmenuOpenClass() {
        return (!this.isInDropDown) && (this.nzOpen);
    }
    /**
     * @return {?}
     */
    get setDropDownVerticalClass() {
        return this.isInDropDown && (this.nzMenuComponent.nzMode === 'vertical');
    }
    /**
     * @return {?}
     */
    get setDropDownHorizontalClass() {
        return this.isInDropDown && (this.nzMenuComponent.nzMode === 'horizontal');
    }
    /**
     * @return {?}
     */
    get setMenuSubmenuClass() {
        return !this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setMenuSubmenuSelectedClass() {
        return this.submenuSelected || this.subItemSelected;
    }
    /**
     * @return {?}
     */
    get setMenuVerticalClass() {
        return (!this.isInDropDown) && (this.nzMenuComponent.nzMode === 'vertical');
    }
    /**
     * @return {?}
     */
    get setMenuHorizontalClass() {
        return (!this.isInDropDown) && (this.nzMenuComponent.nzMode === 'horizontal');
    }
    /**
     * @return {?}
     */
    get setMenuInlineClass() {
        return (!this.isInDropDown) && (this.nzMenuComponent.nzMode === 'inline');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.isInDropDown = this.nzMenuComponent.isInDropDown;
        if (this.subMenus.length && (this.nzMenuComponent.nzMode === 'inline')) {
            this.subMenus.filter(x => x !== this).forEach(menu => {
                setTimeout(_ => {
                    menu.level = this.level + 1;
                });
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._$mouseSubject.pipe(debounceTime$1(300)).subscribe((data) => {
            if (this.nzOpen !== data) {
                this.nzOpen = data;
                this.nzOpenChange.emit(this.nzOpen);
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._$mouseSubject.unsubscribe();
    }
}
NzSubMenuComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-submenu]',
                animations: [
                    trigger('expandAnimation', [
                        state('fade', style({ opacity: 1 })),
                        transition('expand => void', [
                            style({ height: '*', overflow: 'hidden' }),
                            animate(150, style({ height: 0 }))
                        ]),
                        transition('void => expand', [
                            style({ height: 0, overflow: 'hidden' }),
                            animate(150, style({ height: '*' }))
                        ]),
                        transition('fade => void', [
                            animate(150, style({ opacity: 0 }))
                        ]),
                        transition('void => fade', [
                            style({ opacity: '0' }),
                            animate(150, style({ opacity: 1 }))
                        ])
                    ])
                ],
                template: `
    <div
      [class.ant-dropdown-menu-submenu-title]="isInDropDown"
      [class.ant-menu-submenu-title]="!isInDropDown"
      (mouseenter)="onMouseEnterEvent($event)"
      (mouseleave)="onMouseLeaveEvent($event)"
      (click)="clickSubMenuTitle()"
      [style.paddingLeft.px]="(nzMenuComponent.nzMode === 'inline')?(level*24):null">
      <ng-content select="[title]"></ng-content>
    </div>
    <ul
      [class.ant-dropdown-menu]="isInDropDown"
      [@expandAnimation]="expandState"
      [class.ant-menu]="!isInDropDown"
      [class.ant-dropdown-menu-vertical]="isInDropDown"
      [class.ant-menu-vertical]="(!isInDropDown)&&(nzMenuComponent.nzMode!=='inline')"
      [class.ant-menu-inline]="(!isInDropDown)&&(nzMenuComponent.nzMode==='inline')"
      [class.ant-dropdown-menu-sub]="isInDropDown"
      [class.ant-menu-sub]="!isInDropDown"
      *ngIf="nzOpen"
      (click)="clickSubMenuDropDown()"
      (mouseleave)="onMouseLeaveEvent($event)"
      (mouseenter)="onMouseEnterEvent($event)">
      <ng-content></ng-content>
    </ul>
  `,
            },] },
];
/** @nocollapse */
NzSubMenuComponent.ctorParameters = () => [
    { type: NzMenuComponent, },
    { type: ChangeDetectorRef, },
];
NzSubMenuComponent.propDecorators = {
    "subMenus": [{ type: ContentChildren, args: [NzSubMenuComponent,] },],
    "nzOpenChange": [{ type: Output },],
    "nzOpen": [{ type: Input },],
    "onMouseEnterEvent": [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    "onMouseLeaveEvent": [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
    "setDropDownSubmenuClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-submenu',] },],
    "setMenuSubmenuOpenClass": [{ type: HostBinding, args: ['class.ant-menu-submenu-open',] },],
    "setDropDownVerticalClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-submenu-vertical',] },],
    "setDropDownHorizontalClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-submenu-horizontal',] },],
    "setMenuSubmenuClass": [{ type: HostBinding, args: ['class.ant-menu-submenu',] },],
    "setMenuSubmenuSelectedClass": [{ type: HostBinding, args: ['class.ant-menu-submenu-selected',] },],
    "setMenuVerticalClass": [{ type: HostBinding, args: ['class.ant-menu-submenu-vertical',] },],
    "setMenuHorizontalClass": [{ type: HostBinding, args: ['class.ant-menu-submenu-horizontal',] },],
    "setMenuInlineClass": [{ type: HostBinding, args: ['class.ant-menu-submenu-inline',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const PADDING_BASE = 24;
class NzMenuItemComponent {
    /**
     * @param {?} _renderer
     * @param {?} cd
     * @param {?} nzMenuComponent
     * @param {?} nzSubMenuComponent
     * @param {?} hostElement
     */
    constructor(_renderer, cd, nzMenuComponent, nzSubMenuComponent, hostElement) {
        this._renderer = _renderer;
        this.cd = cd;
        this.nzMenuComponent = nzMenuComponent;
        this.nzSubMenuComponent = nzSubMenuComponent;
        this.hostElement = hostElement;
        this._disabled = false;
        this._selected = false;
        this.level = 0;
        this.padding = null;
        this.isInDropDown = false;
        this.nzMenuComponent.menuItems.push(this);
        /** store origin padding in padding */
        if (this.hostElement.nativeElement.style['padding-left']) {
            this.padding = parseInt(this.hostElement.nativeElement.style['padding-left'], 10);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisable(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisable() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSelected(value) {
        this._selected = toBoolean(value);
        if (this._selected) {
            this._renderer.addClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');
        }
        else {
            this._renderer.removeClass(this.hostElement.nativeElement, this.isInDropDown ? 'ant-dropdown-menu-item-selected' : 'ant-menu-item-selected');
        }
    }
    /**
     * @return {?}
     */
    get nzSelected() {
        return this._selected;
    }
    /**
     * clear all item selected status except this
     * @return {?}
     */
    _onClickItem() {
        if (this.nzMenuComponent.nzClickActive && (!this.nzDisable)) {
            this.nzMenuComponent.clearAllSelected();
            this.nzSelected = true;
        }
    }
    /**
     * define host class
     * @return {?}
     */
    get _isInDropDownClass() {
        return this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get _isNotInDropDownClass() {
        return !this.isInDropDown;
    }
    /**
     * @return {?}
     */
    get setDropDownDisableClass() {
        return this.isInDropDown && this.nzDisable;
    }
    /**
     * @return {?}
     */
    get setMenuDisableClass() {
        return (!this.isInDropDown) && this.nzDisable;
    }
    /**
     * @return {?}
     */
    get setPaddingLeft() {
        if (this.nzSubMenuComponent) {
            /** if in sub menu component */
            if (this.nzSubMenuComponent.nzMenuComponent.nzMode === 'inline') {
                /** if host menu's mode is inline add PADDING_BASE * level padding */
                return (this.nzSubMenuComponent.level + 1) * PADDING_BASE;
            }
            else {
                /** return origin padding */
                return this.padding;
            }
        }
        else if (this.nzMenuComponent.hasSubMenu && (this.nzMenuComponent.nzMode === 'inline')) {
            /** not in sub menu component but root menu's mode is inline and contains submenu return default padding*/
            return PADDING_BASE;
        }
        else {
            return this.padding;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(_ => {
            this.isInDropDown = this.nzMenuComponent.isInDropDown;
        });
    }
}
NzMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-menu-item]',
                template: `
    <ng-content></ng-content>`,
            },] },
];
/** @nocollapse */
NzMenuItemComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
    { type: NzMenuComponent, },
    { type: NzSubMenuComponent, decorators: [{ type: Optional },] },
    { type: ElementRef, },
];
NzMenuItemComponent.propDecorators = {
    "nzDisable": [{ type: Input },],
    "nzSelected": [{ type: Input },],
    "_onClickItem": [{ type: HostListener, args: ['click', ['$event'],] },],
    "_isInDropDownClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-item',] },],
    "_isNotInDropDownClass": [{ type: HostBinding, args: ['class.ant-menu-item',] },],
    "setDropDownDisableClass": [{ type: HostBinding, args: ['class.ant-dropdown-menu-item-disabled',] },],
    "setMenuDisableClass": [{ type: HostBinding, args: ['class.ant-menu-item-disabled',] },],
    "setPaddingLeft": [{ type: HostBinding, args: ['style.padding-left.px',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMenuModule {
}
NzMenuModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, NzButtonModule],
                declarations: [NzMenuComponent, NzMenuItemComponent, NzSubMenuComponent, NzMenuDividerComponent, NzMenuGroupComponent],
                exports: [NzMenuComponent, NzMenuItemComponent, NzSubMenuComponent, NzMenuDividerComponent, NzMenuGroupComponent]
            },] },
];
/** @nocollapse */
NzMenuModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDropDownDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
}
NzDropDownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-dropdown]',
                host: {
                    '[class.ant-dropdown-trigger]': 'true'
                }
            },] },
];
/** @nocollapse */
NzDropDownDirective.ctorParameters = () => [
    { type: ElementRef, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDropDownComponent {
    /**
     * @param {?} _renderer
     * @param {?} _changeDetector
     */
    constructor(_renderer, _changeDetector) {
        this._renderer = _renderer;
        this._changeDetector = _changeDetector;
        this._clickHide = true;
        this._visible = false;
        this.hasFilterButton = false;
        this._triggerWidth = 0;
        this._placement = 'bottomLeft';
        this._dropDownPosition = 'bottom';
        this._positions = [...DEFAULT_DROPDOWN_POSITIONS];
        this.nzTrigger = 'hover';
        this._visibleChange = new Subject$1();
        this.nzVisibleChange = new EventEmitter();
        this._onVisibleChange = (visible) => {
            if (visible) {
                this._setTriggerWidth();
            }
            if (this.nzVisible !== visible) {
                this.nzVisible = visible;
                this.nzVisibleChange.emit(this.nzVisible);
            }
            this._changeDetector.markForCheck();
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClickHide(value) {
        this._clickHide = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzClickHide() {
        return this._clickHide;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        this._visible = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzVisible() {
        return this._visible;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPlacement(value) {
        this._placement = value;
        this._dropDownPosition = (this.nzPlacement.indexOf('top') !== -1) ? 'top' : 'bottom';
        this._positions.unshift(/** @type {?} */ (POSITION_MAP[this._placement]));
    }
    /**
     * @return {?}
     */
    get nzPlacement() {
        return this._placement;
    }
    /**
     * @return {?}
     */
    _onClickEvent() {
        if (this.nzTrigger === 'click') {
            this._show();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onMouseEnterEvent(e) {
        if (this.nzTrigger === 'hover') {
            this._show();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onMouseLeaveEvent(e) {
        if (this.nzTrigger === 'hover') {
            this._hide();
        }
    }
    /**
     * @return {?}
     */
    _hide() {
        this._visibleChange.next(false);
    }
    /**
     * @return {?}
     */
    _show() {
        this._visibleChange.next(true);
    }
    /**
     * @param {?} position
     * @return {?}
     */
    _onPositionChange(position) {
        this._dropDownPosition = position.connectionPair.originY;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _clickDropDown($event) {
        $event.stopPropagation();
        if (this.nzClickHide) {
            this._hide();
        }
    }
    /**
     * @return {?}
     */
    _setTriggerWidth() {
        this._triggerWidth = this._nzOrigin.elementRef.nativeElement.getBoundingClientRect().width;
        /** should remove after https://github.com/angular/material2/pull/8765 merged **/
        if (this._cdkOverlay && this._cdkOverlay.overlayRef) {
            this._cdkOverlay.overlayRef.updateSize({
                minWidth: this._triggerWidth
            });
        }
    }
    /**
     * @param {?} observable$
     * @return {?}
     */
    _startSubscribe(observable$) {
        this._subscription = observable$.pipe(debounceTime$1(50))
            .subscribe(this._onVisibleChange);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._nzMenu) {
            this._nzMenu.setDropDown(true);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        let /** @type {?} */ mouse$;
        if (this.nzTrigger === 'hover') {
            const /** @type {?} */ mouseEnterOrigin$ = fromEvent$1(this._nzOrigin.elementRef.nativeElement, 'mouseenter').pipe(mapTo$1(true));
            const /** @type {?} */ mouseLeaveOrigin$ = fromEvent$1(this._nzOrigin.elementRef.nativeElement, 'mouseleave').pipe(mapTo$1(false));
            mouse$ = mouseEnterOrigin$.pipe(merge$1(mouseLeaveOrigin$));
        }
        if (this.nzTrigger === 'click') {
            mouse$ = fromEvent$1(this._nzOrigin.elementRef.nativeElement, 'click').pipe(mapTo$1(true));
            this._renderer.listen(this._nzOrigin.elementRef.nativeElement, 'click', (e) => {
                e.preventDefault();
            });
        }
        const /** @type {?} */ observable$ = mouse$.pipe(merge$1(this._visibleChange));
        this._startSubscribe(observable$);
    }
    /**
     * @return {?}
     */
    get _hasBackdrop() {
        return this.nzTrigger === 'click';
    }
}
NzDropDownComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-dropdown',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    dropDownAnimation
                ],
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <div>
      <ng-content></ng-content>
    </div>
    <ng-template
      cdkConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="_hasBackdrop"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOrigin]="_nzOrigin"
      (backdropClick)="_hide()"
      [cdkConnectedOverlayMinWidth]="_triggerWidth"
      (positionChange)="_onPositionChange($event)"
      [cdkConnectedOverlayOpen]="nzVisible"
    >
      <div
        class="{{'ant-dropdown ant-dropdown-placement-'+nzPlacement}}"
        [@dropDownAnimation]="_dropDownPosition"
        (mouseenter)="_onMouseEnterEvent($event)"
        (mouseleave)="_onMouseLeaveEvent($event)"
        [style.minWidth.px]="_triggerWidth"
        (click)="_clickDropDown($event)">
        <div [class.ant-table-filter-dropdown]="hasFilterButton">
          <ng-content select="[nz-menu]"></ng-content>
          <ng-content select="[nz-table-filter]"></ng-content>
        </div>
        <ng-content select="[nz-dropdown-custom]"></ng-content>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  padding: 6px 8px;
  transition: all .3s;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #108ee9;
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #108ee9;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  padding: 6px 8px;
  transition: all .3s;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #108ee9;
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #108ee9;
  color: #fff;
}
nz-dropdown {
  position: relative;
  display: inline-block;
}
nz-dropdown-button {
  position: relative;
  display: inline-block;
}
.ant-dropdown {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzDropDownComponent.ctorParameters = () => [
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzDropDownComponent.propDecorators = {
    "_nzOrigin": [{ type: ContentChild, args: [NzDropDownDirective,] },],
    "_nzMenu": [{ type: ContentChild, args: [NzMenuComponent,] },],
    "nzTrigger": [{ type: Input },],
    "_visibleChange": [{ type: Output },],
    "nzVisibleChange": [{ type: Output },],
    "_cdkOverlay": [{ type: ViewChild, args: [CdkConnectedOverlay,] },],
    "nzClickHide": [{ type: Input },],
    "nzVisible": [{ type: Input },],
    "nzPlacement": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDropDownButtonComponent extends NzDropDownComponent {
    constructor() {
        super(...arguments);
        this._disabled = false;
        this.nzSize = 'default';
        this.nzType = 'default';
        this.nzClick = new EventEmitter();
        this._onVisibleChange = (visible) => {
            if (this.nzDisabled) {
                return;
            }
            if (visible) {
                this._setTriggerWidth();
            }
            if (this.nzVisible !== visible) {
                this.nzVisible = visible;
                this.nzVisibleChange.emit(this.nzVisible);
            }
            this._changeDetector.markForCheck();
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * rewrite afterViewInit hook
     * @return {?}
     */
    ngAfterViewInit() {
        this._startSubscribe(this._visibleChange);
    }
}
NzDropDownButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-dropdown-button',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    dropDownAnimation
                ],
                template: `
    <div class="ant-btn-group ant-dropdown-button" nz-dropdown>
      <button
        type="button"
        nz-button
        [disabled]="nzDisabled"
        [nzType]="nzType"
        [nzSize]="nzSize"
        (click)="nzClick.emit($event)">
        <span><ng-content></ng-content></span></button><button
        [nzType]="nzType"
        [nzSize]="nzSize"
        nz-button type="button"
        class="ant-dropdown-trigger"
        [disabled]="nzDisabled"
        (click)="_onClickEvent()"
        (mouseenter)="_onMouseEnterEvent($event)"
        (mouseleave)="_onMouseLeaveEvent($event)">
        <i class="anticon anticon-down"></i></button>
    </div>
    <ng-template
      cdkConnectedOverlay
      [cdkConnectedOverlayHasBackdrop]="_hasBackdrop"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOrigin]="_nzOrigin"
      (backdropClick)="_hide()"
      (detach)="_hide()"
      [cdkConnectedOverlayMinWidth]="_triggerWidth"
      (positionChange)="_onPositionChange($event)"
      [cdkConnectedOverlayOpen]="nzVisible"
    >
      <div
        class="{{'ant-dropdown ant-dropdown-placement-'+nzPlacement}}"
        [@dropDownAnimation]="_dropDownPosition"
        (mouseenter)="_onMouseEnterEvent($event)"
        (mouseleave)="_onMouseLeaveEvent($event)"
        [style.minWidth.px]="_triggerWidth"
        (click)="_clickDropDown($event)">
        <ng-content select="[nz-menu]"></ng-content>
      </div>
    </ng-template>    `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  padding: 6px 8px;
  transition: all .3s;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #108ee9;
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #108ee9;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-dropdown {
  position: absolute;
  left: -9999px;
  top: -9999px;
  z-index: 1050;
  display: block;
  font-size: 12px;
  font-weight: normal;
  line-height: 1.5;
}
.ant-dropdown-wrap {
  position: relative;
}
.ant-dropdown-wrap .ant-btn > .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  filter: none;
}
:root .ant-dropdown-wrap .ant-btn > .anticon-down {
  font-size: 12px;
}
.ant-dropdown-wrap .anticon-down:before {
  transition: transform 0.2s ease;
}
.ant-dropdown-wrap-open .anticon-down:before {
  transform: rotate(180deg);
}
.ant-dropdown-hidden,
.ant-dropdown-menu-hidden {
  display: none;
}
.ant-dropdown-menu {
  outline: none;
  position: relative;
  list-style-type: none;
  padding: 0;
  margin: 0;
  text-align: left;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  background-clip: padding-box;
}
.ant-dropdown-menu-item-group-title {
  color: rgba(0, 0, 0, 0.43);
  padding: 6px 8px;
  transition: all .3s;
}
.ant-dropdown-menu-item,
.ant-dropdown-menu-submenu-title {
  padding: 7px 8px;
  margin: 0;
  clear: both;
  font-size: 12px;
  font-weight: normal;
  color: rgba(0, 0, 0, 0.65);
  white-space: nowrap;
  cursor: pointer;
  transition: all .3s;
}
.ant-dropdown-menu-item > a,
.ant-dropdown-menu-submenu-title > a {
  color: rgba(0, 0, 0, 0.65);
  display: block;
  padding: 7px 8px;
  margin: -7px -8px;
  transition: all .3s;
}
.ant-dropdown-menu-item > a:focus,
.ant-dropdown-menu-submenu-title > a:focus {
  text-decoration: none;
}
.ant-dropdown-menu-item-selected,
.ant-dropdown-menu-submenu-title-selected,
.ant-dropdown-menu-item-selected > a,
.ant-dropdown-menu-submenu-title-selected > a {
  color: #108ee9;
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item:hover,
.ant-dropdown-menu-submenu-title:hover {
  background-color: #ecf6fd;
}
.ant-dropdown-menu-item-disabled,
.ant-dropdown-menu-submenu-title-disabled {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-dropdown-menu-item-disabled:hover,
.ant-dropdown-menu-submenu-title-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
  cursor: not-allowed;
}
.ant-dropdown-menu-item:first-child,
.ant-dropdown-menu-submenu-title:first-child,
.ant-dropdown-menu-item:first-child > a,
.ant-dropdown-menu-submenu-title:first-child > a {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-item:last-child,
.ant-dropdown-menu-submenu-title:last-child,
.ant-dropdown-menu-item:last-child > a,
.ant-dropdown-menu-submenu-title:last-child > a {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown-menu-item:only-child,
.ant-dropdown-menu-submenu-title:only-child,
.ant-dropdown-menu-item:only-child > a,
.ant-dropdown-menu-submenu-title:only-child > a {
  border-radius: 4px;
}
.ant-dropdown-menu-item-divider,
.ant-dropdown-menu-submenu-title-divider {
  height: 1px;
  overflow: hidden;
  background-color: #e9e9e9;
  line-height: 0;
}
.ant-dropdown-menu-submenu-title:after {
  font-family: "anticon" !important;
  position: absolute;
  content: "\\e61f";
  right: 8px;
  color: rgba(0, 0, 0, 0.43);
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-menu-submenu-title:after {
  filter: none;
}
:root .ant-dropdown-menu-submenu-title:after {
  font-size: 12px;
}
.ant-dropdown-menu-submenu-vertical {
  position: relative;
}
.ant-dropdown-menu-submenu-vertical > .ant-dropdown-menu {
  top: 0;
  left: 100%;
  position: absolute;
  min-width: 100%;
  margin-left: 4px;
  transform-origin: 0 0;
}
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-submenu.ant-dropdown-menu-submenu-disabled .ant-dropdown-menu-submenu-title:after {
  color: rgba(0, 0, 0, 0.25);
}
.ant-dropdown-menu-submenu:first-child .ant-dropdown-menu-submenu-title {
  border-radius: 4px 4px 0 0;
}
.ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0 0 4px 4px;
}
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-enter.slide-down-enter-active.ant-dropdown-placement-bottomRight,
.ant-dropdown.slide-down-appear.slide-down-appear-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpIn;
}
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-enter.slide-up-enter-active.ant-dropdown-placement-topRight,
.ant-dropdown.slide-up-appear.slide-up-appear-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownIn;
}
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomLeft,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomCenter,
.ant-dropdown.slide-down-leave.slide-down-leave-active.ant-dropdown-placement-bottomRight {
  animation-name: antSlideUpOut;
}
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topLeft,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topCenter,
.ant-dropdown.slide-up-leave.slide-up-leave-active.ant-dropdown-placement-topRight {
  animation-name: antSlideDownOut;
}
.ant-dropdown-trigger .anticon-down,
.ant-dropdown-link .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  filter: none;
}
:root .ant-dropdown-trigger .anticon-down,
:root .ant-dropdown-link .anticon-down {
  font-size: 12px;
}
.ant-dropdown-button {
  white-space: nowrap;
}
.ant-dropdown-button.ant-btn-group > .ant-btn:last-child:not(:first-child) {
  padding-right: 8px;
}
.ant-dropdown-button .anticon-down {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-dropdown-button .anticon-down {
  filter: none;
}
:root .ant-dropdown-button .anticon-down {
  font-size: 12px;
}
.ant-dropdown-menu-dark,
.ant-dropdown-menu-dark .ant-dropdown-menu {
  background: #404040;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:after,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:after {
  color: rgba(255, 255, 255, 0.67);
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-submenu-title:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item > a:hover {
  color: #fff;
  background: transparent;
}
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected:hover,
.ant-dropdown-menu-dark .ant-dropdown-menu-item-selected > a {
  background: #108ee9;
  color: #fff;
}
nz-dropdown {
  position: relative;
  display: inline-block;
}
nz-dropdown-button {
  position: relative;
  display: inline-block;
}
.ant-dropdown {
  top: 100%;
  left: 0;
  position: relative;
  width: 100%;
  margin-top: 4px;
  margin-bottom: 4px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzDropDownButtonComponent.ctorParameters = () => [];
NzDropDownButtonComponent.propDecorators = {
    "nzSize": [{ type: Input },],
    "nzType": [{ type: Input },],
    "content": [{ type: ViewChild, args: ['content',] },],
    "nzClick": [{ type: Output },],
    "_nzOrigin": [{ type: ViewChild, args: [NzDropDownDirective,] },],
    "nzDisabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzDropDownModule {
}
NzDropDownModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, OverlayModule, FormsModule, NzButtonModule, NzMenuModule],
                declarations: [NzDropDownComponent, NzDropDownButtonComponent, NzDropDownDirective],
                exports: [NzDropDownComponent, NzDropDownButtonComponent, NzDropDownDirective]
            },] },
];
/** @nocollapse */
NzDropDownModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormControlComponent {
    constructor() {
        this._hasFeedback = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzHasFeedback(value) {
        this._hasFeedback = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzHasFeedback() {
        return this._hasFeedback;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValidateStatus(value) {
        this._validateStatus = value;
    }
    /**
     * @return {?}
     */
    get nzValidateStatus() {
        return this._validateStatus || this.ngControl;
    }
    /**
     * @return {?}
     */
    get isWarning() {
        return this.nzValidateStatus === 'warning' || this.nzValidateStatus && (/** @type {?} */ (this.nzValidateStatus)).dirty && (/** @type {?} */ (this.nzValidateStatus)).hasError && (/** @type {?} */ (this.nzValidateStatus)).hasError('warning');
    }
    /**
     * @return {?}
     */
    get isValidate() {
        return this.nzValidateStatus === 'validating' || this.nzValidateStatus === 'pending' || this.nzValidateStatus && (/** @type {?} */ (this.nzValidateStatus)).dirty && (/** @type {?} */ (this.nzValidateStatus)).pending;
    }
    /**
     * @return {?}
     */
    get isError() {
        return this.nzValidateStatus === 'error' || this.nzValidateStatus && (/** @type {?} */ (this.nzValidateStatus)).dirty && (/** @type {?} */ (this.nzValidateStatus)).errors && (/** @type {?} */ (this.nzValidateStatus)).hasError && !(/** @type {?} */ (this.nzValidateStatus)).hasError('warning');
    }
    /**
     * @return {?}
     */
    get isSuccess() {
        return this.nzValidateStatus === 'success' || this.nzValidateStatus && (/** @type {?} */ (this.nzValidateStatus)).dirty && (/** @type {?} */ (this.nzValidateStatus)).valid;
    }
    /**
     * @return {?}
     */
    get hasFeedBack() {
        return this.nzHasFeedback;
    }
}
NzFormControlComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-form-control]',
                template: `
    <div class="ant-form-item-control"
      [class.has-warning]="isWarning"
      [class.has-error]="isError"
      [class.has-success]="isSuccess"
      [class.has-feedback]="hasFeedBack"
      [class.is-validating]="isValidate">
      <ng-content></ng-content>
    </div>
  `,
                styles: [],
                host: {
                    '[class.ant-form-item-control-wrapper]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormControlComponent.ctorParameters = () => [];
NzFormControlComponent.propDecorators = {
    "ngControl": [{ type: ContentChild, args: [NgControl,] },],
    "nzHasFeedback": [{ type: Input },],
    "nzValidateStatus": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormItemDirective {
    constructor() {
        this._withHelp = 0;
    }
    /**
     * @return {?}
     */
    enableHelp() {
        this._withHelp++;
    }
    /**
     * @return {?}
     */
    disableHelp() {
        this._withHelp--;
    }
    /**
     * @return {?}
     */
    get withHelp() {
        return this._withHelp > 0;
    }
}
NzFormItemDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-item]',
                host: {
                    '[class.ant-form-item]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormItemDirective.ctorParameters = () => [];
NzFormItemDirective.propDecorators = {
    "withHelp": [{ type: HostBinding, args: [`class.ant-form-item-with-help`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormExplainComponent {
    /**
     * @param {?} _nzFormItem
     */
    constructor(_nzFormItem) {
        this._nzFormItem = _nzFormItem;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._nzFormItem.disableHelp();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._nzFormItem.enableHelp();
    }
}
NzFormExplainComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-form-explain]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [],
                host: {
                    '[class.ant-form-explain]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormExplainComponent.ctorParameters = () => [
    { type: NzFormItemDirective, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormExtraDirective {
}
NzFormExtraDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-extra]',
                host: {
                    '[class.ant-form-extra]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormExtraDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormItemRequiredDirective {
    constructor() {
        this._required = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzRequired(value) {
        this._required = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzRequired() {
        return this._required;
    }
}
NzFormItemRequiredDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-item-required]'
            },] },
];
/** @nocollapse */
NzFormItemRequiredDirective.ctorParameters = () => [];
NzFormItemRequiredDirective.propDecorators = {
    "nzRequired": [{ type: Input }, { type: HostBinding, args: [`class.ant-form-item-required`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormLabelDirective {
}
NzFormLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-label]',
                host: {
                    '[class.ant-form-item-label]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormLabelDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormSplitDirective {
}
NzFormSplitDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-split]',
                host: {
                    '[class.ant-form-split]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormSplitDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormTextDirective {
}
NzFormTextDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-form-text]',
                host: {
                    '[class.ant-form-text]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFormTextDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._classList = [];
        this._prefixCls = 'ant-form';
        /**
         * @deprecated Use `nzLayout` instead.
         */
        this.nzType = 'horizontal';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLayout(value) {
        this.nzType = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            this.nzType && `${this._prefixCls}-${this.nzType}`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzFormComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-form]',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: 20px;
  font-size: 14px;
  line-height: inherit;
  color: rgba(0, 0, 0, 0.43);
  border: 0;
  border-bottom: 1px solid #d9d9d9;
}
label {
  font-size: 12px;
}
input[type="search"] {
  box-sizing: border-box;
}
input[type="radio"],
input[type="checkbox"] {
  line-height: normal;
}
input[type="file"] {
  display: block;
}
input[type="range"] {
  display: block;
  width: 100%;
}
select[multiple],
select[size] {
  height: auto;
}
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
output {
  display: block;
  padding-top: 15px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
}
label {
  position: relative;
}
label > .anticon {
  vertical-align: top;
  font-size: 12px;
}
.ant-form-item-required:before {
  display: inline-block;
  margin-right: 4px;
  content: "*";
  font-family: SimSun;
  line-height: 1;
  font-size: 12px;
  color: #f04134;
}
.ant-form-hide-required-mark .ant-form-item-required:before {
  display: none;
}
input[type="radio"][disabled],
input[type="checkbox"][disabled],
input[type="radio"].disabled,
input[type="checkbox"].disabled {
  cursor: not-allowed;
}
.ant-radio-inline.disabled,
.ant-radio-vertical.disabled,
.ant-checkbox-inline.disabled,
.ant-checkbox-vertical.disabled {
  cursor: not-allowed;
}
.ant-radio.disabled label,
.ant-checkbox.disabled label {
  cursor: not-allowed;
}
.ant-form-item {
  font-size: 12px;
  margin-bottom: 24px;
  color: rgba(0, 0, 0, 0.65);
  vertical-align: top;
}
.ant-form-item-control > .ant-form-item:last-child,
.ant-form-item [class^="ant-col-"] > .ant-form-item:only-child {
  margin-bottom: -24px;
}
.ant-form-item-control {
  line-height: 31.9999px;
  position: relative;
  zoom: 1;
}
.ant-form-item-control:before,
.ant-form-item-control:after {
  content: " ";
  display: table;
}
.ant-form-item-control:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-form-item-with-help {
  margin-bottom: 6px;
}
.ant-form-item-label {
  text-align: right;
  vertical-align: middle;
  line-height: 32px;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ant-form-item-label label {
  color: rgba(0, 0, 0, 0.85);
}
.ant-form-item-label label:after {
  content: ":";
  margin: 0 8px 0 2px;
  position: relative;
  top: -0.5px;
}
.ant-form-item .ant-switch {
  margin: 4px 0;
}
.ant-form-item-no-colon .ant-form-item-label label:after {
  content: " ";
}
.ant-form-explain,
.ant-form-extra {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
}
.ant-form-extra {
  padding-top: 4px;
}
.ant-form-text {
  display: inline-block;
  padding-right: 8px;
}
.ant-form-split {
  display: block;
  text-align: center;
}
form .has-feedback .ant-input {
  padding-right: 24px;
}
form .has-feedback > .ant-select .ant-select-arrow,
form .has-feedback > .ant-select .ant-select-selection__clear,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-arrow,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection__clear {
  right: 28px;
}
form .has-feedback > .ant-select .ant-select-selection-selected-value,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection-selected-value {
  padding-right: 42px;
}
form .has-feedback .ant-cascader-picker-arrow {
  margin-right: 21px;
}
form .has-feedback .ant-cascader-picker-clear {
  right: 28px;
}
form .has-feedback .ant-input-search .ant-input-suffix {
  right: 28px;
}
form .has-feedback .ant-calendar-picker-icon,
form .has-feedback .ant-time-picker-icon,
form .has-feedback .ant-calendar-picker-clear,
form .has-feedback .ant-time-picker-clear {
  right: 28px;
}
form textarea.ant-input {
  height: auto;
}
form .ant-upload {
  background: transparent;
}
form input[type="radio"],
form input[type="checkbox"] {
  width: 14px;
  height: 14px;
}
form .ant-radio-inline,
form .ant-checkbox-inline {
  display: inline-block;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
  margin-left: 8px;
}
form .ant-radio-inline:first-child,
form .ant-checkbox-inline:first-child {
  margin-left: 0;
}
form .ant-checkbox-vertical,
form .ant-radio-vertical {
  display: block;
}
form .ant-checkbox-vertical + .ant-checkbox-vertical,
form .ant-radio-vertical + .ant-radio-vertical {
  margin-left: 0;
}
form .ant-input-number {
  margin-right: 8px;
}
form .ant-select,
form .ant-cascader-picker {
  width: 100%;
}
form .ant-select:only-child,
form .ant-cascader-picker:only-child {
  display: block;
}
form .ant-input-group .ant-select,
form .ant-input-group .ant-cascader-picker {
  width: auto;
}
form .ant-input-group-addon .ant-select:only-child,
form .ant-input-group-addon .ant-cascader-picker:only-child {
  display: inline-block;
}
form .ant-input-group-wrapper {
  position: relative;
  top: 2px;
}
form .ant-input-group-wrapper.ant-input-group-wrapper-lg {
  top: 0;
}
form .ant-input-group-wrapper.ant-input-group-wrapper-sm {
  top: 5px;
}
.ant-input-group-wrap .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-wrap .ant-select-selection:hover {
  border-color: #d9d9d9;
}
.ant-input-group-wrap .ant-select-selection--single {
  margin-left: -1px;
  height: 32px;
  background-color: #eee;
}
.ant-input-group-wrap .ant-select-selection--single .ant-select-selection__rendered {
  padding-left: 8px;
  padding-right: 25px;
  line-height: 30px;
}
.ant-input-group-wrap .ant-select-open .ant-select-selection {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-form-vertical .ant-form-item-label,
.ant-col-24.ant-form-item-label,
.ant-col-xl-24.ant-form-item-label {
  padding: 0 0 8px;
  margin: 0;
  display: block;
  text-align: left;
  line-height: 1.5;
}
.ant-form-vertical .ant-form-item-label label:after,
.ant-col-24.ant-form-item-label label:after,
.ant-col-xl-24.ant-form-item-label label:after {
  display: none;
}
@media (max-width: 767px) {
  .ant-col-xs-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-xs-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 991px) {
  .ant-col-sm-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-sm-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1199px) {
  .ant-col-md-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-md-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1599px) {
  .ant-col-lg-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-lg-24.ant-form-item-label label:after {
    display: none;
  }
}
.ant-form-inline .ant-form-item {
  display: inline-block;
  margin-right: 16px;
  margin-bottom: 0;
}
.ant-form-inline .ant-form-item-with-help {
  margin-bottom: 24px;
}
.ant-form-inline .ant-form-item > div {
  display: inline-block;
  vertical-align: middle;
}
.ant-form-inline .ant-form-text {
  display: inline-block;
}
.ant-form-inline .has-feedback {
  display: inline-block;
}
.ant-form-inline .ant-form-explain {
  position: absolute;
}
.has-success.has-feedback:after,
.has-warning.has-feedback:after,
.has-error.has-feedback:after,
.is-validating.has-feedback:after {
  position: absolute;
  top: 0;
  right: 0;
  visibility: visible;
  pointer-events: none;
  width: 32px;
  height: 32px;
  line-height: 32px;
  text-align: center;
  font-size: 14px;
  animation: zoomIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "";
  z-index: 1;
}
.has-success.has-feedback:after {
  animation-name: diffZoomIn1 !important;
}
.has-error.has-feedback:after {
  animation-name: diffZoomIn2 !important;
}
.has-warning.has-feedback:after {
  animation-name: diffZoomIn3 !important;
}
.has-success.has-feedback:after {
  content: '\\e630';
  color: #00a854;
}
.has-warning .ant-form-explain,
.has-warning .ant-form-split {
  color: #ffbf00;
}
.has-warning .ant-input,
.has-warning .ant-input:hover {
  border-color: #ffbf00;
}
.has-warning .ant-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-warning .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-prefix {
  color: #ffbf00;
}
.has-warning .ant-input-group-addon {
  color: #ffbf00;
  border-color: #ffbf00;
  background-color: #fff;
}
.has-warning .has-feedback {
  color: #ffbf00;
}
.has-warning.has-feedback:after {
  content: '\\e62c';
  color: #ffbf00;
}
.has-warning .ant-select-selection {
  border-color: #ffbf00;
}
.has-warning .ant-select-open .ant-select-selection,
.has-warning .ant-select-focused .ant-select-selection {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-calendar-picker-icon:after,
.has-warning .ant-time-picker-icon:after,
.has-warning .ant-picker-icon:after,
.has-warning .ant-select-arrow,
.has-warning .ant-cascader-picker-arrow {
  color: #ffbf00;
}
.has-warning .ant-input-number,
.has-warning .ant-time-picker-input {
  border-color: #ffbf00;
}
.has-warning .ant-input-number-focused,
.has-warning .ant-time-picker-input-focused,
.has-warning .ant-input-number:focus,
.has-warning .ant-time-picker-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-number:not([disabled]):hover,
.has-warning .ant-time-picker-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-warning .ant-cascader-picker:focus .ant-cascader-input {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-error .ant-form-explain,
.has-error .ant-form-split {
  color: #f04134;
}
.has-error .ant-input,
.has-error .ant-input:hover {
  border-color: #f04134;
}
.has-error .ant-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-prefix {
  color: #f04134;
}
.has-error .ant-input-group-addon {
  color: #f04134;
  border-color: #f04134;
  background-color: #fff;
}
.has-error .has-feedback {
  color: #f04134;
}
.has-error.has-feedback:after {
  content: '\\e62e';
  color: #f04134;
}
.has-error .ant-select-selection {
  border-color: #f04134;
}
.has-error .ant-select-open .ant-select-selection,
.has-error .ant-select-focused .ant-select-selection {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-group-addon .ant-select-selection {
  border-color: transparent;
  box-shadow: none;
}
.has-error .ant-calendar-picker-icon:after,
.has-error .ant-time-picker-icon:after,
.has-error .ant-picker-icon:after,
.has-error .ant-select-arrow,
.has-error .ant-cascader-picker-arrow {
  color: #f04134;
}
.has-error .ant-input-number,
.has-error .ant-time-picker-input {
  border-color: #f04134;
}
.has-error .ant-input-number-focused,
.has-error .ant-time-picker-input-focused,
.has-error .ant-input-number:focus,
.has-error .ant-time-picker-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-number:not([disabled]):hover,
.has-error .ant-time-picker-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper.ant-mention-active:not([disabled]) .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-cascader-picker:focus .ant-cascader-input {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.is-validating.has-feedback:after {
  display: inline-block;
  animation: loadingCircle 1s infinite linear;
  content: "\\e64d";
  color: #108ee9;
}
.ant-advanced-search-form .ant-form-item {
  margin-bottom: 16px;
}
.ant-advanced-search-form .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input-group-addon {
  height: 28px;
}
@keyframes diffZoomIn1 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn2 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn3 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
legend {
  display: block;
  width: 100%;
  padding: 0;
  margin-bottom: 20px;
  font-size: 14px;
  line-height: inherit;
  color: rgba(0, 0, 0, 0.43);
  border: 0;
  border-bottom: 1px solid #d9d9d9;
}
label {
  font-size: 12px;
}
input[type="search"] {
  box-sizing: border-box;
}
input[type="radio"],
input[type="checkbox"] {
  line-height: normal;
}
input[type="file"] {
  display: block;
}
input[type="range"] {
  display: block;
  width: 100%;
}
select[multiple],
select[size] {
  height: auto;
}
input[type="file"]:focus,
input[type="radio"]:focus,
input[type="checkbox"]:focus {
  outline: thin dotted;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
output {
  display: block;
  padding-top: 15px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
}
label {
  position: relative;
}
label > .anticon {
  vertical-align: top;
  font-size: 12px;
}
.ant-form-item-required:before {
  display: inline-block;
  margin-right: 4px;
  content: "*";
  font-family: SimSun;
  line-height: 1;
  font-size: 12px;
  color: #f04134;
}
.ant-form-hide-required-mark .ant-form-item-required:before {
  display: none;
}
input[type="radio"][disabled],
input[type="checkbox"][disabled],
input[type="radio"].disabled,
input[type="checkbox"].disabled {
  cursor: not-allowed;
}
.ant-radio-inline.disabled,
.ant-radio-vertical.disabled,
.ant-checkbox-inline.disabled,
.ant-checkbox-vertical.disabled {
  cursor: not-allowed;
}
.ant-radio.disabled label,
.ant-checkbox.disabled label {
  cursor: not-allowed;
}
.ant-form-item {
  font-size: 12px;
  margin-bottom: 24px;
  color: rgba(0, 0, 0, 0.65);
  vertical-align: top;
}
.ant-form-item-control > .ant-form-item:last-child,
.ant-form-item [class^="ant-col-"] > .ant-form-item:only-child {
  margin-bottom: -24px;
}
.ant-form-item-control {
  line-height: 31.9999px;
  position: relative;
  zoom: 1;
}
.ant-form-item-control:before,
.ant-form-item-control:after {
  content: " ";
  display: table;
}
.ant-form-item-control:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-form-item-with-help {
  margin-bottom: 6px;
}
.ant-form-item-label {
  text-align: right;
  vertical-align: middle;
  line-height: 32px;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ant-form-item-label label {
  color: rgba(0, 0, 0, 0.85);
}
.ant-form-item-label label:after {
  content: ":";
  margin: 0 8px 0 2px;
  position: relative;
  top: -0.5px;
}
.ant-form-item .ant-switch {
  margin: 4px 0;
}
.ant-form-item-no-colon .ant-form-item-label label:after {
  content: " ";
}
.ant-form-explain,
.ant-form-extra {
  color: rgba(0, 0, 0, 0.43);
  line-height: 1.5;
}
.ant-form-extra {
  padding-top: 4px;
}
.ant-form-text {
  display: inline-block;
  padding-right: 8px;
}
.ant-form-split {
  display: block;
  text-align: center;
}
form .has-feedback .ant-input {
  padding-right: 24px;
}
form .has-feedback > .ant-select .ant-select-arrow,
form .has-feedback > .ant-select .ant-select-selection__clear,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-arrow,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection__clear {
  right: 28px;
}
form .has-feedback > .ant-select .ant-select-selection-selected-value,
form .has-feedback :not(.ant-input-group-addon) > .ant-select .ant-select-selection-selected-value {
  padding-right: 42px;
}
form .has-feedback .ant-cascader-picker-arrow {
  margin-right: 21px;
}
form .has-feedback .ant-cascader-picker-clear {
  right: 28px;
}
form .has-feedback .ant-input-search .ant-input-suffix {
  right: 28px;
}
form .has-feedback .ant-calendar-picker-icon,
form .has-feedback .ant-time-picker-icon,
form .has-feedback .ant-calendar-picker-clear,
form .has-feedback .ant-time-picker-clear {
  right: 28px;
}
form textarea.ant-input {
  height: auto;
}
form .ant-upload {
  background: transparent;
}
form input[type="radio"],
form input[type="checkbox"] {
  width: 14px;
  height: 14px;
}
form .ant-radio-inline,
form .ant-checkbox-inline {
  display: inline-block;
  vertical-align: middle;
  font-weight: normal;
  cursor: pointer;
  margin-left: 8px;
}
form .ant-radio-inline:first-child,
form .ant-checkbox-inline:first-child {
  margin-left: 0;
}
form .ant-checkbox-vertical,
form .ant-radio-vertical {
  display: block;
}
form .ant-checkbox-vertical + .ant-checkbox-vertical,
form .ant-radio-vertical + .ant-radio-vertical {
  margin-left: 0;
}
form .ant-input-number {
  margin-right: 8px;
}
form .ant-select,
form .ant-cascader-picker {
  width: 100%;
}
form .ant-select:only-child,
form .ant-cascader-picker:only-child {
  display: block;
}
form .ant-input-group .ant-select,
form .ant-input-group .ant-cascader-picker {
  width: auto;
}
form .ant-input-group-addon .ant-select:only-child,
form .ant-input-group-addon .ant-cascader-picker:only-child {
  display: inline-block;
}
form .ant-input-group-wrapper {
  position: relative;
  top: 2px;
}
form .ant-input-group-wrapper.ant-input-group-wrapper-lg {
  top: 0;
}
form .ant-input-group-wrapper.ant-input-group-wrapper-sm {
  top: 5px;
}
.ant-input-group-wrap .ant-select-selection {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}
.ant-input-group-wrap .ant-select-selection:hover {
  border-color: #d9d9d9;
}
.ant-input-group-wrap .ant-select-selection--single {
  margin-left: -1px;
  height: 32px;
  background-color: #eee;
}
.ant-input-group-wrap .ant-select-selection--single .ant-select-selection__rendered {
  padding-left: 8px;
  padding-right: 25px;
  line-height: 30px;
}
.ant-input-group-wrap .ant-select-open .ant-select-selection {
  border-color: #d9d9d9;
  box-shadow: none;
}
.ant-form-vertical .ant-form-item-label,
.ant-col-24.ant-form-item-label,
.ant-col-xl-24.ant-form-item-label {
  padding: 0 0 8px;
  margin: 0;
  display: block;
  text-align: left;
  line-height: 1.5;
}
.ant-form-vertical .ant-form-item-label label:after,
.ant-col-24.ant-form-item-label label:after,
.ant-col-xl-24.ant-form-item-label label:after {
  display: none;
}
@media (max-width: 767px) {
  .ant-col-xs-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-xs-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 991px) {
  .ant-col-sm-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-sm-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1199px) {
  .ant-col-md-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-md-24.ant-form-item-label label:after {
    display: none;
  }
}
@media (max-width: 1599px) {
  .ant-col-lg-24.ant-form-item-label {
    padding: 0 0 8px;
    margin: 0;
    display: block;
    text-align: left;
    line-height: 1.5;
  }
  .ant-col-lg-24.ant-form-item-label label:after {
    display: none;
  }
}
.ant-form-inline .ant-form-item {
  display: inline-block;
  margin-right: 16px;
  margin-bottom: 0;
}
.ant-form-inline .ant-form-item-with-help {
  margin-bottom: 24px;
}
.ant-form-inline .ant-form-item > div {
  display: inline-block;
  vertical-align: middle;
}
.ant-form-inline .ant-form-text {
  display: inline-block;
}
.ant-form-inline .has-feedback {
  display: inline-block;
}
.ant-form-inline .ant-form-explain {
  position: absolute;
}
.has-success.has-feedback:after,
.has-warning.has-feedback:after,
.has-error.has-feedback:after,
.is-validating.has-feedback:after {
  position: absolute;
  top: 0;
  right: 0;
  visibility: visible;
  pointer-events: none;
  width: 32px;
  height: 32px;
  line-height: 32px;
  text-align: center;
  font-size: 14px;
  animation: zoomIn 0.3s cubic-bezier(0.12, 0.4, 0.29, 1.46);
  font-family: 'anticon';
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  content: "";
  z-index: 1;
}
.has-success.has-feedback:after {
  animation-name: diffZoomIn1 !important;
}
.has-error.has-feedback:after {
  animation-name: diffZoomIn2 !important;
}
.has-warning.has-feedback:after {
  animation-name: diffZoomIn3 !important;
}
.has-success.has-feedback:after {
  content: '\\e630';
  color: #00a854;
}
.has-warning .ant-form-explain,
.has-warning .ant-form-split {
  color: #ffbf00;
}
.has-warning .ant-input,
.has-warning .ant-input:hover {
  border-color: #ffbf00;
}
.has-warning .ant-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-warning .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-prefix {
  color: #ffbf00;
}
.has-warning .ant-input-group-addon {
  color: #ffbf00;
  border-color: #ffbf00;
  background-color: #fff;
}
.has-warning .has-feedback {
  color: #ffbf00;
}
.has-warning.has-feedback:after {
  content: '\\e62c';
  color: #ffbf00;
}
.has-warning .ant-select-selection {
  border-color: #ffbf00;
}
.has-warning .ant-select-open .ant-select-selection,
.has-warning .ant-select-focused .ant-select-selection {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-calendar-picker-icon:after,
.has-warning .ant-time-picker-icon:after,
.has-warning .ant-picker-icon:after,
.has-warning .ant-select-arrow,
.has-warning .ant-cascader-picker-arrow {
  color: #ffbf00;
}
.has-warning .ant-input-number,
.has-warning .ant-time-picker-input {
  border-color: #ffbf00;
}
.has-warning .ant-input-number-focused,
.has-warning .ant-time-picker-input-focused,
.has-warning .ant-input-number:focus,
.has-warning .ant-time-picker-input:focus {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-warning .ant-input-number:not([disabled]):hover,
.has-warning .ant-time-picker-input:not([disabled]):hover {
  border-color: #ffbf00;
}
.has-warning .ant-cascader-picker:focus .ant-cascader-input {
  border-color: #ffce3d;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(255, 191, 0, 0.2);
}
.has-error .ant-form-explain,
.has-error .ant-form-split {
  color: #f04134;
}
.has-error .ant-input,
.has-error .ant-input:hover {
  border-color: #f04134;
}
.has-error .ant-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-calendar-picker-open .ant-calendar-picker-input {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-prefix {
  color: #f04134;
}
.has-error .ant-input-group-addon {
  color: #f04134;
  border-color: #f04134;
  background-color: #fff;
}
.has-error .has-feedback {
  color: #f04134;
}
.has-error.has-feedback:after {
  content: '\\e62e';
  color: #f04134;
}
.has-error .ant-select-selection {
  border-color: #f04134;
}
.has-error .ant-select-open .ant-select-selection,
.has-error .ant-select-focused .ant-select-selection {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-group-addon .ant-select-selection {
  border-color: transparent;
  box-shadow: none;
}
.has-error .ant-calendar-picker-icon:after,
.has-error .ant-time-picker-icon:after,
.has-error .ant-picker-icon:after,
.has-error .ant-select-arrow,
.has-error .ant-cascader-picker-arrow {
  color: #f04134;
}
.has-error .ant-input-number,
.has-error .ant-time-picker-input {
  border-color: #f04134;
}
.has-error .ant-input-number-focused,
.has-error .ant-time-picker-input-focused,
.has-error .ant-input-number:focus,
.has-error .ant-time-picker-input:focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-input-number:not([disabled]):hover,
.has-error .ant-time-picker-input:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):hover {
  border-color: #f04134;
}
.has-error .ant-mention-wrapper.ant-mention-active:not([disabled]) .ant-mention-editor,
.has-error .ant-mention-wrapper .ant-mention-editor:not([disabled]):focus {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.has-error .ant-cascader-picker:focus .ant-cascader-input {
  border-color: #f46e65;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(240, 65, 52, 0.2);
}
.is-validating.has-feedback:after {
  display: inline-block;
  animation: loadingCircle 1s infinite linear;
  content: "\\e64d";
  color: #108ee9;
}
.ant-advanced-search-form .ant-form-item {
  margin-bottom: 16px;
}
.ant-advanced-search-form .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input,
.ant-advanced-search-form .ant-input-group .ant-input-group-addon {
  height: 28px;
}
@keyframes diffZoomIn1 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn2 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes diffZoomIn3 {
  0% {
    transform: scale(0);
  }
  100% {
    transform: scale(1);
  }
}
.ant-form-item > label {
  color: rgba(0, 0, 0, 0.85);
  text-align: right;
  vertical-align: middle;
  padding: 7px 0;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
.ant-form-item > label:after {
  content: ":";
  margin: 0 8px 0 2px;
  position: relative;
  top: -0.5px;
}
.ant-form-item-control nz-input {
  width: 100%;
}
.ant-form-item-control nz-select.ant-select {
  display: inline-block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzFormComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzFormComponent.propDecorators = {
    "nzType": [{ type: Input },],
    "nzLayout": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFormModule {
}
NzFormModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzFormExtraDirective, NzFormLabelDirective, NzFormComponent, NzFormItemDirective, NzFormControlComponent, NzFormExplainComponent, NzFormTextDirective, NzFormSplitDirective, NzFormItemRequiredDirective],
                exports: [NzFormExtraDirective, NzFormLabelDirective, NzFormComponent, NzFormItemDirective, NzFormControlComponent, NzFormExplainComponent, NzFormTextDirective, NzFormSplitDirective, NzFormItemRequiredDirective],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzFormModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function isNotNil(value) {
    return (typeof (value) !== 'undefined') && value !== null;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRowComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._classList = [];
        this._prefixCls = 'ant-row';
        this._align = 'top';
        this._justify = 'start';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        this._type = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAlign(value) {
        this._align = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzAlign() {
        return this._align;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzJustify(value) {
        this._justify = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzJustify() {
        return this._justify;
    }
    /**
     * @return {?}
     */
    get nzGutter() {
        return this._gutter;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzGutter(value) {
        this._gutter = value;
        this.setStyle();
    }
    /**
     * @return {?}
     */
    setStyle() {
        this._renderer.setStyle(this._el, 'margin-left', `-${this._gutter / 2}px`);
        this._renderer.setStyle(this._el, 'margin-right', `-${this._gutter / 2}px`);
    }
    /**
     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            (!this.nzType) && this._prefixCls,
            this.nzType && `${this._prefixCls}-${this.nzType}`,
            this.nzType && this.nzAlign && `${this._prefixCls}-${this.nzType}-${this.nzAlign}`,
            this.nzType && this.nzJustify && `${this._prefixCls}-${this.nzType}-${this.nzJustify}`
        ].filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-row],nz-row',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-row {
  position: relative;
  margin-left: 0;
  margin-right: 0;
  height: auto;
  zoom: 1;
  display: block;
}
.ant-row:before,
.ant-row:after {
  content: " ";
  display: table;
}
.ant-row:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-row-flex {
  display: flex;
  flex-flow: row wrap;
}
.ant-row-flex:before,
.ant-row-flex:after {
  display: flex;
}
.ant-row-flex-start {
  justify-content: flex-start;
}
.ant-row-flex-center {
  justify-content: center;
}
.ant-row-flex-end {
  justify-content: flex-end;
}
.ant-row-flex-space-between {
  justify-content: space-between;
}
.ant-row-flex-space-around {
  justify-content: space-around;
}
.ant-row-flex-top {
  align-items: flex-start;
}
.ant-row-flex-middle {
  align-items: center;
}
.ant-row-flex-bottom {
  align-items: flex-end;
}
.ant-col {
  position: relative;
  display: block;
}
.ant-col-1, .ant-col-xs-1, .ant-col-sm-1, .ant-col-md-1, .ant-col-lg-1, .ant-col-2, .ant-col-xs-2, .ant-col-sm-2, .ant-col-md-2, .ant-col-lg-2, .ant-col-3, .ant-col-xs-3, .ant-col-sm-3, .ant-col-md-3, .ant-col-lg-3, .ant-col-4, .ant-col-xs-4, .ant-col-sm-4, .ant-col-md-4, .ant-col-lg-4, .ant-col-5, .ant-col-xs-5, .ant-col-sm-5, .ant-col-md-5, .ant-col-lg-5, .ant-col-6, .ant-col-xs-6, .ant-col-sm-6, .ant-col-md-6, .ant-col-lg-6, .ant-col-7, .ant-col-xs-7, .ant-col-sm-7, .ant-col-md-7, .ant-col-lg-7, .ant-col-8, .ant-col-xs-8, .ant-col-sm-8, .ant-col-md-8, .ant-col-lg-8, .ant-col-9, .ant-col-xs-9, .ant-col-sm-9, .ant-col-md-9, .ant-col-lg-9, .ant-col-10, .ant-col-xs-10, .ant-col-sm-10, .ant-col-md-10, .ant-col-lg-10, .ant-col-11, .ant-col-xs-11, .ant-col-sm-11, .ant-col-md-11, .ant-col-lg-11, .ant-col-12, .ant-col-xs-12, .ant-col-sm-12, .ant-col-md-12, .ant-col-lg-12, .ant-col-13, .ant-col-xs-13, .ant-col-sm-13, .ant-col-md-13, .ant-col-lg-13, .ant-col-14, .ant-col-xs-14, .ant-col-sm-14, .ant-col-md-14, .ant-col-lg-14, .ant-col-15, .ant-col-xs-15, .ant-col-sm-15, .ant-col-md-15, .ant-col-lg-15, .ant-col-16, .ant-col-xs-16, .ant-col-sm-16, .ant-col-md-16, .ant-col-lg-16, .ant-col-17, .ant-col-xs-17, .ant-col-sm-17, .ant-col-md-17, .ant-col-lg-17, .ant-col-18, .ant-col-xs-18, .ant-col-sm-18, .ant-col-md-18, .ant-col-lg-18, .ant-col-19, .ant-col-xs-19, .ant-col-sm-19, .ant-col-md-19, .ant-col-lg-19, .ant-col-20, .ant-col-xs-20, .ant-col-sm-20, .ant-col-md-20, .ant-col-lg-20, .ant-col-21, .ant-col-xs-21, .ant-col-sm-21, .ant-col-md-21, .ant-col-lg-21, .ant-col-22, .ant-col-xs-22, .ant-col-sm-22, .ant-col-md-22, .ant-col-lg-22, .ant-col-23, .ant-col-xs-23, .ant-col-sm-23, .ant-col-md-23, .ant-col-lg-23, .ant-col-24, .ant-col-xs-24, .ant-col-sm-24, .ant-col-md-24, .ant-col-lg-24 {
  position: relative;
  min-height: 1px;
  padding-left: 0;
  padding-right: 0;
}
.ant-col-1, .ant-col-2, .ant-col-3, .ant-col-4, .ant-col-5, .ant-col-6, .ant-col-7, .ant-col-8, .ant-col-9, .ant-col-10, .ant-col-11, .ant-col-12, .ant-col-13, .ant-col-14, .ant-col-15, .ant-col-16, .ant-col-17, .ant-col-18, .ant-col-19, .ant-col-20, .ant-col-21, .ant-col-22, .ant-col-23, .ant-col-24 {
  float: left;
  flex: 0 0 auto;
}
.ant-col-24 {
  display: block;
  width: 100%;
}
.ant-col-push-24 {
  left: 100%;
}
.ant-col-pull-24 {
  right: 100%;
}
.ant-col-offset-24 {
  margin-left: 100%;
}
.ant-col-order-24 {
  order: 24;
}
.ant-col-23 {
  display: block;
  width: 95.83333333%;
}
.ant-col-push-23 {
  left: 95.83333333%;
}
.ant-col-pull-23 {
  right: 95.83333333%;
}
.ant-col-offset-23 {
  margin-left: 95.83333333%;
}
.ant-col-order-23 {
  order: 23;
}
.ant-col-22 {
  display: block;
  width: 91.66666667%;
}
.ant-col-push-22 {
  left: 91.66666667%;
}
.ant-col-pull-22 {
  right: 91.66666667%;
}
.ant-col-offset-22 {
  margin-left: 91.66666667%;
}
.ant-col-order-22 {
  order: 22;
}
.ant-col-21 {
  display: block;
  width: 87.5%;
}
.ant-col-push-21 {
  left: 87.5%;
}
.ant-col-pull-21 {
  right: 87.5%;
}
.ant-col-offset-21 {
  margin-left: 87.5%;
}
.ant-col-order-21 {
  order: 21;
}
.ant-col-20 {
  display: block;
  width: 83.33333333%;
}
.ant-col-push-20 {
  left: 83.33333333%;
}
.ant-col-pull-20 {
  right: 83.33333333%;
}
.ant-col-offset-20 {
  margin-left: 83.33333333%;
}
.ant-col-order-20 {
  order: 20;
}
.ant-col-19 {
  display: block;
  width: 79.16666667%;
}
.ant-col-push-19 {
  left: 79.16666667%;
}
.ant-col-pull-19 {
  right: 79.16666667%;
}
.ant-col-offset-19 {
  margin-left: 79.16666667%;
}
.ant-col-order-19 {
  order: 19;
}
.ant-col-18 {
  display: block;
  width: 75%;
}
.ant-col-push-18 {
  left: 75%;
}
.ant-col-pull-18 {
  right: 75%;
}
.ant-col-offset-18 {
  margin-left: 75%;
}
.ant-col-order-18 {
  order: 18;
}
.ant-col-17 {
  display: block;
  width: 70.83333333%;
}
.ant-col-push-17 {
  left: 70.83333333%;
}
.ant-col-pull-17 {
  right: 70.83333333%;
}
.ant-col-offset-17 {
  margin-left: 70.83333333%;
}
.ant-col-order-17 {
  order: 17;
}
.ant-col-16 {
  display: block;
  width: 66.66666667%;
}
.ant-col-push-16 {
  left: 66.66666667%;
}
.ant-col-pull-16 {
  right: 66.66666667%;
}
.ant-col-offset-16 {
  margin-left: 66.66666667%;
}
.ant-col-order-16 {
  order: 16;
}
.ant-col-15 {
  display: block;
  width: 62.5%;
}
.ant-col-push-15 {
  left: 62.5%;
}
.ant-col-pull-15 {
  right: 62.5%;
}
.ant-col-offset-15 {
  margin-left: 62.5%;
}
.ant-col-order-15 {
  order: 15;
}
.ant-col-14 {
  display: block;
  width: 58.33333333%;
}
.ant-col-push-14 {
  left: 58.33333333%;
}
.ant-col-pull-14 {
  right: 58.33333333%;
}
.ant-col-offset-14 {
  margin-left: 58.33333333%;
}
.ant-col-order-14 {
  order: 14;
}
.ant-col-13 {
  display: block;
  width: 54.16666667%;
}
.ant-col-push-13 {
  left: 54.16666667%;
}
.ant-col-pull-13 {
  right: 54.16666667%;
}
.ant-col-offset-13 {
  margin-left: 54.16666667%;
}
.ant-col-order-13 {
  order: 13;
}
.ant-col-12 {
  display: block;
  width: 50%;
}
.ant-col-push-12 {
  left: 50%;
}
.ant-col-pull-12 {
  right: 50%;
}
.ant-col-offset-12 {
  margin-left: 50%;
}
.ant-col-order-12 {
  order: 12;
}
.ant-col-11 {
  display: block;
  width: 45.83333333%;
}
.ant-col-push-11 {
  left: 45.83333333%;
}
.ant-col-pull-11 {
  right: 45.83333333%;
}
.ant-col-offset-11 {
  margin-left: 45.83333333%;
}
.ant-col-order-11 {
  order: 11;
}
.ant-col-10 {
  display: block;
  width: 41.66666667%;
}
.ant-col-push-10 {
  left: 41.66666667%;
}
.ant-col-pull-10 {
  right: 41.66666667%;
}
.ant-col-offset-10 {
  margin-left: 41.66666667%;
}
.ant-col-order-10 {
  order: 10;
}
.ant-col-9 {
  display: block;
  width: 37.5%;
}
.ant-col-push-9 {
  left: 37.5%;
}
.ant-col-pull-9 {
  right: 37.5%;
}
.ant-col-offset-9 {
  margin-left: 37.5%;
}
.ant-col-order-9 {
  order: 9;
}
.ant-col-8 {
  display: block;
  width: 33.33333333%;
}
.ant-col-push-8 {
  left: 33.33333333%;
}
.ant-col-pull-8 {
  right: 33.33333333%;
}
.ant-col-offset-8 {
  margin-left: 33.33333333%;
}
.ant-col-order-8 {
  order: 8;
}
.ant-col-7 {
  display: block;
  width: 29.16666667%;
}
.ant-col-push-7 {
  left: 29.16666667%;
}
.ant-col-pull-7 {
  right: 29.16666667%;
}
.ant-col-offset-7 {
  margin-left: 29.16666667%;
}
.ant-col-order-7 {
  order: 7;
}
.ant-col-6 {
  display: block;
  width: 25%;
}
.ant-col-push-6 {
  left: 25%;
}
.ant-col-pull-6 {
  right: 25%;
}
.ant-col-offset-6 {
  margin-left: 25%;
}
.ant-col-order-6 {
  order: 6;
}
.ant-col-5 {
  display: block;
  width: 20.83333333%;
}
.ant-col-push-5 {
  left: 20.83333333%;
}
.ant-col-pull-5 {
  right: 20.83333333%;
}
.ant-col-offset-5 {
  margin-left: 20.83333333%;
}
.ant-col-order-5 {
  order: 5;
}
.ant-col-4 {
  display: block;
  width: 16.66666667%;
}
.ant-col-push-4 {
  left: 16.66666667%;
}
.ant-col-pull-4 {
  right: 16.66666667%;
}
.ant-col-offset-4 {
  margin-left: 16.66666667%;
}
.ant-col-order-4 {
  order: 4;
}
.ant-col-3 {
  display: block;
  width: 12.5%;
}
.ant-col-push-3 {
  left: 12.5%;
}
.ant-col-pull-3 {
  right: 12.5%;
}
.ant-col-offset-3 {
  margin-left: 12.5%;
}
.ant-col-order-3 {
  order: 3;
}
.ant-col-2 {
  display: block;
  width: 8.33333333%;
}
.ant-col-push-2 {
  left: 8.33333333%;
}
.ant-col-pull-2 {
  right: 8.33333333%;
}
.ant-col-offset-2 {
  margin-left: 8.33333333%;
}
.ant-col-order-2 {
  order: 2;
}
.ant-col-1 {
  display: block;
  width: 4.16666667%;
}
.ant-col-push-1 {
  left: 4.16666667%;
}
.ant-col-pull-1 {
  right: 4.16666667%;
}
.ant-col-offset-1 {
  margin-left: 4.16666667%;
}
.ant-col-order-1 {
  order: 1;
}
.ant-col-0 {
  display: none;
}
.ant-col-push-0 {
  left: auto;
}
.ant-col-pull-0 {
  right: auto;
}
.ant-col-push-0 {
  left: auto;
}
.ant-col-pull-0 {
  right: auto;
}
.ant-col-offset-0 {
  margin-left: 0;
}
.ant-col-order-0 {
  order: 0;
}
.ant-col-xs-1, .ant-col-xs-2, .ant-col-xs-3, .ant-col-xs-4, .ant-col-xs-5, .ant-col-xs-6, .ant-col-xs-7, .ant-col-xs-8, .ant-col-xs-9, .ant-col-xs-10, .ant-col-xs-11, .ant-col-xs-12, .ant-col-xs-13, .ant-col-xs-14, .ant-col-xs-15, .ant-col-xs-16, .ant-col-xs-17, .ant-col-xs-18, .ant-col-xs-19, .ant-col-xs-20, .ant-col-xs-21, .ant-col-xs-22, .ant-col-xs-23, .ant-col-xs-24 {
  float: left;
  flex: 0 0 auto;
}
.ant-col-xs-24 {
  display: block;
  width: 100%;
}
.ant-col-xs-push-24 {
  left: 100%;
}
.ant-col-xs-pull-24 {
  right: 100%;
}
.ant-col-xs-offset-24 {
  margin-left: 100%;
}
.ant-col-xs-order-24 {
  order: 24;
}
.ant-col-xs-23 {
  display: block;
  width: 95.83333333%;
}
.ant-col-xs-push-23 {
  left: 95.83333333%;
}
.ant-col-xs-pull-23 {
  right: 95.83333333%;
}
.ant-col-xs-offset-23 {
  margin-left: 95.83333333%;
}
.ant-col-xs-order-23 {
  order: 23;
}
.ant-col-xs-22 {
  display: block;
  width: 91.66666667%;
}
.ant-col-xs-push-22 {
  left: 91.66666667%;
}
.ant-col-xs-pull-22 {
  right: 91.66666667%;
}
.ant-col-xs-offset-22 {
  margin-left: 91.66666667%;
}
.ant-col-xs-order-22 {
  order: 22;
}
.ant-col-xs-21 {
  display: block;
  width: 87.5%;
}
.ant-col-xs-push-21 {
  left: 87.5%;
}
.ant-col-xs-pull-21 {
  right: 87.5%;
}
.ant-col-xs-offset-21 {
  margin-left: 87.5%;
}
.ant-col-xs-order-21 {
  order: 21;
}
.ant-col-xs-20 {
  display: block;
  width: 83.33333333%;
}
.ant-col-xs-push-20 {
  left: 83.33333333%;
}
.ant-col-xs-pull-20 {
  right: 83.33333333%;
}
.ant-col-xs-offset-20 {
  margin-left: 83.33333333%;
}
.ant-col-xs-order-20 {
  order: 20;
}
.ant-col-xs-19 {
  display: block;
  width: 79.16666667%;
}
.ant-col-xs-push-19 {
  left: 79.16666667%;
}
.ant-col-xs-pull-19 {
  right: 79.16666667%;
}
.ant-col-xs-offset-19 {
  margin-left: 79.16666667%;
}
.ant-col-xs-order-19 {
  order: 19;
}
.ant-col-xs-18 {
  display: block;
  width: 75%;
}
.ant-col-xs-push-18 {
  left: 75%;
}
.ant-col-xs-pull-18 {
  right: 75%;
}
.ant-col-xs-offset-18 {
  margin-left: 75%;
}
.ant-col-xs-order-18 {
  order: 18;
}
.ant-col-xs-17 {
  display: block;
  width: 70.83333333%;
}
.ant-col-xs-push-17 {
  left: 70.83333333%;
}
.ant-col-xs-pull-17 {
  right: 70.83333333%;
}
.ant-col-xs-offset-17 {
  margin-left: 70.83333333%;
}
.ant-col-xs-order-17 {
  order: 17;
}
.ant-col-xs-16 {
  display: block;
  width: 66.66666667%;
}
.ant-col-xs-push-16 {
  left: 66.66666667%;
}
.ant-col-xs-pull-16 {
  right: 66.66666667%;
}
.ant-col-xs-offset-16 {
  margin-left: 66.66666667%;
}
.ant-col-xs-order-16 {
  order: 16;
}
.ant-col-xs-15 {
  display: block;
  width: 62.5%;
}
.ant-col-xs-push-15 {
  left: 62.5%;
}
.ant-col-xs-pull-15 {
  right: 62.5%;
}
.ant-col-xs-offset-15 {
  margin-left: 62.5%;
}
.ant-col-xs-order-15 {
  order: 15;
}
.ant-col-xs-14 {
  display: block;
  width: 58.33333333%;
}
.ant-col-xs-push-14 {
  left: 58.33333333%;
}
.ant-col-xs-pull-14 {
  right: 58.33333333%;
}
.ant-col-xs-offset-14 {
  margin-left: 58.33333333%;
}
.ant-col-xs-order-14 {
  order: 14;
}
.ant-col-xs-13 {
  display: block;
  width: 54.16666667%;
}
.ant-col-xs-push-13 {
  left: 54.16666667%;
}
.ant-col-xs-pull-13 {
  right: 54.16666667%;
}
.ant-col-xs-offset-13 {
  margin-left: 54.16666667%;
}
.ant-col-xs-order-13 {
  order: 13;
}
.ant-col-xs-12 {
  display: block;
  width: 50%;
}
.ant-col-xs-push-12 {
  left: 50%;
}
.ant-col-xs-pull-12 {
  right: 50%;
}
.ant-col-xs-offset-12 {
  margin-left: 50%;
}
.ant-col-xs-order-12 {
  order: 12;
}
.ant-col-xs-11 {
  display: block;
  width: 45.83333333%;
}
.ant-col-xs-push-11 {
  left: 45.83333333%;
}
.ant-col-xs-pull-11 {
  right: 45.83333333%;
}
.ant-col-xs-offset-11 {
  margin-left: 45.83333333%;
}
.ant-col-xs-order-11 {
  order: 11;
}
.ant-col-xs-10 {
  display: block;
  width: 41.66666667%;
}
.ant-col-xs-push-10 {
  left: 41.66666667%;
}
.ant-col-xs-pull-10 {
  right: 41.66666667%;
}
.ant-col-xs-offset-10 {
  margin-left: 41.66666667%;
}
.ant-col-xs-order-10 {
  order: 10;
}
.ant-col-xs-9 {
  display: block;
  width: 37.5%;
}
.ant-col-xs-push-9 {
  left: 37.5%;
}
.ant-col-xs-pull-9 {
  right: 37.5%;
}
.ant-col-xs-offset-9 {
  margin-left: 37.5%;
}
.ant-col-xs-order-9 {
  order: 9;
}
.ant-col-xs-8 {
  display: block;
  width: 33.33333333%;
}
.ant-col-xs-push-8 {
  left: 33.33333333%;
}
.ant-col-xs-pull-8 {
  right: 33.33333333%;
}
.ant-col-xs-offset-8 {
  margin-left: 33.33333333%;
}
.ant-col-xs-order-8 {
  order: 8;
}
.ant-col-xs-7 {
  display: block;
  width: 29.16666667%;
}
.ant-col-xs-push-7 {
  left: 29.16666667%;
}
.ant-col-xs-pull-7 {
  right: 29.16666667%;
}
.ant-col-xs-offset-7 {
  margin-left: 29.16666667%;
}
.ant-col-xs-order-7 {
  order: 7;
}
.ant-col-xs-6 {
  display: block;
  width: 25%;
}
.ant-col-xs-push-6 {
  left: 25%;
}
.ant-col-xs-pull-6 {
  right: 25%;
}
.ant-col-xs-offset-6 {
  margin-left: 25%;
}
.ant-col-xs-order-6 {
  order: 6;
}
.ant-col-xs-5 {
  display: block;
  width: 20.83333333%;
}
.ant-col-xs-push-5 {
  left: 20.83333333%;
}
.ant-col-xs-pull-5 {
  right: 20.83333333%;
}
.ant-col-xs-offset-5 {
  margin-left: 20.83333333%;
}
.ant-col-xs-order-5 {
  order: 5;
}
.ant-col-xs-4 {
  display: block;
  width: 16.66666667%;
}
.ant-col-xs-push-4 {
  left: 16.66666667%;
}
.ant-col-xs-pull-4 {
  right: 16.66666667%;
}
.ant-col-xs-offset-4 {
  margin-left: 16.66666667%;
}
.ant-col-xs-order-4 {
  order: 4;
}
.ant-col-xs-3 {
  display: block;
  width: 12.5%;
}
.ant-col-xs-push-3 {
  left: 12.5%;
}
.ant-col-xs-pull-3 {
  right: 12.5%;
}
.ant-col-xs-offset-3 {
  margin-left: 12.5%;
}
.ant-col-xs-order-3 {
  order: 3;
}
.ant-col-xs-2 {
  display: block;
  width: 8.33333333%;
}
.ant-col-xs-push-2 {
  left: 8.33333333%;
}
.ant-col-xs-pull-2 {
  right: 8.33333333%;
}
.ant-col-xs-offset-2 {
  margin-left: 8.33333333%;
}
.ant-col-xs-order-2 {
  order: 2;
}
.ant-col-xs-1 {
  display: block;
  width: 4.16666667%;
}
.ant-col-xs-push-1 {
  left: 4.16666667%;
}
.ant-col-xs-pull-1 {
  right: 4.16666667%;
}
.ant-col-xs-offset-1 {
  margin-left: 4.16666667%;
}
.ant-col-xs-order-1 {
  order: 1;
}
.ant-col-xs-0 {
  display: none;
}
.ant-col-push-0 {
  left: auto;
}
.ant-col-pull-0 {
  right: auto;
}
.ant-col-xs-push-0 {
  left: auto;
}
.ant-col-xs-pull-0 {
  right: auto;
}
.ant-col-xs-offset-0 {
  margin-left: 0;
}
.ant-col-xs-order-0 {
  order: 0;
}
@media (min-width: 768px) {
  .ant-col-sm-1, .ant-col-sm-2, .ant-col-sm-3, .ant-col-sm-4, .ant-col-sm-5, .ant-col-sm-6, .ant-col-sm-7, .ant-col-sm-8, .ant-col-sm-9, .ant-col-sm-10, .ant-col-sm-11, .ant-col-sm-12, .ant-col-sm-13, .ant-col-sm-14, .ant-col-sm-15, .ant-col-sm-16, .ant-col-sm-17, .ant-col-sm-18, .ant-col-sm-19, .ant-col-sm-20, .ant-col-sm-21, .ant-col-sm-22, .ant-col-sm-23, .ant-col-sm-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-sm-24 {
    display: block;
    width: 100%;
  }
  .ant-col-sm-push-24 {
    left: 100%;
  }
  .ant-col-sm-pull-24 {
    right: 100%;
  }
  .ant-col-sm-offset-24 {
    margin-left: 100%;
  }
  .ant-col-sm-order-24 {
    order: 24;
  }
  .ant-col-sm-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-sm-push-23 {
    left: 95.83333333%;
  }
  .ant-col-sm-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-sm-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-sm-order-23 {
    order: 23;
  }
  .ant-col-sm-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-sm-push-22 {
    left: 91.66666667%;
  }
  .ant-col-sm-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-sm-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-sm-order-22 {
    order: 22;
  }
  .ant-col-sm-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-sm-push-21 {
    left: 87.5%;
  }
  .ant-col-sm-pull-21 {
    right: 87.5%;
  }
  .ant-col-sm-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-sm-order-21 {
    order: 21;
  }
  .ant-col-sm-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-sm-push-20 {
    left: 83.33333333%;
  }
  .ant-col-sm-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-sm-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-sm-order-20 {
    order: 20;
  }
  .ant-col-sm-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-sm-push-19 {
    left: 79.16666667%;
  }
  .ant-col-sm-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-sm-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-sm-order-19 {
    order: 19;
  }
  .ant-col-sm-18 {
    display: block;
    width: 75%;
  }
  .ant-col-sm-push-18 {
    left: 75%;
  }
  .ant-col-sm-pull-18 {
    right: 75%;
  }
  .ant-col-sm-offset-18 {
    margin-left: 75%;
  }
  .ant-col-sm-order-18 {
    order: 18;
  }
  .ant-col-sm-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-sm-push-17 {
    left: 70.83333333%;
  }
  .ant-col-sm-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-sm-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-sm-order-17 {
    order: 17;
  }
  .ant-col-sm-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-sm-push-16 {
    left: 66.66666667%;
  }
  .ant-col-sm-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-sm-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-sm-order-16 {
    order: 16;
  }
  .ant-col-sm-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-sm-push-15 {
    left: 62.5%;
  }
  .ant-col-sm-pull-15 {
    right: 62.5%;
  }
  .ant-col-sm-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-sm-order-15 {
    order: 15;
  }
  .ant-col-sm-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-sm-push-14 {
    left: 58.33333333%;
  }
  .ant-col-sm-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-sm-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-sm-order-14 {
    order: 14;
  }
  .ant-col-sm-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-sm-push-13 {
    left: 54.16666667%;
  }
  .ant-col-sm-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-sm-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-sm-order-13 {
    order: 13;
  }
  .ant-col-sm-12 {
    display: block;
    width: 50%;
  }
  .ant-col-sm-push-12 {
    left: 50%;
  }
  .ant-col-sm-pull-12 {
    right: 50%;
  }
  .ant-col-sm-offset-12 {
    margin-left: 50%;
  }
  .ant-col-sm-order-12 {
    order: 12;
  }
  .ant-col-sm-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-sm-push-11 {
    left: 45.83333333%;
  }
  .ant-col-sm-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-sm-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-sm-order-11 {
    order: 11;
  }
  .ant-col-sm-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-sm-push-10 {
    left: 41.66666667%;
  }
  .ant-col-sm-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-sm-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-sm-order-10 {
    order: 10;
  }
  .ant-col-sm-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-sm-push-9 {
    left: 37.5%;
  }
  .ant-col-sm-pull-9 {
    right: 37.5%;
  }
  .ant-col-sm-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-sm-order-9 {
    order: 9;
  }
  .ant-col-sm-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-sm-push-8 {
    left: 33.33333333%;
  }
  .ant-col-sm-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-sm-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-sm-order-8 {
    order: 8;
  }
  .ant-col-sm-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-sm-push-7 {
    left: 29.16666667%;
  }
  .ant-col-sm-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-sm-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-sm-order-7 {
    order: 7;
  }
  .ant-col-sm-6 {
    display: block;
    width: 25%;
  }
  .ant-col-sm-push-6 {
    left: 25%;
  }
  .ant-col-sm-pull-6 {
    right: 25%;
  }
  .ant-col-sm-offset-6 {
    margin-left: 25%;
  }
  .ant-col-sm-order-6 {
    order: 6;
  }
  .ant-col-sm-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-sm-push-5 {
    left: 20.83333333%;
  }
  .ant-col-sm-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-sm-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-sm-order-5 {
    order: 5;
  }
  .ant-col-sm-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-sm-push-4 {
    left: 16.66666667%;
  }
  .ant-col-sm-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-sm-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-sm-order-4 {
    order: 4;
  }
  .ant-col-sm-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-sm-push-3 {
    left: 12.5%;
  }
  .ant-col-sm-pull-3 {
    right: 12.5%;
  }
  .ant-col-sm-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-sm-order-3 {
    order: 3;
  }
  .ant-col-sm-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-sm-push-2 {
    left: 8.33333333%;
  }
  .ant-col-sm-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-sm-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-sm-order-2 {
    order: 2;
  }
  .ant-col-sm-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-sm-push-1 {
    left: 4.16666667%;
  }
  .ant-col-sm-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-sm-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-sm-order-1 {
    order: 1;
  }
  .ant-col-sm-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-sm-push-0 {
    left: auto;
  }
  .ant-col-sm-pull-0 {
    right: auto;
  }
  .ant-col-sm-offset-0 {
    margin-left: 0;
  }
  .ant-col-sm-order-0 {
    order: 0;
  }
}
@media (min-width: 992px) {
  .ant-col-md-1, .ant-col-md-2, .ant-col-md-3, .ant-col-md-4, .ant-col-md-5, .ant-col-md-6, .ant-col-md-7, .ant-col-md-8, .ant-col-md-9, .ant-col-md-10, .ant-col-md-11, .ant-col-md-12, .ant-col-md-13, .ant-col-md-14, .ant-col-md-15, .ant-col-md-16, .ant-col-md-17, .ant-col-md-18, .ant-col-md-19, .ant-col-md-20, .ant-col-md-21, .ant-col-md-22, .ant-col-md-23, .ant-col-md-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-md-24 {
    display: block;
    width: 100%;
  }
  .ant-col-md-push-24 {
    left: 100%;
  }
  .ant-col-md-pull-24 {
    right: 100%;
  }
  .ant-col-md-offset-24 {
    margin-left: 100%;
  }
  .ant-col-md-order-24 {
    order: 24;
  }
  .ant-col-md-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-md-push-23 {
    left: 95.83333333%;
  }
  .ant-col-md-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-md-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-md-order-23 {
    order: 23;
  }
  .ant-col-md-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-md-push-22 {
    left: 91.66666667%;
  }
  .ant-col-md-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-md-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-md-order-22 {
    order: 22;
  }
  .ant-col-md-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-md-push-21 {
    left: 87.5%;
  }
  .ant-col-md-pull-21 {
    right: 87.5%;
  }
  .ant-col-md-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-md-order-21 {
    order: 21;
  }
  .ant-col-md-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-md-push-20 {
    left: 83.33333333%;
  }
  .ant-col-md-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-md-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-md-order-20 {
    order: 20;
  }
  .ant-col-md-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-md-push-19 {
    left: 79.16666667%;
  }
  .ant-col-md-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-md-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-md-order-19 {
    order: 19;
  }
  .ant-col-md-18 {
    display: block;
    width: 75%;
  }
  .ant-col-md-push-18 {
    left: 75%;
  }
  .ant-col-md-pull-18 {
    right: 75%;
  }
  .ant-col-md-offset-18 {
    margin-left: 75%;
  }
  .ant-col-md-order-18 {
    order: 18;
  }
  .ant-col-md-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-md-push-17 {
    left: 70.83333333%;
  }
  .ant-col-md-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-md-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-md-order-17 {
    order: 17;
  }
  .ant-col-md-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-md-push-16 {
    left: 66.66666667%;
  }
  .ant-col-md-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-md-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-md-order-16 {
    order: 16;
  }
  .ant-col-md-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-md-push-15 {
    left: 62.5%;
  }
  .ant-col-md-pull-15 {
    right: 62.5%;
  }
  .ant-col-md-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-md-order-15 {
    order: 15;
  }
  .ant-col-md-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-md-push-14 {
    left: 58.33333333%;
  }
  .ant-col-md-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-md-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-md-order-14 {
    order: 14;
  }
  .ant-col-md-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-md-push-13 {
    left: 54.16666667%;
  }
  .ant-col-md-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-md-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-md-order-13 {
    order: 13;
  }
  .ant-col-md-12 {
    display: block;
    width: 50%;
  }
  .ant-col-md-push-12 {
    left: 50%;
  }
  .ant-col-md-pull-12 {
    right: 50%;
  }
  .ant-col-md-offset-12 {
    margin-left: 50%;
  }
  .ant-col-md-order-12 {
    order: 12;
  }
  .ant-col-md-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-md-push-11 {
    left: 45.83333333%;
  }
  .ant-col-md-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-md-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-md-order-11 {
    order: 11;
  }
  .ant-col-md-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-md-push-10 {
    left: 41.66666667%;
  }
  .ant-col-md-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-md-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-md-order-10 {
    order: 10;
  }
  .ant-col-md-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-md-push-9 {
    left: 37.5%;
  }
  .ant-col-md-pull-9 {
    right: 37.5%;
  }
  .ant-col-md-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-md-order-9 {
    order: 9;
  }
  .ant-col-md-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-md-push-8 {
    left: 33.33333333%;
  }
  .ant-col-md-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-md-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-md-order-8 {
    order: 8;
  }
  .ant-col-md-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-md-push-7 {
    left: 29.16666667%;
  }
  .ant-col-md-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-md-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-md-order-7 {
    order: 7;
  }
  .ant-col-md-6 {
    display: block;
    width: 25%;
  }
  .ant-col-md-push-6 {
    left: 25%;
  }
  .ant-col-md-pull-6 {
    right: 25%;
  }
  .ant-col-md-offset-6 {
    margin-left: 25%;
  }
  .ant-col-md-order-6 {
    order: 6;
  }
  .ant-col-md-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-md-push-5 {
    left: 20.83333333%;
  }
  .ant-col-md-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-md-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-md-order-5 {
    order: 5;
  }
  .ant-col-md-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-md-push-4 {
    left: 16.66666667%;
  }
  .ant-col-md-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-md-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-md-order-4 {
    order: 4;
  }
  .ant-col-md-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-md-push-3 {
    left: 12.5%;
  }
  .ant-col-md-pull-3 {
    right: 12.5%;
  }
  .ant-col-md-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-md-order-3 {
    order: 3;
  }
  .ant-col-md-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-md-push-2 {
    left: 8.33333333%;
  }
  .ant-col-md-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-md-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-md-order-2 {
    order: 2;
  }
  .ant-col-md-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-md-push-1 {
    left: 4.16666667%;
  }
  .ant-col-md-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-md-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-md-order-1 {
    order: 1;
  }
  .ant-col-md-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-md-push-0 {
    left: auto;
  }
  .ant-col-md-pull-0 {
    right: auto;
  }
  .ant-col-md-offset-0 {
    margin-left: 0;
  }
  .ant-col-md-order-0 {
    order: 0;
  }
}
@media (min-width: 1200px) {
  .ant-col-lg-1, .ant-col-lg-2, .ant-col-lg-3, .ant-col-lg-4, .ant-col-lg-5, .ant-col-lg-6, .ant-col-lg-7, .ant-col-lg-8, .ant-col-lg-9, .ant-col-lg-10, .ant-col-lg-11, .ant-col-lg-12, .ant-col-lg-13, .ant-col-lg-14, .ant-col-lg-15, .ant-col-lg-16, .ant-col-lg-17, .ant-col-lg-18, .ant-col-lg-19, .ant-col-lg-20, .ant-col-lg-21, .ant-col-lg-22, .ant-col-lg-23, .ant-col-lg-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-lg-24 {
    display: block;
    width: 100%;
  }
  .ant-col-lg-push-24 {
    left: 100%;
  }
  .ant-col-lg-pull-24 {
    right: 100%;
  }
  .ant-col-lg-offset-24 {
    margin-left: 100%;
  }
  .ant-col-lg-order-24 {
    order: 24;
  }
  .ant-col-lg-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-lg-push-23 {
    left: 95.83333333%;
  }
  .ant-col-lg-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-lg-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-lg-order-23 {
    order: 23;
  }
  .ant-col-lg-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-lg-push-22 {
    left: 91.66666667%;
  }
  .ant-col-lg-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-lg-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-lg-order-22 {
    order: 22;
  }
  .ant-col-lg-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-lg-push-21 {
    left: 87.5%;
  }
  .ant-col-lg-pull-21 {
    right: 87.5%;
  }
  .ant-col-lg-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-lg-order-21 {
    order: 21;
  }
  .ant-col-lg-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-lg-push-20 {
    left: 83.33333333%;
  }
  .ant-col-lg-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-lg-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-lg-order-20 {
    order: 20;
  }
  .ant-col-lg-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-lg-push-19 {
    left: 79.16666667%;
  }
  .ant-col-lg-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-lg-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-lg-order-19 {
    order: 19;
  }
  .ant-col-lg-18 {
    display: block;
    width: 75%;
  }
  .ant-col-lg-push-18 {
    left: 75%;
  }
  .ant-col-lg-pull-18 {
    right: 75%;
  }
  .ant-col-lg-offset-18 {
    margin-left: 75%;
  }
  .ant-col-lg-order-18 {
    order: 18;
  }
  .ant-col-lg-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-lg-push-17 {
    left: 70.83333333%;
  }
  .ant-col-lg-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-lg-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-lg-order-17 {
    order: 17;
  }
  .ant-col-lg-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-lg-push-16 {
    left: 66.66666667%;
  }
  .ant-col-lg-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-lg-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-lg-order-16 {
    order: 16;
  }
  .ant-col-lg-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-lg-push-15 {
    left: 62.5%;
  }
  .ant-col-lg-pull-15 {
    right: 62.5%;
  }
  .ant-col-lg-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-lg-order-15 {
    order: 15;
  }
  .ant-col-lg-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-lg-push-14 {
    left: 58.33333333%;
  }
  .ant-col-lg-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-lg-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-lg-order-14 {
    order: 14;
  }
  .ant-col-lg-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-lg-push-13 {
    left: 54.16666667%;
  }
  .ant-col-lg-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-lg-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-lg-order-13 {
    order: 13;
  }
  .ant-col-lg-12 {
    display: block;
    width: 50%;
  }
  .ant-col-lg-push-12 {
    left: 50%;
  }
  .ant-col-lg-pull-12 {
    right: 50%;
  }
  .ant-col-lg-offset-12 {
    margin-left: 50%;
  }
  .ant-col-lg-order-12 {
    order: 12;
  }
  .ant-col-lg-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-lg-push-11 {
    left: 45.83333333%;
  }
  .ant-col-lg-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-lg-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-lg-order-11 {
    order: 11;
  }
  .ant-col-lg-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-lg-push-10 {
    left: 41.66666667%;
  }
  .ant-col-lg-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-lg-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-lg-order-10 {
    order: 10;
  }
  .ant-col-lg-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-lg-push-9 {
    left: 37.5%;
  }
  .ant-col-lg-pull-9 {
    right: 37.5%;
  }
  .ant-col-lg-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-lg-order-9 {
    order: 9;
  }
  .ant-col-lg-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-lg-push-8 {
    left: 33.33333333%;
  }
  .ant-col-lg-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-lg-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-lg-order-8 {
    order: 8;
  }
  .ant-col-lg-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-lg-push-7 {
    left: 29.16666667%;
  }
  .ant-col-lg-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-lg-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-lg-order-7 {
    order: 7;
  }
  .ant-col-lg-6 {
    display: block;
    width: 25%;
  }
  .ant-col-lg-push-6 {
    left: 25%;
  }
  .ant-col-lg-pull-6 {
    right: 25%;
  }
  .ant-col-lg-offset-6 {
    margin-left: 25%;
  }
  .ant-col-lg-order-6 {
    order: 6;
  }
  .ant-col-lg-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-lg-push-5 {
    left: 20.83333333%;
  }
  .ant-col-lg-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-lg-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-lg-order-5 {
    order: 5;
  }
  .ant-col-lg-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-lg-push-4 {
    left: 16.66666667%;
  }
  .ant-col-lg-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-lg-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-lg-order-4 {
    order: 4;
  }
  .ant-col-lg-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-lg-push-3 {
    left: 12.5%;
  }
  .ant-col-lg-pull-3 {
    right: 12.5%;
  }
  .ant-col-lg-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-lg-order-3 {
    order: 3;
  }
  .ant-col-lg-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-lg-push-2 {
    left: 8.33333333%;
  }
  .ant-col-lg-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-lg-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-lg-order-2 {
    order: 2;
  }
  .ant-col-lg-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-lg-push-1 {
    left: 4.16666667%;
  }
  .ant-col-lg-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-lg-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-lg-order-1 {
    order: 1;
  }
  .ant-col-lg-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-lg-push-0 {
    left: auto;
  }
  .ant-col-lg-pull-0 {
    right: auto;
  }
  .ant-col-lg-offset-0 {
    margin-left: 0;
  }
  .ant-col-lg-order-0 {
    order: 0;
  }
}
@media (min-width: 1600px) {
  .ant-col-xl-1, .ant-col-xl-2, .ant-col-xl-3, .ant-col-xl-4, .ant-col-xl-5, .ant-col-xl-6, .ant-col-xl-7, .ant-col-xl-8, .ant-col-xl-9, .ant-col-xl-10, .ant-col-xl-11, .ant-col-xl-12, .ant-col-xl-13, .ant-col-xl-14, .ant-col-xl-15, .ant-col-xl-16, .ant-col-xl-17, .ant-col-xl-18, .ant-col-xl-19, .ant-col-xl-20, .ant-col-xl-21, .ant-col-xl-22, .ant-col-xl-23, .ant-col-xl-24 {
    float: left;
    flex: 0 0 auto;
  }
  .ant-col-xl-24 {
    display: block;
    width: 100%;
  }
  .ant-col-xl-push-24 {
    left: 100%;
  }
  .ant-col-xl-pull-24 {
    right: 100%;
  }
  .ant-col-xl-offset-24 {
    margin-left: 100%;
  }
  .ant-col-xl-order-24 {
    order: 24;
  }
  .ant-col-xl-23 {
    display: block;
    width: 95.83333333%;
  }
  .ant-col-xl-push-23 {
    left: 95.83333333%;
  }
  .ant-col-xl-pull-23 {
    right: 95.83333333%;
  }
  .ant-col-xl-offset-23 {
    margin-left: 95.83333333%;
  }
  .ant-col-xl-order-23 {
    order: 23;
  }
  .ant-col-xl-22 {
    display: block;
    width: 91.66666667%;
  }
  .ant-col-xl-push-22 {
    left: 91.66666667%;
  }
  .ant-col-xl-pull-22 {
    right: 91.66666667%;
  }
  .ant-col-xl-offset-22 {
    margin-left: 91.66666667%;
  }
  .ant-col-xl-order-22 {
    order: 22;
  }
  .ant-col-xl-21 {
    display: block;
    width: 87.5%;
  }
  .ant-col-xl-push-21 {
    left: 87.5%;
  }
  .ant-col-xl-pull-21 {
    right: 87.5%;
  }
  .ant-col-xl-offset-21 {
    margin-left: 87.5%;
  }
  .ant-col-xl-order-21 {
    order: 21;
  }
  .ant-col-xl-20 {
    display: block;
    width: 83.33333333%;
  }
  .ant-col-xl-push-20 {
    left: 83.33333333%;
  }
  .ant-col-xl-pull-20 {
    right: 83.33333333%;
  }
  .ant-col-xl-offset-20 {
    margin-left: 83.33333333%;
  }
  .ant-col-xl-order-20 {
    order: 20;
  }
  .ant-col-xl-19 {
    display: block;
    width: 79.16666667%;
  }
  .ant-col-xl-push-19 {
    left: 79.16666667%;
  }
  .ant-col-xl-pull-19 {
    right: 79.16666667%;
  }
  .ant-col-xl-offset-19 {
    margin-left: 79.16666667%;
  }
  .ant-col-xl-order-19 {
    order: 19;
  }
  .ant-col-xl-18 {
    display: block;
    width: 75%;
  }
  .ant-col-xl-push-18 {
    left: 75%;
  }
  .ant-col-xl-pull-18 {
    right: 75%;
  }
  .ant-col-xl-offset-18 {
    margin-left: 75%;
  }
  .ant-col-xl-order-18 {
    order: 18;
  }
  .ant-col-xl-17 {
    display: block;
    width: 70.83333333%;
  }
  .ant-col-xl-push-17 {
    left: 70.83333333%;
  }
  .ant-col-xl-pull-17 {
    right: 70.83333333%;
  }
  .ant-col-xl-offset-17 {
    margin-left: 70.83333333%;
  }
  .ant-col-xl-order-17 {
    order: 17;
  }
  .ant-col-xl-16 {
    display: block;
    width: 66.66666667%;
  }
  .ant-col-xl-push-16 {
    left: 66.66666667%;
  }
  .ant-col-xl-pull-16 {
    right: 66.66666667%;
  }
  .ant-col-xl-offset-16 {
    margin-left: 66.66666667%;
  }
  .ant-col-xl-order-16 {
    order: 16;
  }
  .ant-col-xl-15 {
    display: block;
    width: 62.5%;
  }
  .ant-col-xl-push-15 {
    left: 62.5%;
  }
  .ant-col-xl-pull-15 {
    right: 62.5%;
  }
  .ant-col-xl-offset-15 {
    margin-left: 62.5%;
  }
  .ant-col-xl-order-15 {
    order: 15;
  }
  .ant-col-xl-14 {
    display: block;
    width: 58.33333333%;
  }
  .ant-col-xl-push-14 {
    left: 58.33333333%;
  }
  .ant-col-xl-pull-14 {
    right: 58.33333333%;
  }
  .ant-col-xl-offset-14 {
    margin-left: 58.33333333%;
  }
  .ant-col-xl-order-14 {
    order: 14;
  }
  .ant-col-xl-13 {
    display: block;
    width: 54.16666667%;
  }
  .ant-col-xl-push-13 {
    left: 54.16666667%;
  }
  .ant-col-xl-pull-13 {
    right: 54.16666667%;
  }
  .ant-col-xl-offset-13 {
    margin-left: 54.16666667%;
  }
  .ant-col-xl-order-13 {
    order: 13;
  }
  .ant-col-xl-12 {
    display: block;
    width: 50%;
  }
  .ant-col-xl-push-12 {
    left: 50%;
  }
  .ant-col-xl-pull-12 {
    right: 50%;
  }
  .ant-col-xl-offset-12 {
    margin-left: 50%;
  }
  .ant-col-xl-order-12 {
    order: 12;
  }
  .ant-col-xl-11 {
    display: block;
    width: 45.83333333%;
  }
  .ant-col-xl-push-11 {
    left: 45.83333333%;
  }
  .ant-col-xl-pull-11 {
    right: 45.83333333%;
  }
  .ant-col-xl-offset-11 {
    margin-left: 45.83333333%;
  }
  .ant-col-xl-order-11 {
    order: 11;
  }
  .ant-col-xl-10 {
    display: block;
    width: 41.66666667%;
  }
  .ant-col-xl-push-10 {
    left: 41.66666667%;
  }
  .ant-col-xl-pull-10 {
    right: 41.66666667%;
  }
  .ant-col-xl-offset-10 {
    margin-left: 41.66666667%;
  }
  .ant-col-xl-order-10 {
    order: 10;
  }
  .ant-col-xl-9 {
    display: block;
    width: 37.5%;
  }
  .ant-col-xl-push-9 {
    left: 37.5%;
  }
  .ant-col-xl-pull-9 {
    right: 37.5%;
  }
  .ant-col-xl-offset-9 {
    margin-left: 37.5%;
  }
  .ant-col-xl-order-9 {
    order: 9;
  }
  .ant-col-xl-8 {
    display: block;
    width: 33.33333333%;
  }
  .ant-col-xl-push-8 {
    left: 33.33333333%;
  }
  .ant-col-xl-pull-8 {
    right: 33.33333333%;
  }
  .ant-col-xl-offset-8 {
    margin-left: 33.33333333%;
  }
  .ant-col-xl-order-8 {
    order: 8;
  }
  .ant-col-xl-7 {
    display: block;
    width: 29.16666667%;
  }
  .ant-col-xl-push-7 {
    left: 29.16666667%;
  }
  .ant-col-xl-pull-7 {
    right: 29.16666667%;
  }
  .ant-col-xl-offset-7 {
    margin-left: 29.16666667%;
  }
  .ant-col-xl-order-7 {
    order: 7;
  }
  .ant-col-xl-6 {
    display: block;
    width: 25%;
  }
  .ant-col-xl-push-6 {
    left: 25%;
  }
  .ant-col-xl-pull-6 {
    right: 25%;
  }
  .ant-col-xl-offset-6 {
    margin-left: 25%;
  }
  .ant-col-xl-order-6 {
    order: 6;
  }
  .ant-col-xl-5 {
    display: block;
    width: 20.83333333%;
  }
  .ant-col-xl-push-5 {
    left: 20.83333333%;
  }
  .ant-col-xl-pull-5 {
    right: 20.83333333%;
  }
  .ant-col-xl-offset-5 {
    margin-left: 20.83333333%;
  }
  .ant-col-xl-order-5 {
    order: 5;
  }
  .ant-col-xl-4 {
    display: block;
    width: 16.66666667%;
  }
  .ant-col-xl-push-4 {
    left: 16.66666667%;
  }
  .ant-col-xl-pull-4 {
    right: 16.66666667%;
  }
  .ant-col-xl-offset-4 {
    margin-left: 16.66666667%;
  }
  .ant-col-xl-order-4 {
    order: 4;
  }
  .ant-col-xl-3 {
    display: block;
    width: 12.5%;
  }
  .ant-col-xl-push-3 {
    left: 12.5%;
  }
  .ant-col-xl-pull-3 {
    right: 12.5%;
  }
  .ant-col-xl-offset-3 {
    margin-left: 12.5%;
  }
  .ant-col-xl-order-3 {
    order: 3;
  }
  .ant-col-xl-2 {
    display: block;
    width: 8.33333333%;
  }
  .ant-col-xl-push-2 {
    left: 8.33333333%;
  }
  .ant-col-xl-pull-2 {
    right: 8.33333333%;
  }
  .ant-col-xl-offset-2 {
    margin-left: 8.33333333%;
  }
  .ant-col-xl-order-2 {
    order: 2;
  }
  .ant-col-xl-1 {
    display: block;
    width: 4.16666667%;
  }
  .ant-col-xl-push-1 {
    left: 4.16666667%;
  }
  .ant-col-xl-pull-1 {
    right: 4.16666667%;
  }
  .ant-col-xl-offset-1 {
    margin-left: 4.16666667%;
  }
  .ant-col-xl-order-1 {
    order: 1;
  }
  .ant-col-xl-0 {
    display: none;
  }
  .ant-col-push-0 {
    left: auto;
  }
  .ant-col-pull-0 {
    right: auto;
  }
  .ant-col-xl-push-0 {
    left: auto;
  }
  .ant-col-xl-pull-0 {
    right: auto;
  }
  .ant-col-xl-offset-0 {
    margin-left: 0;
  }
  .ant-col-xl-order-0 {
    order: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzRowComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzRowComponent.propDecorators = {
    "nzType": [{ type: Input },],
    "nzAlign": [{ type: Input },],
    "nzJustify": [{ type: Input },],
    "nzGutter": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */

class NzColComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _nzRow
     * @param {?} _renderer
     */
    constructor(_elementRef, _nzRow, _renderer) {
        this._elementRef = _elementRef;
        this._nzRow = _nzRow;
        this._renderer = _renderer;
        this._classList = [];
        this._prefixCls = 'ant-col';
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @return {?}
     */
    get paddingLeft() {
        return this._nzRow && this._nzRow._gutter / 2;
    }
    /**
     * @return {?}
     */
    get paddingRight() {
        return this._nzRow && this._nzRow._gutter / 2;
    }
    /**
     * temp solution since no method add classMap to host https://github.com/angular/angular/issues/7289
     * @return {?}
     */
    setClassMap() {
        this._classList.forEach(_className => {
            this._renderer.removeClass(this._el, _className);
        });
        this._classList = [
            isNotNil(this.nzSpan) && `${this._prefixCls}-${this.nzSpan}`,
            isNotNil(this.nzOrder) && `${this._prefixCls}-order-${this.nzOrder}`,
            isNotNil(this.nzOffset) && `${this._prefixCls}-offset-${this.nzOffset}`,
            isNotNil(this.nzPull) && `${this._prefixCls}-pull-${this.nzPull}`,
            isNotNil(this.nzPush) && `${this._prefixCls}-push-${this.nzPush}`,
            ...this.generateClass()
        ];
        this._classList = this._classList.filter((item) => {
            return !!item;
        });
        this._classList.forEach(_className => {
            this._renderer.addClass(this._el, _className);
        });
    }
    /**
     * @return {?}
     */
    generateClass() {
        const /** @type {?} */ listOfSizeInputName = ['nzXs', 'nzSm', 'nzMd', 'nzLg', 'nzXl'];
        const /** @type {?} */ listOfClassName = [];
        listOfSizeInputName.forEach(name => {
            const /** @type {?} */ sizeName = name.replace('nz', '').toLowerCase();
            if (isNotNil(this[name])) {
                if ((typeof (this[name]) === 'number') || (typeof (this[name]) === 'string')) {
                    listOfClassName.push(`${this._prefixCls}-${sizeName}-${this[name]}`);
                }
                else {
                    listOfClassName.push(this[name] && isNotNil(this[name].span) && `${this._prefixCls}-${sizeName}-${this[name].span}`);
                    listOfClassName.push(this[name] && isNotNil(this[name].pull) && `${this._prefixCls}-${sizeName}-pull-${this[name].pull}`);
                    listOfClassName.push(this[name] && isNotNil(this[name].push) && `${this._prefixCls}-${sizeName}-push-${this[name].push}`);
                    listOfClassName.push(this[name] && isNotNil(this[name].offset) && `${this._prefixCls}-${sizeName}-offset-${this[name].offset}`);
                    listOfClassName.push(this[name] && isNotNil(this[name].order) && `${this._prefixCls}-${sizeName}-order-${this[name].order}`);
                }
            }
        });
        return listOfClassName;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzColComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-col',
                template: `
    <ng-content></ng-content>
  `,
                styles: []
            },] },
];
/** @nocollapse */
NzColComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NzRowComponent, decorators: [{ type: Optional }, { type: Host },] },
    { type: Renderer2, },
];
NzColComponent.propDecorators = {
    "paddingLeft": [{ type: HostBinding, args: ['style.padding-left.px',] },],
    "paddingRight": [{ type: HostBinding, args: ['style.padding-right.px',] },],
    "nzSpan": [{ type: Input },],
    "nzOrder": [{ type: Input },],
    "nzOffset": [{ type: Input },],
    "nzPush": [{ type: Input },],
    "nzPull": [{ type: Input },],
    "nzXs": [{ type: Input },],
    "nzSm": [{ type: Input },],
    "nzMd": [{ type: Input },],
    "nzLg": [{ type: Input },],
    "nzXl": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzColDirective extends NzColComponent {
}
NzColDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-col]'
            },] },
];
/** @nocollapse */
NzColDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzGridModule {
}
NzGridModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzRowComponent, NzColDirective, NzColComponent],
                exports: [NzRowComponent, NzColDirective, NzColComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzGridModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzInputNumberComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._disabled = false;
        this._size = 'default';
        this._prefixCls = 'ant-input-number';
        this._step = 1;
        this._precisionStep = 0;
        this._precisionFactor = 1;
        this._disabledUp = false;
        this._disabledDown = false;
        this._focused = false;
        this._mouseInside = false;
        this._allowClear = false;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.nzPlaceHolder = '';
        this.nzMin = -Infinity;
        this.nzMax = Infinity;
        this.nzFormatter = (value) => value;
        this.nzParser = (value) => value;
        // TODO: should reconsider the payload
        this.nzBlur = new EventEmitter();
        this.nzFocus = new EventEmitter();
        this._el = this._elementRef.nativeElement;
        this._renderer.addClass(this._el, `${this._prefixCls}`);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAllowClear(value) {
        this._allowClear = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAllowClear() {
        return this._allowClear;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._renderer.removeClass(this._el, `${this._prefixCls}-${this._size}`);
        this._size = { large: 'lg', small: 'sm' }[value];
        this._renderer.addClass(this._el, `${this._prefixCls}-${this._size}`);
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzStep(value) {
        this._step = value;
        const /** @type {?} */ stepString = value.toString();
        if (stepString.indexOf('e-') >= 0) {
            this._precisionStep = parseInt(stepString.slice(stepString.indexOf('e-')), 10);
        }
        if (stepString.indexOf('.') >= 0) {
            this._precisionStep = stepString.length - stepString.indexOf('.') - 1;
        }
        this._precisionFactor = Math.pow(10, this._precisionStep);
    }
    /**
     * @return {?}
     */
    get nzStep() {
        return this._step;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _numberUp($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this._inputNumber.nativeElement.focus();
        if (this.nzValue === undefined) {
            this.nzValue = this.nzMin || 0;
        }
        if (!this._disabledUp) {
            this.nzValue = this.toPrecisionAsStep((this._precisionFactor * this.nzValue + this._precisionFactor * this.nzStep) / this._precisionFactor);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _numberDown($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this._inputNumber.nativeElement.focus();
        if (this.nzValue === undefined) {
            this.nzValue = this.nzMin || 0;
        }
        if (!this._disabledDown) {
            this.nzValue = this.toPrecisionAsStep((this._precisionFactor * this.nzValue - this._precisionFactor * this.nzStep) / this._precisionFactor);
        }
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._updateValue(value);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitBlur($event) {
        // avoid unnecessary events
        if (this._focused && !this._mouseInside) {
            this._checkValue();
            this._focused = false;
            this.nzBlur.emit($event);
        }
        this.onTouched();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitFocus($event) {
        // avoid unnecessary events
        if (!this._focused) {
            this._focused = true;
            this.nzFocus.emit($event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _emitKeyDown($event) {
        if ($event.keyCode === TAB && this._focused) {
            this._checkValue();
            this._focused = false;
            this.nzBlur.emit($event);
        }
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    _isEmpty(value) {
        return value === undefined
            || value === null
            || (typeof value === 'string' && this._displayValue.trim() === '')
            || (typeof value === 'string' && this.nzFormatter('') === value);
    }
    /**
     * @return {?}
     */
    _checkValue() {
        if (this.nzAllowClear && this._isEmpty(this._displayValue)) {
            this.nzValue = undefined;
            return;
        }
        const /** @type {?} */ numberValue = +this.nzParser(this._displayValue);
        if (this._isNumber(numberValue)) {
            this.nzValue = numberValue;
        }
        else {
            this._displayValue = this.nzFormatter(this._value);
            this._inputNumber.nativeElement.value = this.nzFormatter(this._value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _getBoundValue(value) {
        if (this.nzAllowClear && (value === undefined)) {
            return value;
        }
        else if (value > this.nzMax) {
            return this.nzMax;
        }
        else if (value < this.nzMin) {
            return this.nzMin;
        }
        else {
            return value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _isNumber(value) {
        return !isNaN(value) && isFinite(value);
    }
    /**
     * @param {?} num
     * @return {?}
     */
    toPrecisionAsStep(num) {
        const /** @type {?} */ input = /** @type {?} */ (num);
        if (isNaN(num) || input === '') {
            return num;
        }
        return Number(Number(num).toFixed(this._precisionStep));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._updateValue(value, false);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @param {?} value
     * @param {?=} emitChange
     * @return {?}
     */
    _updateValue(value, emitChange = true) {
        const /** @type {?} */ cacheValue = this._value;
        this._value = this._getBoundValue(value);
        this._displayValue = this.nzFormatter(this._value || '');
        this._inputNumber.nativeElement.value = this.nzFormatter(this._value || '');
        if (emitChange && (value !== cacheValue)) {
            this.onChange(this._value);
        }
        this._disabledUp = (this.nzValue !== undefined) && !((this.nzValue + this.nzStep) <= this.nzMax);
        this._disabledDown = (this.nzValue !== undefined) && !((this.nzValue - this.nzStep) >= this.nzMin);
    }
}
NzInputNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-input-number',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-input-number-handler-wrap"
      (mouseover)="_mouseInside = true"
      (mouseout)="_mouseInside = false">
      <a class="ant-input-number-handler ant-input-number-handler-up"
        [ngClass]="{'ant-input-number-handler-up-disabled':_disabledUp}"
        (click)="_numberUp($event)">
        <span
          class="ant-input-number-handler-up-inner"
          (click)="$event.preventDefault();"></span>
      </a>
      <a
        class="ant-input-number-handler ant-input-number-handler-down"
        [ngClass]="{'ant-input-number-handler-down-disabled':_disabledDown}"
        (click)="_numberDown($event)">
        <span
          class="ant-input-number-handler-down-inner"
          (click)="$event.preventDefault();">
        </span>
      </a>
    </div>
    <div
      class="ant-input-number-input-wrap">
      <input class="ant-input-number-input"
        #inputNumber
        [placeholder]="nzPlaceHolder"
        [disabled]="nzDisabled"
        [(ngModel)]="_displayValue"
        (blur)="_emitBlur($event)"
        (focus)="_emitFocus($event)"
        (keydown)="_emitKeyDown($event)"
        [attr.min]="nzMin"
        [attr.max]="nzMax"
        [attr.step]="_step"
        autocomplete="off">
    </div>`,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzInputNumberComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-input-number {
  position: relative;
  padding: 4px 7px;
  width: 100%;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  transition: all .3s;
  margin: 0;
  padding: 0;
  font-size: 12px;
  height: 28px;
  display: inline-block;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  width: 80px;
}
.ant-input-number::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input-number:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input-number::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input-number:hover {
  border-color: #49a9ee;
}
.ant-input-number:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-input-number-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-input-number {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-input-number-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-input-number-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-input-number-handler {
  text-align: center;
  line-height: 0;
  height: 50%;
  overflow: hidden;
  color: rgba(0, 0, 0, 0.43);
  position: relative;
  transition: all 0.1s linear;
  display: block;
  width: 100%;
  font-weight: bold;
}
.ant-input-number-handler:active {
  background: #f4f4f4;
}
.ant-input-number-handler:hover .ant-input-number-handler-up-inner,
.ant-input-number-handler:hover .ant-input-number-handler-down-inner {
  color: #49a9ee;
}
.ant-input-number-handler-up-inner,
.ant-input-number-handler-down-inner {
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  line-height: 12px;
  user-select: none;
  position: absolute;
  width: 12px;
  height: 12px;
  transition: all 0.1s linear;
  display: inline-block;
  font-size: 12px;
  font-size: 7px \9;
  transform: scale(0.58333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  right: 4px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-input-number-handler-up-inner:before,
.ant-input-number-handler-down-inner:before {
  display: block;
  font-family: "anticon" !important;
}
:root .ant-input-number-handler-up-inner,
:root .ant-input-number-handler-down-inner {
  filter: none;
}
:root .ant-input-number-handler-up-inner,
:root .ant-input-number-handler-down-inner {
  font-size: 12px;
}
.ant-input-number:hover {
  border-color: #49a9ee;
}
.ant-input-number-focused {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-input-number-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-disabled:hover {
  border-color: #e2e2e2;
}
.ant-input-number-input {
  width: 100%;
  text-align: left;
  outline: 0;
  -moz-appearance: textfield;
  height: 26px;
  transition: all 0.3s linear;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  border: 0;
  border-radius: 4px;
  padding: 0 7px;
  display: block;
}
.ant-input-number-input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-input-number-input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-input-number-input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-input-number-input[disabled] {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-input-number-input[disabled]:hover {
  border-color: #e2e2e2;
}
.ant-input-number-lg {
  padding: 0;
}
.ant-input-number-lg input {
  height: 30px;
}
.ant-input-number-sm {
  padding: 0;
}
.ant-input-number-sm input {
  height: 20px;
}
.ant-input-number-handler-wrap {
  border-left: 1px solid #d9d9d9;
  width: 22px;
  height: 100%;
  background: #fff;
  position: absolute;
  top: 0;
  right: 0;
  opacity: 0;
  border-radius: 0 4px 4px 0;
  transition: opacity 0.24s linear 0.1s;
  z-index: 2;
}
.ant-input-number-handler-wrap:hover .ant-input-number-handler {
  height: 40%;
}
.ant-input-number:hover .ant-input-number-handler-wrap {
  opacity: 1;
}
.ant-input-number-handler-up {
  cursor: pointer;
}
.ant-input-number-handler-up-inner {
  top: 50%;
  margin-top: -6px;
}
.ant-input-number-handler-up-inner:before {
  text-align: center;
  content: "\\e61e";
}
.ant-input-number-handler-up:hover {
  height: 60% !important;
}
.ant-input-number-handler-down {
  border-top: 1px solid #d9d9d9;
  top: -1px;
  cursor: pointer;
}
.ant-input-number-handler-down-inner {
  top: 50%;
  margin-top: -6px;
}
.ant-input-number-handler-down-inner:before {
  text-align: center;
  content: "\\e61d";
}
.ant-input-number-handler-down:hover {
  height: 60% !important;
}
.ant-input-number-handler-down-disabled .ant-input-number-handler-down-inner,
.ant-input-number-handler-up-disabled .ant-input-number-handler-down-inner,
.ant-input-number-disabled .ant-input-number-handler-down-inner,
.ant-input-number-handler-down-disabled .ant-input-number-handler-up-inner,
.ant-input-number-handler-up-disabled .ant-input-number-handler-up-inner,
.ant-input-number-disabled .ant-input-number-handler-up-inner {
  opacity: 0.72;
  color: #ccc !important;
  cursor: not-allowed;
}
.ant-input-number-disabled .ant-input-number-input {
  opacity: 0.72;
  cursor: not-allowed;
  background-color: #f7f7f7;
}
.ant-input-number-disabled .ant-input-number-handler-wrap {
  display: none;
}
.ant-input-number-disabled .ant-input-number-handler {
  opacity: 0.72;
  color: #ccc !important;
  cursor: not-allowed;
}
`
                ]
            },] },
];
/** @nocollapse */
NzInputNumberComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzInputNumberComponent.propDecorators = {
    "_inputNumber": [{ type: ViewChild, args: ['inputNumber',] },],
    "nzPlaceHolder": [{ type: Input },],
    "nzMin": [{ type: Input },],
    "nzMax": [{ type: Input },],
    "nzFormatter": [{ type: Input },],
    "nzParser": [{ type: Input },],
    "nzDisabled": [{ type: Input }, { type: HostBinding, args: ['class.ant-input-number-disabled',] },],
    "nzAllowClear": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzStep": [{ type: Input },],
    "nzBlur": [{ type: Output },],
    "nzFocus": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzInputNumberModule {
}
NzInputNumberModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NzInputNumberComponent],
                exports: [NzInputNumberComponent]
            },] },
];
/** @nocollapse */
NzInputNumberModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzContentComponent {
}
NzContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-content',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    '[class.ant-layout-content]': 'true'
                }
            },] },
];
/** @nocollapse */
NzContentComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzFooterComponent {
}
NzFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-footer',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    '[class.ant-layout-footer]': 'true'
                }
            },] },
];
/** @nocollapse */
NzFooterComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzHeaderComponent {
}
NzHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-header',
                template: `
    <ng-content></ng-content>
  `,
                host: {
                    '[class.ant-layout-header]': 'true'
                }
            },] },
];
/** @nocollapse */
NzHeaderComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzLayoutComponent {
    constructor() {
        this.hasSider = false;
    }
}
NzLayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-layout',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-layout {
  display: flex;
  flex-direction: column;
  flex: auto;
  background: #ececec;
}
.ant-layout.ant-layout-has-sider {
  flex-direction: row;
}
.ant-layout.ant-layout-has-sider > .ant-layout,
.ant-layout.ant-layout-has-sider > .ant-layout-content {
  overflow-x: hidden;
}
.ant-layout-header,
.ant-layout-footer {
  flex: 0 0 auto;
}
.ant-layout-header {
  background: #404040;
  padding: 0 50px;
  height: 64px;
  line-height: 64px;
}
.ant-layout-footer {
  background: #ececec;
  padding: 24px 50px;
  color: rgba(0, 0, 0, 0.65);
  font-size: 12px;
}
.ant-layout-content {
  flex: auto;
}
.ant-layout-sider {
  transition: all .2s;
  position: relative;
  background: #404040;
  /* fix firefox can't set width smaller than content on flex item */
  min-width: 0;
}
.ant-layout-sider-children {
  height: 100%;
  padding-top: 0.1px;
  margin-top: -0.1px;
}
.ant-layout-sider-has-trigger {
  padding-bottom: 48px;
}
.ant-layout-sider-right {
  order: 1;
}
.ant-layout-sider-trigger {
  position: fixed;
  text-align: center;
  bottom: 0;
  cursor: pointer;
  height: 48px;
  line-height: 48px;
  color: #fff;
  background: #404040;
  z-index: 1;
  transition: all 0.15s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-layout-sider-zero-width > * {
  overflow: hidden;
}
.ant-layout-sider-zero-width-trigger {
  position: absolute;
  top: 64px;
  right: -36px;
  text-align: center;
  width: 36px;
  height: 42px;
  line-height: 42px;
  background: #404040;
  color: #fff;
  font-size: 18px;
  border-radius: 0 4px 4px 0;
  cursor: pointer;
  transition: background .3s ease;
}
.ant-layout-sider-zero-width-trigger:hover {
  background: #535353;
}
`,
                    `nz-layout,
nz-footer,
nz-header,
nz-content {
  display: block;
}
.ant-layout-sider-trigger {
  width: 100%;
  position: absolute;
}
`
                ],
                host: {
                    '[class.ant-layout]': 'true'
                }
            },] },
];
/** @nocollapse */
NzLayoutComponent.ctorParameters = () => [];
NzLayoutComponent.propDecorators = {
    "hasSider": [{ type: HostBinding, args: ['class.ant-layout-has-sider',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSiderComponent {
    /**
     * @param {?} nzLayoutComponent
     */
    constructor(nzLayoutComponent) {
        this.nzLayoutComponent = nzLayoutComponent;
        this._collapsed = false;
        this._collapsible = false;
        this._trigger = true;
        this._dimensionMap = {
            xl: '1600px',
            lg: '1200px',
            md: '992px',
            sm: '768px',
            xs: '480px',
        };
        this._below = false;
        this.nzWidth = '200';
        this.nzCollapsedWidth = 64;
        this.nzCollapsedChange = new EventEmitter();
        if (this.nzLayoutComponent) {
            this.nzLayoutComponent.hasSider = true;
        }
        if (typeof window !== 'undefined') {
            const /** @type {?} */ matchMediaPolyfill = (mediaQuery) => {
                return {
                    media: mediaQuery,
                    matches: false,
                    /**
                     * @return {?}
                     */
                    addListener() { },
                    /**
                     * @return {?}
                     */
                    removeListener() { },
                };
            };
            window.matchMedia = window.matchMedia || matchMediaPolyfill;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTrigger(value) {
        this._trigger = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzTrigger() {
        return this._trigger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCollapsible(value) {
        this._collapsible = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCollapsible() {
        return this._collapsible;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCollapsed(value) {
        this._collapsed = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCollapsed() {
        return this._collapsed;
    }
    /**
     * @return {?}
     */
    get setZeroClass() {
        return this.nzCollapsed && (this.nzCollapsedWidth === 0);
    }
    /**
     * @return {?}
     */
    get setFlex() {
        if (this.nzCollapsed) {
            return `0 0 ${this.nzCollapsedWidth}px`;
        }
        else {
            return `0 0 ${this.nzWidth}px`;
        }
    }
    /**
     * @return {?}
     */
    get setWidth() {
        if (this.nzCollapsed) {
            return this.nzCollapsedWidth;
        }
        else {
            return this.nzWidth;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onWindowResize(e) {
        if (this.nzBreakpoint) {
            const /** @type {?} */ matchBelow = window.matchMedia(`(max-width: ${this._dimensionMap[this.nzBreakpoint]})`).matches;
            this._below = matchBelow;
            this.nzCollapsed = matchBelow;
            this.nzCollapsedChange.emit(matchBelow);
        }
    }
    /**
     * @return {?}
     */
    toggleCollapse() {
        this.nzCollapsed = !this.nzCollapsed;
        this.nzCollapsedChange.emit(this.nzCollapsed);
    }
    /**
     * @return {?}
     */
    get _isZeroTrigger() {
        return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth === 0) && ((this.nzBreakpoint && this._below) || (!this.nzBreakpoint));
    }
    /**
     * @return {?}
     */
    get _isSiderTrgger() {
        return this.nzCollapsible && this.nzTrigger && (this.nzCollapsedWidth !== 0);
    }
}
NzSiderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-sider',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-content></ng-content>
    <span class="ant-layout-sider-zero-width-trigger" *ngIf="_isZeroTrigger" (click)="toggleCollapse()">
      <i class="anticon anticon-bars"></i>
    </span>
    <div class="ant-layout-sider-trigger" *ngIf="_isSiderTrgger" (click)="toggleCollapse()">
      <i class="anticon" [class.anticon-left]="!nzCollapsed" [class.anticon-right]="nzCollapsed"></i>
    </div>
  `,
                host: {
                    '[class.ant-layout-sider]': 'true'
                }
            },] },
];
/** @nocollapse */
NzSiderComponent.ctorParameters = () => [
    { type: NzLayoutComponent, decorators: [{ type: Optional }, { type: Host },] },
];
NzSiderComponent.propDecorators = {
    "nzWidth": [{ type: Input },],
    "nzCollapsedWidth": [{ type: Input },],
    "nzBreakpoint": [{ type: Input },],
    "nzTrigger": [{ type: Input },],
    "nzCollapsible": [{ type: Input },],
    "nzCollapsed": [{ type: Input }, { type: HostBinding, args: ['class.ant-layout-sider-collapsed',] },],
    "nzCollapsedChange": [{ type: Output },],
    "setZeroClass": [{ type: HostBinding, args: ['class.ant-layout-sider-zero-width',] },],
    "setFlex": [{ type: HostBinding, args: ['style.flex',] },],
    "setWidth": [{ type: HostBinding, args: ['style.width.px',] },],
    "onWindowResize": [{ type: HostListener, args: ['window:resize', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzLayoutModule {
}
NzLayoutModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzLayoutComponent, NzHeaderComponent, NzContentComponent, NzFooterComponent, NzSiderComponent],
                exports: [NzLayoutComponent, NzHeaderComponent, NzContentComponent, NzFooterComponent, NzSiderComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzLayoutModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

const NZ_MESSAGE_DEFAULT_CONFIG = new InjectionToken('NZ_MESSAGE_DEFAULT_CONFIG');
const NZ_MESSAGE_CONFIG = new InjectionToken('NZ_MESSAGE_CONFIG');
const NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER = {
    provide: NZ_MESSAGE_DEFAULT_CONFIG,
    useValue: {
        nzDuration: 1500,
        nzAnimate: true,
        nzPauseOnHover: true,
        nzMaxStack: 7,
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMessageContainerComponent {
    /**
     * @param {?} defaultConfig
     * @param {?} config
     */
    constructor(defaultConfig, config) {
        this.messages = [];
        this.config = Object.assign({}, defaultConfig, config);
    }
    /**
     * @param {?} message
     * @return {?}
     */
    createMessage(message) {
        if (this.messages.length >= this.config.nzMaxStack) {
            this.messages.splice(0, 1);
        }
        message.options = this._mergeMessageOptions(message.options);
        this.messages.push(message);
    }
    /**
     * @param {?} messageId
     * @return {?}
     */
    removeMessage(messageId) {
        this.messages.some((message, index) => {
            if (message.messageId === messageId) {
                this.messages.splice(index, 1);
                return true;
            }
        });
    }
    /**
     * @return {?}
     */
    removeMessageAll() {
        this.messages = [];
    }
    /**
     * @param {?} options
     * @return {?}
     */
    _mergeMessageOptions(options) {
        const /** @type {?} */ defaultOptions = {
            nzDuration: this.config.nzDuration,
            nzAnimate: this.config.nzAnimate,
            nzPauseOnHover: this.config.nzPauseOnHover
        };
        return Object.assign({}, defaultOptions, options);
    }
}
NzMessageContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-message-container',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-message">
      <nz-message *ngFor="let message of messages; let i = index" [nzMessage]="message" [nzIndex]="i"></nz-message>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-message {
  font-size: 12px;
  position: fixed;
  z-index: 1010;
  width: 100%;
  top: 16px;
  left: 0;
  pointer-events: none;
}
.ant-message-notice {
  padding: 8px;
  text-align: center;
}
.ant-message-notice:first-child {
  margin-top: -8px;
}
.ant-message-notice-content {
  padding: 8px 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  display: inline-block;
  pointer-events: all;
}
.ant-message-success .anticon {
  color: #00a854;
}
.ant-message-error .anticon {
  color: #f04134;
}
.ant-message-warning .anticon {
  color: #ffbf00;
}
.ant-message-info .anticon,
.ant-message-loading .anticon {
  color: #108ee9;
}
.ant-message .anticon {
  margin-right: 8px;
  font-size: 14px;
  top: 1px;
  position: relative;
}
.ant-message-notice.move-up-leave.move-up-leave-active {
  animation-name: MessageMoveOut;
  overflow: hidden;
  animation-duration: .3s;
}
@keyframes MessageMoveOut {
  0% {
    opacity: 1;
    max-height: 150px;
    padding: 8px;
  }
  100% {
    opacity: 0;
    max-height: 0;
    padding: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzMessageContainerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_MESSAGE_DEFAULT_CONFIG,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_MESSAGE_CONFIG,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMessageComponent {
    /**
     * @param {?} _messageContainer
     */
    constructor(_messageContainer) {
        this._messageContainer = _messageContainer;
        this._eraseTimer = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._options = this.nzMessage.options;
        if (this._options.nzAnimate) {
            this.nzMessage.state = 'enter';
        }
        this._autoErase = this._options.nzDuration > 0;
        if (this._autoErase) {
            this._initErase();
            this._startEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._autoErase) {
            this._clearEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    onEnter() {
        if (this._autoErase && this._options.nzPauseOnHover) {
            this._clearEraseTimeout();
            this._updateTTL();
        }
    }
    /**
     * @return {?}
     */
    onLeave() {
        if (this._autoErase && this._options.nzPauseOnHover) {
            this._startEraseTimeout();
        }
    }
    /**
     * @return {?}
     */
    _destroy() {
        if (this._options.nzAnimate) {
            this.nzMessage.state = 'leave';
            setTimeout(() => this._messageContainer.removeMessage(this.nzMessage.messageId), 200);
        }
        else {
            this._messageContainer.removeMessage(this.nzMessage.messageId);
        }
    }
    /**
     * @return {?}
     */
    _initErase() {
        this._eraseTTL = this._options.nzDuration;
        this._eraseTimingStart = Date.now();
    }
    /**
     * @return {?}
     */
    _updateTTL() {
        if (this._autoErase) {
            this._eraseTTL -= Date.now() - this._eraseTimingStart;
        }
    }
    /**
     * @return {?}
     */
    _startEraseTimeout() {
        if (this._eraseTTL > 0) {
            this._clearEraseTimeout(); // To prevent calling _startEraseTimeout() more times to create more timer
            this._eraseTimer = window.setTimeout(() => this._destroy(), this._eraseTTL);
            this._eraseTimingStart = Date.now();
        }
        else {
            this._destroy();
        }
    }
    /**
     * @return {?}
     */
    _clearEraseTimeout() {
        if (this._eraseTimer !== null) {
            window.clearTimeout(this._eraseTimer);
            this._eraseTimer = null;
        }
    }
}
NzMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-message',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        state('enter', style({ opacity: 1, transform: 'translateY(0)' })),
                        transition('* => enter', [
                            style({ opacity: 0, transform: 'translateY(-50%)' }),
                            animate('100ms linear')
                        ]),
                        state('leave', style({ opacity: 0, transform: 'translateY(-50%)' })),
                        transition('* => leave', [
                            style({ opacity: 1, transform: 'translateY(0)' }),
                            animate('100ms linear')
                        ]),
                    ])
                ],
                template: `
    <div class="ant-message-notice"
      [@enterLeave]="nzMessage.state"
      (mouseenter)="onEnter()"
      (mouseleave)="onLeave()">
      <div class="ant-message-notice-content">
        <div *ngIf="!nzMessage.html" class="ant-message-custom-content" [ngClass]="'ant-message-' + nzMessage.type">
          <ng-container [ngSwitch]="nzMessage.type">
            <i *ngSwitchCase="'success'" class="anticon anticon-check-circle"></i>
            <i *ngSwitchCase="'info'" class="anticon anticon-info-circle"></i>
            <i *ngSwitchCase="'warning'" class="anticon anticon-exclamation-circle"></i>
            <i *ngSwitchCase="'error'" class="anticon anticon-cross-circle"></i>
            <i *ngSwitchCase="'loading'" class="anticon anticon-spin anticon-loading"></i>
          </ng-container>
          <span>{{ nzMessage.content }}</span>
        </div>
        <div *ngIf="nzMessage.html" [innerHTML]="nzMessage.html"></div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-message {
  font-size: 12px;
  position: fixed;
  z-index: 1010;
  width: 100%;
  top: 16px;
  left: 0;
  pointer-events: none;
}
.ant-message-notice {
  padding: 8px;
  text-align: center;
}
.ant-message-notice:first-child {
  margin-top: -8px;
}
.ant-message-notice-content {
  padding: 8px 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  display: inline-block;
  pointer-events: all;
}
.ant-message-success .anticon {
  color: #00a854;
}
.ant-message-error .anticon {
  color: #f04134;
}
.ant-message-warning .anticon {
  color: #ffbf00;
}
.ant-message-info .anticon,
.ant-message-loading .anticon {
  color: #108ee9;
}
.ant-message .anticon {
  margin-right: 8px;
  font-size: 14px;
  top: 1px;
  position: relative;
}
.ant-message-notice.move-up-leave.move-up-leave-active {
  animation-name: MessageMoveOut;
  overflow: hidden;
  animation-duration: .3s;
}
@keyframes MessageMoveOut {
  0% {
    opacity: 1;
    max-height: 150px;
    padding: 8px;
  }
  100% {
    opacity: 0;
    max-height: 0;
    padding: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzMessageComponent.ctorParameters = () => [
    { type: NzMessageContainerComponent, },
];
NzMessageComponent.propDecorators = {
    "nzMessage": [{ type: Input },],
    "nzIndex": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const providers = [
    NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER
];
class NzMessageModule {
}
NzMessageModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, OverlayModule],
                declarations: [NzMessageContainerComponent, NzMessageComponent],
                providers,
                entryComponents: [NzMessageContainerComponent]
            },] },
];
/** @nocollapse */
NzMessageModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class NzGlobalMonitorService {
    constructor() {
        this.counter = 0;
        this.lastClickPos = {
            x: 0,
            y: 0
        };
        this._navItemSource = new EventEmitter();
        this._observeGlobalEvents();
    }
    /**
     * @return {?}
     */
    getGlobalCount() {
        return ++this.counter;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    setDocumentOverflowHidden(status) {
        document.body.style.overflow = status ? 'hidden' : '';
    }
    /**
     * @return {?}
     */
    _observeGlobalEvents() {
        // 监听document的点击事件，记录点击坐标，并抛出 documentClick 事件
        document.addEventListener('click', (e) => {
            this.lastClickPos = {
                x: e.clientX,
                y: e.clientY
            };
            this._navItemSource.emit('documentClick');
        });
    }
}
var nzGlobalMonitor = new NzGlobalMonitorService();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/* tslint:disable-next-line:no-any */
class NzModalSubject extends Subject$1 {
    constructor() {
        super();
        this.eventsQueue = {};
        this.subscribe((value) => {
            const /** @type {?} */ eventQueue = this.eventsQueue[value] || [];
            eventQueue.forEach(cb => {
                if (cb) {
                    cb();
                }
            });
        });
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    destroy(type = 'onCancel') {
        if (!this.isStopped && !this.closed) {
            this.next(type);
        }
    }
    /**
     * @param {?} eventType
     * @param {?} cb
     * @return {?}
     */
    on(eventType, cb) {
        if (this.eventsQueue[eventType]) {
            this.eventsQueue[eventType].push(cb);
        }
        else {
            this.eventsQueue[eventType] = [cb];
        }
    }
}
NzModalSubject.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzModalSubject.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzConfirmComponent {
    /**
     * @param {?} subject
     * @param {?} _locale
     */
    constructor(subject, _locale) {
        this.subject = subject;
        this._locale = _locale;
        this._maskClosable = true;
        this._confirmLoading = false;
        this._visible = false;
        this._prefixCls = 'ant-modal';
        this._prefixConfirmCls = 'ant-confirm';
        this._width = '416px';
        this._zIndex = 1000;
        this._iconTypeCls = 'anticon anticon-question-circle';
        this._title = '';
        this._content = '';
        this._okText = this._locale.translate('Modal.understood');
        this._cancelText = '';
        this._animationStatus = '';
        this._customClass = '';
        this._typeCls = `${this._prefixConfirmCls}-confirm`;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        const /** @type {?} */ visible = toBoolean(value);
        if (this._visible === visible) {
            return;
        }
        if (visible) {
            this.anmiateFade('enter');
            this.subject.next('onShow');
            // 每次触发点击事件的时候，通过全局监听的类，记录下点击的位置，计算动画的origin
            setTimeout(() => {
                this.setStyles({
                    x: nzGlobalMonitor.lastClickPos.x || 0,
                    y: nzGlobalMonitor.lastClickPos.y || 0
                });
            }, 10);
        }
        else {
            this.anmiateFade('leave');
            this.subject.next('onHide');
        }
        this._visible = visible;
        // 设置全局的overflow样式
        nzGlobalMonitor.setDocumentOverflowHidden(visible);
    }
    /**
     * @return {?}
     */
    get nzVisible() {
        return this._visible;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWidth(value) {
        this._width = typeof value === 'number' ? value + 'px' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClass(value) {
        this._customClass = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzZIndex(value) {
        this._zIndex = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTitle(value) {
        // TODO: should guard for string instead, all types are theoretically structural
        if (value instanceof TemplateRef) {
            this._titleTpl = value;
        }
        else {
            this._title = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzContent(value) {
        if (value instanceof TemplateRef) {
            this._contentTpl = value;
        }
        else {
            this._content = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMaskClosable(value) {
        this._maskClosable = toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOkText(value) {
        this._okText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCancelText(value) {
        this._cancelText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIconType(value) {
        if (value) {
            this._iconTypeCls = `anticon anticon-${value}`;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzConfirmType(value) {
        if (value) {
            this._typeCls = `${this._prefixConfirmCls}-${value}`;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzConfirmLoading(value) {
        this._confirmLoading = toBoolean(value);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onEsc(e) {
        if (this._maskClosable) {
            this.subject.next('onCancel');
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onEnter(e) {
        this.subject.next('onOk');
    }
    /**
     * @param {?=} origin
     * @return {?}
     */
    setStyles(origin) {
        const /** @type {?} */ el = this.contentEl.nativeElement;
        const /** @type {?} */ transformOrigin = origin ? `${origin.x - el.offsetLeft}px ${origin.y - el.offsetTop}px 0px` : '';
        this._bodyStyleMap = {
            'width': this._width,
            'transform-origin': transformOrigin
        };
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._maskClassMap = {
            [`${this._prefixCls}-mask`]: true,
            [`${this._prefixCls}-mask-hidden`]: !this._visible && !this._animationStatus,
            'fade-enter': this._animationStatus === 'enter',
            'fade-enter-active': this._animationStatus === 'enter',
            'fade-leave': this._animationStatus === 'leave',
            'fade-leave-active': this._animationStatus === 'leave'
        };
        this._bodyClassMap = {
            [this._prefixCls]: true,
            [this._prefixConfirmCls]: true,
            [this._typeCls]: true,
            'zoom-enter': this._animationStatus === 'enter',
            'zoom-enter-active': this._animationStatus === 'enter',
            'zoom-leave': this._animationStatus === 'leave',
            'zoom-leave-active': this._animationStatus === 'leave'
        };
    }
    /**
     * @param {?} status
     * @return {?}
     */
    anmiateFade(status) {
        this._animationStatus = status;
        this.setClassMap();
        setTimeout(_ => {
            this._animationStatus = '';
            this.setClassMap();
            this.subject.next(status === 'enter' ? 'onShown' : 'onHidden');
            // modal打开后，默认焦点设置到modal上
            if (status === 'enter') {
                this.contentEl.nativeElement.parentNode.focus();
            }
        }, 200);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    closeFromMask(e) {
        if (this._maskClosable && (/** @type {?} */ (e.target)).getAttribute('role') === 'dialog') {
            this.subject.next('onCancel');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
        this.setStyles();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._visible) {
            nzGlobalMonitor.setDocumentOverflowHidden(false);
        }
        this.subject.next('onDestroy');
        this.subject.unsubscribe();
        this.subject = null;
    }
}
NzConfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-confirm',
                viewProviders: [NzModalSubject],
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_customClass">
      <div [ngClass]="_maskClassMap"
        [style.zIndex]="_zIndex"></div>
      <div tabindex="-1" role="dialog"
        (click)="closeFromMask($event)"
        class="ant-modal-wrap"
        [style.zIndex]="_zIndex"
        [ngStyle]="{ 'display': !_visible && !_animationStatus ? 'none' : 'block' }">

        <div #confirm_content role="document" [ngClass]="_bodyClassMap" [ngStyle]="_bodyStyleMap">
          <div class="ant-modal-content">
            <div class="ant-modal-body">
              <div style="zoom: 1; overflow: hidden;">
                <div class="ant-confirm-body">
                  <i [ngClass]="_iconTypeCls"></i>
                  <span class="ant-confirm-title">
                    <ng-template #defaultTitle>{{ _title }}</ng-template>
                    <ng-template [ngTemplateOutlet]="_titleTpl || defaultTitle"></ng-template>
                  </span>
                  <div class="ant-confirm-content">
                    <ng-template #defaultContent>
                      <div [innerHTML]="_content"></div>
                    </ng-template>
                    <ng-template [ngTemplateOutlet]="_contentTpl || defaultContent"></ng-template>
                  </div>
                </div>
                <div class="ant-confirm-btns">
                  <ng-template [ngIf]="_cancelText">
                    <button nz-button [nzType]="'ghost'" [nzSize]="'large'" (click)="subject.next('onCancel')">
                      <span>{{ _cancelText }}</span>
                    </button>
                  </ng-template>
                  <button nz-button #confirm_ok_btn [nzType]="'primary'" [nzSize]="'large'" [nzSize]="'large'" (click)="subject.next('onOk')" [nzLoading]="_confirmLoading">
                    <span>{{ _okText }}</span>
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div tabindex="0" style="width: 0px; height: 0px; overflow: hidden;">sentinel</div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-modal {
  position: relative;
  width: auto;
  margin: 0 auto;
  top: 100px;
  padding-bottom: 24px;
}
.ant-modal-wrap {
  position: fixed;
  overflow: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  -webkit-overflow-scrolling: touch;
  outline: 0;
}
.ant-modal-title {
  margin: 0;
  font-size: 14px;
  line-height: 21px;
  font-weight: 500;
  color: rgba(0, 0, 0, 0.85);
}
.ant-modal-content {
  position: relative;
  background-color: #fff;
  border: 0;
  border-radius: 4px;
  background-clip: padding-box;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}
.ant-modal-close {
  cursor: pointer;
  border: 0;
  background: transparent;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 10;
  font-weight: 700;
  line-height: 1;
  text-decoration: none;
  transition: color .3s ease;
  color: rgba(0, 0, 0, 0.43);
  outline: 0;
}
.ant-modal-close-x {
  display: block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  width: 48px;
  height: 48px;
  line-height: 48px;
  font-size: 14px;
}
.ant-modal-close-x:before {
  content: "\\e633";
  display: block;
  font-family: "anticon" !important;
}
.ant-modal-close:focus,
.ant-modal-close:hover {
  color: #444;
  text-decoration: none;
}
.ant-modal-header {
  padding: 13px 16px;
  border-radius: 4px 4px 0 0;
  background: #fff;
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #e9e9e9;
}
.ant-modal-body {
  padding: 16px;
  font-size: 12px;
  line-height: 1.5;
}
.ant-modal-footer {
  border-top: 1px solid #e9e9e9;
  padding: 10px 16px 10px 10px;
  text-align: right;
  border-radius: 0 0 4px 4px;
}
.ant-modal-footer button + button {
  margin-left: 8px;
  margin-bottom: 0;
}
.ant-modal.zoom-enter,
.ant-modal.zoom-appear {
  animation-duration: 0.3s;
  transform: none;
  opacity: 0;
}
.ant-modal-mask {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  background-color: #373737;
  background-color: rgba(55, 55, 55, 0.6);
  height: 100%;
  z-index: 1000;
  filter: alpha(opacity=50);
}
.ant-modal-mask-hidden {
  display: none;
}
.ant-modal-open {
  overflow: hidden;
}
@media (max-width: 768px) {
  .ant-modal {
    width: auto !important;
    margin: 10px;
  }
  .vertical-center-modal .ant-modal {
    flex: 1;
  }
}
.ant-confirm .ant-modal-header {
  display: none;
}
.ant-confirm .ant-modal-close {
  display: none;
}
.ant-confirm .ant-modal-body {
  padding: 30px 40px;
}
.ant-confirm-body-wrapper {
  zoom: 1;
}
.ant-confirm-body-wrapper:before,
.ant-confirm-body-wrapper:after {
  content: " ";
  display: table;
}
.ant-confirm-body-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-confirm-body .ant-confirm-title {
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  font-size: 14px;
}
.ant-confirm-body .ant-confirm-content {
  margin-left: 42px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  margin-top: 8px;
}
.ant-confirm-body > .anticon {
  font-size: 24px;
  margin-right: 16px;
  padding: 0 1px;
  float: left;
}
.ant-confirm .ant-confirm-btns {
  margin-top: 30px;
  float: right;
}
.ant-confirm .ant-confirm-btns button + button {
  margin-left: 10px;
  margin-bottom: 0;
}
.ant-confirm-error .ant-confirm-body > .anticon {
  color: #f04134;
}
.ant-confirm-warning .ant-confirm-body > .anticon,
.ant-confirm-confirm .ant-confirm-body > .anticon {
  color: #ffbf00;
}
.ant-confirm-info .ant-confirm-body > .anticon {
  color: #108ee9;
}
.ant-confirm-success .ant-confirm-body > .anticon {
  color: #00a854;
}
`
                ]
            },] },
];
/** @nocollapse */
NzConfirmComponent.ctorParameters = () => [
    { type: NzModalSubject, },
    { type: NzLocaleService, },
];
NzConfirmComponent.propDecorators = {
    "contentEl": [{ type: ViewChild, args: ['confirm_content',] },],
    "nzVisible": [{ type: Input },],
    "nzWidth": [{ type: Input },],
    "nzClass": [{ type: Input },],
    "nzZIndex": [{ type: Input },],
    "nzTitle": [{ type: Input },],
    "nzContent": [{ type: Input },],
    "nzMaskClosable": [{ type: Input },],
    "nzOkText": [{ type: Input },],
    "nzCancelText": [{ type: Input },],
    "nzIconType": [{ type: Input },],
    "nzConfirmType": [{ type: Input },],
    "nzConfirmLoading": [{ type: Input },],
    "onEsc": [{ type: HostListener, args: ['keydown.esc', ['$event'],] },],
    "onEnter": [{ type: HostListener, args: ['keydown.enter', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzModalComponent {
    /**
     * @param {?} subject
     * @param {?} _vcr
     * @param {?} _locale
     */
    constructor(subject, _vcr, _locale) {
        this.subject = subject;
        this._vcr = _vcr;
        this._locale = _locale;
        this._confirmLoading = false;
        this._maskClosable = true;
        this._footerHide = false;
        this._closable = true;
        this._visible = false;
        this._prefixCls = 'ant-modal';
        this._width = '520px';
        this._zIndex = 1000;
        this._title = '';
        this._content = '';
        this._okText = this._locale.translate('Modal.okText');
        this._cancelText = this._locale.translate('Modal.cancelText');
        this._style = {};
        this._wrapClass = `${this._prefixCls}-wrap`;
        this._customClass = '';
        this._animationStatus = '';
        this._componentParams = {};
        this.modalId = `nzModal${nzGlobalMonitor.getGlobalCount()}`;
        this.nzVisibleChange = new EventEmitter();
        this.nzOnOk = new EventEmitter();
        // TODO: reconsider the payload type
        this.nzOnCancel = new EventEmitter();
        this.subject.modalId = this.modalId;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        const /** @type {?} */ visible = toBoolean(value);
        if (this._visible === visible) {
            return;
        }
        if (visible) {
            this.anmiateFade('enter');
            this.subject.next('onShow');
            // 每次触发点击事件的时候，通过全局监听的类，记录下点击的位置，计算动画的origin
            setTimeout(() => {
                this.setStyles({
                    x: nzGlobalMonitor.lastClickPos.x || 0,
                    y: nzGlobalMonitor.lastClickPos.y || 0
                });
            });
        }
        else {
            this.anmiateFade('leave');
            this.subject.next('onHide');
        }
        this._visible = visible;
        this.nzVisibleChange.emit(this._visible);
        // 设置全局的overflow样式
        nzGlobalMonitor.setDocumentOverflowHidden(visible);
    }
    /**
     * @return {?}
     */
    get nzVisible() {
        return this._visible;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzConfirmLoading(value) {
        this._confirmLoading = toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClosable(value) {
        this._closable = toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzClass(value) {
        this._customClass = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWidth(value) {
        this._width = typeof value === 'number' ? value + 'px' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzZIndex(value) {
        this._zIndex = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTitle(value) {
        // TODO: should guard for string instead, all types are theoretically structural
        if (value instanceof TemplateRef) {
            this._titleTpl = value;
        }
        else {
            this._title = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzContent(value) {
        if (value instanceof ComponentFactory) {
            // 如果容器对象已存在，则直接渲染，如果不存在，则设置到_bodyComponent，在ngAfterViewInit中执行
            if (this.bodyEl) {
                const /** @type {?} */ compRef = this.bodyEl.createComponent(value, null, this._vcr.injector);
                Object.assign(compRef.instance, this._componentParams);
            }
            else {
                this._bodyComponent = value;
            }
        }
        else if (value instanceof TemplateRef) {
            this._contentTpl = value;
        }
        else {
            this._content = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzFooter(value) {
        if (value instanceof TemplateRef) {
            this._footerTpl = value;
        }
        else {
            this._footerHide = !toBoolean(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzOkText(value) {
        this._okText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCancelText(value) {
        this._cancelText = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMaskClosable(value) {
        this._maskClosable = toBoolean(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzStyle(value) {
        this._style = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWrapClassName(value) {
        if (value) {
            this._wrapClass = `${this._prefixCls}-wrap ${value}`;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzComponentParams(value) {
        this._componentParams = value;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onEsc(e) {
        if (this._maskClosable) {
            this.clickCancel(e);
        }
    }
    /**
     * @param {?=} origin
     * @return {?}
     */
    setStyles(origin) {
        const /** @type {?} */ el = this.contentEl.nativeElement;
        const /** @type {?} */ transformOrigin = origin ? `${origin.x - el.offsetLeft}px ${origin.y - el.offsetTop}px 0px` : '';
        // TODO: spread on literal has been disallow on latest proposal
        this._bodyStyleMap = Object.assign({
            'width': this._width,
            'transform-origin': transformOrigin
        }, this._style);
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._maskClassMap = {
            [`${this._prefixCls}-mask`]: true,
            [`${this._prefixCls}-mask-hidden`]: !this._visible && !this._animationStatus,
            'fade-enter': this._animationStatus === 'enter',
            'fade-enter-active': this._animationStatus === 'enter',
            'fade-leave': this._animationStatus === 'leave',
            'fade-leave-active': this._animationStatus === 'leave'
        };
        this._bodyClassMap = {
            [this._prefixCls]: true,
            'zoom-enter': this._animationStatus === 'enter',
            'zoom-enter-active': this._animationStatus === 'enter',
            'zoom-leave': this._animationStatus === 'leave',
            'zoom-leave-active': this._animationStatus === 'leave'
        };
    }
    /**
     * @param {?} status
     * @return {?}
     */
    anmiateFade(status) {
        this._animationStatus = status;
        this.setClassMap();
        setTimeout(_ => {
            this._animationStatus = '';
            this.setClassMap();
            this.subject.next(status === 'enter' ? 'onShown' : 'onHidden');
            // modal打开后，默认焦点设置到modal上
            if (status === 'enter') {
                this.contentEl.nativeElement.parentNode.focus();
            }
        }, 200);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    closeFromMask(e) {
        if (this._maskClosable && (/** @type {?} */ (e.target)).getAttribute('role') === 'dialog') {
            this.clickCancel(e);
        }
    }
    /**
     * @param {?} loading
     * @return {?}
     */
    setConfirmLoading(loading) {
        this.nzConfirmLoading = loading;
    }
    /**
     * @return {?}
     */
    open() {
        this.nzVisible = true;
    }
    /**
     * @return {?}
     */
    close() {
        this.nzVisible = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    clickOk(e) {
        if (this.nzOnOk) {
            this.nzOnOk.emit(e);
        }
        else {
            this.nzVisible = false;
        }
        this.subject.next('onOk');
    }
    /**
     * @param {?} e
     * @return {?}
     */
    clickCancel(e) {
        this.nzOnCancel.emit(e);
        this.subject.next('onCancel');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
        this.setStyles();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._bodyComponent) {
            const /** @type {?} */ compRef = this.bodyEl.createComponent(this._bodyComponent, null, this._vcr.injector);
            Object.assign(compRef.instance, this._componentParams);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._visible) {
            nzGlobalMonitor.setDocumentOverflowHidden(false);
        }
        this.subject.next('onDestroy');
        this.subject.unsubscribe();
        this.subject = null;
    }
}
NzModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-modal',
                viewProviders: [NzModalSubject],
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_customClass">
      <div [ngClass]="_maskClassMap"
        [style.zIndex]="_zIndex"></div>
      <div tabindex="-1" role="dialog"
        [attr.aria-labelledby]="modalId"
        (click)="closeFromMask($event)"
        [ngClass]="_wrapClass"
        [style.zIndex]="_zIndex"
        [ngStyle]="{ 'display': !_visible && !_animationStatus ? 'none' : '' }">

        <div #modal_content role="document" [ngClass]="_bodyClassMap" [ngStyle]="_bodyStyleMap">
          <div class="ant-modal-content">
            <ng-template [ngIf]="_closable">
              <button aria-label="Close" class="ant-modal-close" (click)="clickCancel($event)">
                <span class="ant-modal-close-x"></span>
              </button>
            </ng-template>
            <div class="ant-modal-header" *ngIf="_title || _titleTpl">
              <div class="ant-modal-title" [attr.id]="modalId">
                <ng-template #defaultTitle>{{ _title }}</ng-template>
                <ng-template [ngTemplateOutlet]="_titleTpl || defaultTitle"></ng-template>
              </div>
            </div>
            <div class="ant-modal-body">
              <ng-template #defaultContent>{{ _content }}</ng-template>
              <ng-template [ngTemplateOutlet]="_contentTpl || defaultContent"></ng-template>
              <ng-template #modal_component></ng-template>
            </div>
            <div class="ant-modal-footer" *ngIf="!_footerHide">
              <ng-template #defaultFooter>
                <button nz-button [nzType]="'ghost'" [nzSize]="'large'" (click)="clickCancel($event)">
                  <span>{{ _cancelText }}</span>
                </button>
                <button nz-button [nzType]="'primary'" [nzSize]="'large'" (click)="clickOk($event)" [nzLoading]="_confirmLoading">
                  <span>{{ _okText }}</span>
                </button>
              </ng-template>
              <ng-template [ngTemplateOutlet]="_footerTpl || defaultFooter"></ng-template>
            </div>
          </div>
        </div>
        <div tabindex="0" style="width: 0px; height: 0px; overflow: hidden;">sentinel</div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-modal {
  position: relative;
  width: auto;
  margin: 0 auto;
  top: 100px;
  padding-bottom: 24px;
}
.ant-modal-wrap {
  position: fixed;
  overflow: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1000;
  -webkit-overflow-scrolling: touch;
  outline: 0;
}
.ant-modal-title {
  margin: 0;
  font-size: 14px;
  line-height: 21px;
  font-weight: 500;
  color: rgba(0, 0, 0, 0.85);
}
.ant-modal-content {
  position: relative;
  background-color: #fff;
  border: 0;
  border-radius: 4px;
  background-clip: padding-box;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}
.ant-modal-close {
  cursor: pointer;
  border: 0;
  background: transparent;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 10;
  font-weight: 700;
  line-height: 1;
  text-decoration: none;
  transition: color .3s ease;
  color: rgba(0, 0, 0, 0.43);
  outline: 0;
}
.ant-modal-close-x {
  display: block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  text-rendering: auto;
  width: 48px;
  height: 48px;
  line-height: 48px;
  font-size: 14px;
}
.ant-modal-close-x:before {
  content: "\\e633";
  display: block;
  font-family: "anticon" !important;
}
.ant-modal-close:focus,
.ant-modal-close:hover {
  color: #444;
  text-decoration: none;
}
.ant-modal-header {
  padding: 13px 16px;
  border-radius: 4px 4px 0 0;
  background: #fff;
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #e9e9e9;
}
.ant-modal-body {
  padding: 16px;
  font-size: 12px;
  line-height: 1.5;
}
.ant-modal-footer {
  border-top: 1px solid #e9e9e9;
  padding: 10px 16px 10px 10px;
  text-align: right;
  border-radius: 0 0 4px 4px;
}
.ant-modal-footer button + button {
  margin-left: 8px;
  margin-bottom: 0;
}
.ant-modal.zoom-enter,
.ant-modal.zoom-appear {
  animation-duration: 0.3s;
  transform: none;
  opacity: 0;
}
.ant-modal-mask {
  position: fixed;
  top: 0;
  right: 0;
  left: 0;
  bottom: 0;
  background-color: #373737;
  background-color: rgba(55, 55, 55, 0.6);
  height: 100%;
  z-index: 1000;
  filter: alpha(opacity=50);
}
.ant-modal-mask-hidden {
  display: none;
}
.ant-modal-open {
  overflow: hidden;
}
@media (max-width: 768px) {
  .ant-modal {
    width: auto !important;
    margin: 10px;
  }
  .vertical-center-modal .ant-modal {
    flex: 1;
  }
}
.ant-confirm .ant-modal-header {
  display: none;
}
.ant-confirm .ant-modal-close {
  display: none;
}
.ant-confirm .ant-modal-body {
  padding: 30px 40px;
}
.ant-confirm-body-wrapper {
  zoom: 1;
}
.ant-confirm-body-wrapper:before,
.ant-confirm-body-wrapper:after {
  content: " ";
  display: table;
}
.ant-confirm-body-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-confirm-body .ant-confirm-title {
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  font-size: 14px;
}
.ant-confirm-body .ant-confirm-content {
  margin-left: 42px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  margin-top: 8px;
}
.ant-confirm-body > .anticon {
  font-size: 24px;
  margin-right: 16px;
  padding: 0 1px;
  float: left;
}
.ant-confirm .ant-confirm-btns {
  margin-top: 30px;
  float: right;
}
.ant-confirm .ant-confirm-btns button + button {
  margin-left: 10px;
  margin-bottom: 0;
}
.ant-confirm-error .ant-confirm-body > .anticon {
  color: #f04134;
}
.ant-confirm-warning .ant-confirm-body > .anticon,
.ant-confirm-confirm .ant-confirm-body > .anticon {
  color: #ffbf00;
}
.ant-confirm-info .ant-confirm-body > .anticon {
  color: #108ee9;
}
.ant-confirm-success .ant-confirm-body > .anticon {
  color: #00a854;
}
`
                ]
            },] },
];
/** @nocollapse */
NzModalComponent.ctorParameters = () => [
    { type: NzModalSubject, },
    { type: ViewContainerRef, },
    { type: NzLocaleService, },
];
NzModalComponent.propDecorators = {
    "contentEl": [{ type: ViewChild, args: ['modal_content',] },],
    "bodyEl": [{ type: ViewChild, args: ['modal_component', { read: ViewContainerRef },] },],
    "nzVisible": [{ type: Input },],
    "nzConfirmLoading": [{ type: Input },],
    "nzClosable": [{ type: Input },],
    "nzClass": [{ type: Input },],
    "nzWidth": [{ type: Input },],
    "nzZIndex": [{ type: Input },],
    "nzTitle": [{ type: Input },],
    "nzContent": [{ type: Input },],
    "nzFooter": [{ type: Input },],
    "nzOkText": [{ type: Input },],
    "nzCancelText": [{ type: Input },],
    "nzMaskClosable": [{ type: Input },],
    "nzStyle": [{ type: Input },],
    "nzWrapClassName": [{ type: Input },],
    "nzComponentParams": [{ type: Input },],
    "nzVisibleChange": [{ type: Output },],
    "nzOnOk": [{ type: Output },],
    "nzOnCancel": [{ type: Output },],
    "onEsc": [{ type: HostListener, args: ['keydown.esc', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class BaseOptions {
    constructor() {
        /**
         * The modal display status
         */
        this.visible = false;
    }
}
class ModalOptions extends BaseOptions {
    constructor() {
        super(...arguments);
        this.closable = true;
        this.maskClosable = true;
    }
}
class ConfirmOptions extends BaseOptions {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

class NzModalService {
    /**
     * @param {?} _appRef
     * @param {?} _cfr
     * @param {?} _locale
     */
    constructor(_appRef, _cfr, _locale) {
        this._appRef = _appRef;
        this._cfr = _cfr;
        this._locale = _locale;
        this._modalCompFactory = this._cfr.resolveComponentFactory(NzModalComponent);
        this._confirmCompFactory = this._cfr.resolveComponentFactory(NzConfirmComponent);
    }
    /**
     * @param {?} initialConfig
     * @param {?=} options
     * @return {?}
     */
    _initConfig(initialConfig, options = /** @type {?} */ ({})) {
        const /** @type {?} */ props = {};
        const /** @type {?} */ optionalParams = [
            'componentParams',
            'visible',
            'title',
            'content',
            'footer',
            'width',
            'zIndex',
            'okText',
            'cancelText',
            'style',
            'class',
            'onOk',
            'onCancel',
            'closable',
            'maskClosable',
            'wrapClassName',
            'iconType',
            'confirmType',
            'moduleWithComponentFactories'
        ];
        const /** @type {?} */ config = Object.assign({}, options, initialConfig);
        optionalParams.forEach(key => {
            if (config[key] !== undefined) {
                const /** @type {?} */ modalKey = 'nz' + key.replace(/^\w{1}/, (a) => {
                    return a.toLocaleUpperCase();
                });
                props[modalKey] = config[key];
            }
        });
        const /** @type {?} */ isShowConfirmLoading = !!config['showConfirmLoading'];
        props['onOk'] = this._getConfirmCb(props['nzOnOk'], isShowConfirmLoading);
        props['onCancel'] = this._getConfirmCb(props['nzOnCancel']);
        // 在service模式下，不需要nzOnOk，防止触发this.nzOnOk.emit(e);
        delete props['nzOnOk'];
        delete props['nzOnCancel'];
        return props;
    }
    /**
     * @param {?=} fn
     * @param {?=} isShowConfirmLoading
     * @return {?}
     */
    _getConfirmCb(fn, isShowConfirmLoading = false) {
        return (_close, _instance) => {
            if (isShowConfirmLoading) {
                _instance.nzConfirmLoading = true;
            }
            if (fn) {
                const /** @type {?} */ ret = fn();
                if (!ret) {
                    _close();
                }
                else if (ret.then) {
                    ret.then(_close);
                }
            }
            else {
                _close();
            }
        };
    }
    /**
     * @param {?} props
     * @param {?} factory
     * @return {?}
     */
    _open(props, factory) {
        // 在body的内部最前插入一个<nz-modal></nz-modal>方便进行ApplicationRef.bootstrap
        document.body.insertBefore(document.createElement(factory.selector), document.body.firstChild);
        // document.body.appendChild(document.createElement(factory.selector));
        let /** @type {?} */ customComponentFactory;
        let /** @type {?} */ compRef;
        let /** @type {?} */ instance;
        let /** @type {?} */ subject;
        if (props['nzContent'] instanceof Type) {
            customComponentFactory = this._cfr.resolveComponentFactory(props['nzContent']);
            // 将编译出来的ngmodule中的用户component的factory作为modal内容存入
            props['nzContent'] = customComponentFactory;
        }
        compRef = this._appRef.bootstrap(factory);
        instance = compRef.instance;
        subject = instance.subject;
        ['onOk', 'onCancel'].forEach((eventType) => {
            subject.on(eventType, () => {
                const /** @type {?} */ eventHandler = props[eventType];
                if (eventHandler) {
                    eventHandler(() => {
                        instance.nzVisible = false;
                        setTimeout(() => {
                            compRef.destroy();
                        }, 200);
                    }, instance);
                }
            });
        });
        Object.assign(instance, props, {
            nzVisible: true
        });
        return subject;
    }
    /**
     * Open modal dialog
     * @param {?} config
     * @return {?}
     */
    open(config) {
        const /** @type {?} */ options = new ModalOptions();
        const /** @type {?} */ props = this._initConfig(config, options);
        return this._open(props, this._modalCompFactory);
    }
    /**
     * Open confirm dialog
     * @param {?} config
     * @return {?}
     */
    _openConfirm(config) {
        const /** @type {?} */ options = new ConfirmOptions();
        const /** @type {?} */ props = this._initConfig(config, options);
        return this._open(props, this._confirmCompFactory);
    }
    /**
     * Open info dialog
     * @param {?} props
     * @return {?}
     */
    info(props) {
        /* tslint:disable-next-line:no-any */
        const /** @type {?} */ config = Object.assign({
            confirmType: 'info',
            iconType: 'info-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open success dialog
     * @param {?} props
     * @return {?}
     */
    success(props) {
        /* tslint:disable-next-line:no-any */
        const /** @type {?} */ config = Object.assign({
            confirmType: 'success',
            iconType: 'check-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open error dialog
     * @param {?} props
     * @return {?}
     */
    error(props) {
        /* tslint:disable-next-line:no-any */
        const /** @type {?} */ config = Object.assign({
            confirmType: 'error',
            iconType: 'cross-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open warning dialog
     * @param {?} props
     * @return {?}
     */
    warning(props) {
        /* tslint:disable-next-line:no-any */
        const /** @type {?} */ config = Object.assign({
            confirmType: 'warning',
            iconType: 'exclamation-circle'
        }, props);
        return this._openConfirm(config);
    }
    /**
     * Open confirm dialog
     * @param {?} props
     * @return {?}
     */
    confirm(props) {
        /* tslint:disable-next-line:no-any */
        const /** @type {?} */ config = Object.assign({
            confirmType: 'confirm',
            okText: this._locale.translate('Modal.okText'),
            cancelText: this._locale.translate('Modal.cancelText')
        }, props);
        return this._openConfirm(config);
    }
}
NzModalService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzModalService.ctorParameters = () => [
    { type: ApplicationRef, },
    { type: ComponentFactoryResolver, },
    { type: NzLocaleService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzModalModule {
}
NzModalModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [NzModalComponent, NzConfirmComponent],
                providers: [NzModalSubject, NzModalService],
                declarations: [NzModalComponent, NzConfirmComponent],
                exports: [NzModalComponent, NzConfirmComponent],
                imports: [CommonModule, NzLocaleModule, NzButtonModule]
            },] },
];
/** @nocollapse */
NzModalModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

const NZ_NOTIFICATION_DEFAULT_CONFIG = new InjectionToken('NZ_NOTIFICATION_DEFAULT_CONFIG');
const NZ_NOTIFICATION_CONFIG = new InjectionToken('NZ_NOTIFICATION_CONFIG');
const NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER = {
    provide: NZ_NOTIFICATION_DEFAULT_CONFIG,
    useValue: {
        nzTop: '24px',
        nzRight: '0px',
        nzDuration: 4500,
        nzMaxStack: 7,
        nzPauseOnHover: true,
        nzAnimate: true
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzNotificationContainerComponent extends NzMessageContainerComponent {
    /**
     * @param {?} defaultConfig
     * @param {?} config
     */
    constructor(defaultConfig, config) {
        super(defaultConfig, config);
    }
}
NzNotificationContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-notification-container',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-notification" [style.top]="config.nzTop" [style.right]="config.nzRight">
      <nz-notification *ngFor="let message of messages; let i = index" [nzMessage]="message" [nzIndex]="i"></nz-notification>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-notification {
  position: fixed;
  z-index: 1010;
  width: 335px;
  margin-right: 24px;
}
.ant-notification-topLeft,
.ant-notification-bottomLeft {
  margin-left: 24px;
  margin-right: 0;
}
.ant-notification-topLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-bottomLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-topLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,
.ant-notification-bottomLeft .ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationLeftFadeIn;
}
.ant-notification-notice {
  padding: 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  line-height: 1.5;
  position: relative;
  margin-bottom: 10px;
  overflow: hidden;
}
.ant-notification-notice-message {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
  margin-bottom: 4px;
  line-height: 20px;
  display: inline-block;
}
.ant-notification-notice-message-single-line-auto-margin {
  width: calc(335px - 16px * 2 - 24px - 48px - 100%);
  background-color: transparent;
  pointer-events: none;
  display: block;
  max-width: 4px;
}
.ant-notification-notice-message-single-line-auto-margin:before {
  content: '';
  display: block;
  padding-bottom: 100%;
}
.ant-notification-notice-description {
  font-size: 12px;
}
.ant-notification-notice-closable .ant-notification-notice-message {
  padding-right: 24px;
}
.ant-notification-notice-with-icon .ant-notification-notice-message {
  font-size: 14px;
  margin-left: 48px;
  margin-bottom: 4px;
}
.ant-notification-notice-with-icon .ant-notification-notice-description {
  margin-left: 48px;
  font-size: 12px;
}
.ant-notification-notice-icon {
  position: absolute;
  font-size: 32px;
  line-height: 32px;
}
.ant-notification-notice-icon-success {
  color: #00a854;
}
.ant-notification-notice-icon-info {
  color: #108ee9;
}
.ant-notification-notice-icon-warning {
  color: #ffbf00;
}
.ant-notification-notice-icon-error {
  color: #f04134;
}
.ant-notification-notice-close-x:after {
  font-size: 12px;
  content: "\\e633";
  font-family: "anticon";
  cursor: pointer;
}
.ant-notification-notice-close {
  position: absolute;
  right: 16px;
  top: 10px;
  color: rgba(0, 0, 0, 0.43);
  outline: none;
  text-decoration: none;
}
.ant-notification-notice-close:hover {
  color: #404040;
}
.ant-notification-notice-btn {
  float: right;
  margin-top: 16px;
}
.ant-notification .notification-fade-effect {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-notification-fade-enter,
.ant-notification-fade-appear {
  opacity: 0;
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-play-state: paused;
}
.ant-notification-fade-leave {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-duration: 0.2s;
  animation-play-state: paused;
}
.ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationFadeIn;
  animation-play-state: running;
}
.ant-notification-fade-leave.ant-notification-fade-leave-active {
  animation-name: NotificationFadeOut;
  animation-play-state: running;
}
@keyframes NotificationFadeIn {
  0% {
    opacity: 0;
    left: 335px;
  }
  100% {
    left: 0;
    opacity: 1;
  }
}
@keyframes NotificationLeftFadeIn {
  0% {
    opacity: 0;
    right: 335px;
  }
  100% {
    right: 0;
    opacity: 1;
  }
}
@keyframes NotificationFadeOut {
  0% {
    opacity: 1;
    margin-bottom: 10px;
    padding-top: 16px;
    padding-bottom: 16px;
    max-height: 150px;
  }
  100% {
    opacity: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    max-height: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzNotificationContainerComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_NOTIFICATION_DEFAULT_CONFIG,] },] },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NZ_NOTIFICATION_CONFIG,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzNotificationComponent extends NzMessageComponent {
    /**
     * @param {?} container
     */
    constructor(container) {
        super(container);
    }
    /**
     * @return {?}
     */
    onClickClose() {
        this._destroy();
    }
}
NzNotificationComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-notification',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('enterLeave', [
                        state('enter', style({ opacity: 1, transform: 'translateX(0)' })),
                        transition('* => enter', [
                            style({ opacity: 0, transform: 'translateX(5%)' }),
                            animate('100ms linear')
                        ]),
                        state('leave', style({ opacity: 0, transform: 'translateY(-10%)' })),
                        transition('* => leave', [
                            style({ opacity: 1, transform: 'translateY(0)' }),
                            animate('100ms linear')
                        ]),
                    ])
                ],
                template: `
    <div class="ant-notification-notice ant-notification-notice-closable"
      [@enterLeave]="nzMessage.state"
      (mouseenter)="onEnter()"
      (mouseleave)="onLeave()">
      <div *ngIf="!nzMessage.html" class="ant-notification-notice-content">
        <div class="ant-notification-notice-content" [ngClass]="{ 'ant-notification-notice-with-icon': nzMessage.type !== 'blank' }">
          <ng-container [ngSwitch]="nzMessage.type">
            <i *ngSwitchCase="'success'" class="ant-notification-notice-icon ant-notification-notice-icon-success anticon anticon-check-circle-o"></i>
            <i *ngSwitchCase="'info'" class="ant-notification-notice-icon ant-notification-notice-icon-info anticon anticon-info-circle-o"></i>
            <i *ngSwitchCase="'warning'" class="ant-notification-notice-icon ant-notification-notice-icon-warning anticon anticon-exclamation-circle-o"></i>
            <i *ngSwitchCase="'error'" class="ant-notification-notice-icon ant-notification-notice-icon-error anticon anticon-cross-circle-o"></i>
          </ng-container>
          <div class="ant-notification-notice-message">{{ nzMessage.title }}</div>
          <div class="ant-notification-notice-description">{{ nzMessage.content }}</div>
        </div>
      </div>
      <div *ngIf="nzMessage.html" [innerHTML]="nzMessage.html"></div>
      <a tabindex="0" class="ant-notification-notice-close" (click)="onClickClose()">
        <span class="ant-notification-notice-close-x"></span>
      </a>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-notification {
  position: fixed;
  z-index: 1010;
  width: 335px;
  margin-right: 24px;
}
.ant-notification-topLeft,
.ant-notification-bottomLeft {
  margin-left: 24px;
  margin-right: 0;
}
.ant-notification-topLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-bottomLeft .ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-topLeft .ant-notification-fade-appear.ant-notification-fade-appear-active,
.ant-notification-bottomLeft .ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationLeftFadeIn;
}
.ant-notification-notice {
  padding: 16px;
  border-radius: 4px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
  background: #fff;
  line-height: 1.5;
  position: relative;
  margin-bottom: 10px;
  overflow: hidden;
}
.ant-notification-notice-message {
  font-size: 14px;
  color: rgba(0, 0, 0, 0.85);
  margin-bottom: 4px;
  line-height: 20px;
  display: inline-block;
}
.ant-notification-notice-message-single-line-auto-margin {
  width: calc(335px - 16px * 2 - 24px - 48px - 100%);
  background-color: transparent;
  pointer-events: none;
  display: block;
  max-width: 4px;
}
.ant-notification-notice-message-single-line-auto-margin:before {
  content: '';
  display: block;
  padding-bottom: 100%;
}
.ant-notification-notice-description {
  font-size: 12px;
}
.ant-notification-notice-closable .ant-notification-notice-message {
  padding-right: 24px;
}
.ant-notification-notice-with-icon .ant-notification-notice-message {
  font-size: 14px;
  margin-left: 48px;
  margin-bottom: 4px;
}
.ant-notification-notice-with-icon .ant-notification-notice-description {
  margin-left: 48px;
  font-size: 12px;
}
.ant-notification-notice-icon {
  position: absolute;
  font-size: 32px;
  line-height: 32px;
}
.ant-notification-notice-icon-success {
  color: #00a854;
}
.ant-notification-notice-icon-info {
  color: #108ee9;
}
.ant-notification-notice-icon-warning {
  color: #ffbf00;
}
.ant-notification-notice-icon-error {
  color: #f04134;
}
.ant-notification-notice-close-x:after {
  font-size: 12px;
  content: "\\e633";
  font-family: "anticon";
  cursor: pointer;
}
.ant-notification-notice-close {
  position: absolute;
  right: 16px;
  top: 10px;
  color: rgba(0, 0, 0, 0.43);
  outline: none;
  text-decoration: none;
}
.ant-notification-notice-close:hover {
  color: #404040;
}
.ant-notification-notice-btn {
  float: right;
  margin-top: 16px;
}
.ant-notification .notification-fade-effect {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-notification-fade-enter,
.ant-notification-fade-appear {
  opacity: 0;
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-play-state: paused;
}
.ant-notification-fade-leave {
  animation-duration: 0.24s;
  animation-fill-mode: both;
  animation-timing-function: cubic-bezier(0.645, 0.045, 0.355, 1);
  animation-duration: 0.2s;
  animation-play-state: paused;
}
.ant-notification-fade-enter.ant-notification-fade-enter-active,
.ant-notification-fade-appear.ant-notification-fade-appear-active {
  animation-name: NotificationFadeIn;
  animation-play-state: running;
}
.ant-notification-fade-leave.ant-notification-fade-leave-active {
  animation-name: NotificationFadeOut;
  animation-play-state: running;
}
@keyframes NotificationFadeIn {
  0% {
    opacity: 0;
    left: 335px;
  }
  100% {
    left: 0;
    opacity: 1;
  }
}
@keyframes NotificationLeftFadeIn {
  0% {
    opacity: 0;
    right: 335px;
  }
  100% {
    right: 0;
    opacity: 1;
  }
}
@keyframes NotificationFadeOut {
  0% {
    opacity: 1;
    margin-bottom: 10px;
    padding-top: 16px;
    padding-bottom: 16px;
    max-height: 150px;
  }
  100% {
    opacity: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
    max-height: 0;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzNotificationComponent.ctorParameters = () => [
    { type: NzNotificationContainerComponent, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzNotificationModule {
}
NzNotificationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, OverlayModule],
                declarations: [NzNotificationComponent, NzNotificationContainerComponent],
                providers: [NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER],
                entryComponents: [NzNotificationContainerComponent],
            },] },
];
/** @nocollapse */
NzNotificationModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPaginationComponent {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._showSizeChanger = false;
        this._showTotal = false;
        this._showQuickJumper = false;
        this._simple = false;
        this._current = 1;
        this._pageSize = 10;
        this._firstIndex = 1;
        this._lastIndex = Infinity;
        this._pages = [];
        this._options = [10, 20, 30, 40, 50];
        this.nzInTable = false;
        this.nzPageSizeChange = new EventEmitter();
        this.nzPageIndexChange = new EventEmitter();
        this.nzPageIndexClickChange = new EventEmitter();
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowSizeChanger(value) {
        this._showSizeChanger = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowSizeChanger() {
        return this._showSizeChanger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowQuickJumper(value) {
        this._showQuickJumper = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowQuickJumper() {
        return this._showQuickJumper;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowTotal(value) {
        this._showTotal = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowTotal() {
        return this._showTotal;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSimple(value) {
        this._simple = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzSimple() {
        return this._simple;
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    _jumpBefore(pageSize) {
        this._jumpPage(this._current - Math.round(pageSize / 2));
    }
    /**
     * @param {?} pageSize
     * @return {?}
     */
    _jumpAfter(pageSize) {
        this._jumpPage(this._current + Math.round(pageSize / 2));
    }
    /**
     * page size changer select values
     * @param {?} value
     * @return {?}
     */
    set nzPageSizeSelectorValues(value) {
        if (value) {
            this._options = value;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageIndex(value) {
        if (this._current === value) {
            return;
        }
        if (value > this._lastIndex || value < this._firstIndex) {
            return;
        }
        this._current = Number(value);
        this._buildIndexes();
    }
    /**
     * @return {?}
     */
    get nzPageIndex() {
        return this._current;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageSize(value) {
        if (value === this._pageSize) {
            return;
        }
        this._pageSize = value;
        this.nzPageIndexChange.emit(this.nzPageIndex);
        this._buildIndexes();
    }
    /**
     * @return {?}
     */
    get nzPageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTotal(value) {
        if (value === this._total) {
            return;
        }
        this._total = value;
        this._buildIndexes();
    }
    /**
     * @return {?}
     */
    get nzTotal() {
        return this._total;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _pageSizeChange($event) {
        this.nzPageSize = $event;
        this.nzPageSizeChange.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _nzPageIndexChange($event) {
        this.nzPageIndex = $event;
        this.nzPageIndexChange.emit(this.nzPageIndex);
    }
    /**
     * generate indexes list
     * @return {?}
     */
    _buildIndexes() {
        this._lastIndex = Math.ceil(this._total / this._pageSize);
        if (this._current > this._lastIndex) {
            this.nzPageIndex = this._lastIndex;
            this.nzPageIndexChange.emit(this.nzPageIndex);
        }
        const /** @type {?} */ tmpPages = [];
        if (this._lastIndex <= 9) {
            for (let /** @type {?} */ i = 2; i <= this._lastIndex - 1; i++) {
                tmpPages.push({ index: i });
            }
        }
        else {
            const /** @type {?} */ current = +this._current;
            let /** @type {?} */ left = Math.max(2, current - 2);
            let /** @type {?} */ right = Math.min(current + 2, this._lastIndex - 1);
            if (current - 1 <= 2) {
                right = 5;
            }
            if (this._lastIndex - current <= 2) {
                left = this._lastIndex - 4;
            }
            for (let /** @type {?} */ i = left; i <= right; i++) {
                tmpPages.push({ index: i });
            }
        }
        this._pages = tmpPages;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    _jumpPage(index) {
        if (index === this._firstIndex - 1 || index === this._lastIndex + 1 || index === this.nzPageIndex) {
            return;
        }
        if (index < this._firstIndex) {
            this.nzPageIndex = this._firstIndex;
        }
        else if (index > this._lastIndex) {
            this.nzPageIndex = this._lastIndex;
        }
        else {
            this.nzPageIndex = index;
        }
        this.nzPageIndexClickChange.emit(this.nzPageIndex);
        this.nzPageIndexChange.emit(this.nzPageIndex);
    }
    /**
     * @return {?}
     */
    get _isLastIndex() {
        return this._current === this._lastIndex;
    }
    /**
     * @return {?}
     */
    get _isFirstIndex() {
        return this._current === this._firstIndex;
    }
    /**
     * @return {?}
     */
    get _roundPageSize() {
        return Math.round(this._pageSize / 2);
    }
}
NzPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-pagination',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ul [class.ant-table-pagination]="nzInTable" class="ant-pagination ant-pagination-simple" *ngIf="nzSimple">
      <li
        title="{{ 'Pagination.prevPage' | nzTranslate }}"
        class="ant-pagination-prev"
        (click)="_jumpPage(_current-1)"
        [class.ant-pagination-disabled]="_isFirstIndex">
        <a class="ant-pagination-item-link"></a>
      </li>
      <li [attr.title]="_current+'/'+_lastIndex" class="ant-pagination-simple-pager">
        <input [ngModel]="nzPageIndex" (ngModelChange)="_nzPageIndexChange($event)" size="3"><span class="ant-pagination-slash">／</span>{{ _lastIndex }}
      </li>
      <li
        title="{{ 'Pagination.nextPage' | nzTranslate }}"
        class="ant-pagination-next"
        (click)="_jumpPage(_current+1)"
        [class.ant-pagination-disabled]="_isLastIndex">
        <a class="ant-pagination-item-link"></a>
      </li>
    </ul>
    <ul [class.ant-table-pagination]="nzInTable" *ngIf="!nzSimple" class="ant-pagination" [class.mini]="nzSize=='small'">
      <span class="ant-pagination-total-text" *ngIf="nzShowTotal">{{ 'Pagination.totalItems' | nzTranslate: { total: _total } }}</span>
      <li
        title="{{ 'Pagination.prevPage' | nzTranslate }}"
        class="ant-pagination-prev"
        (click)="_jumpPage(_current-1)"
        [class.ant-pagination-disabled]="_isFirstIndex">
        <a class="ant-pagination-item-link"></a>
      </li>
      <li
        title="{{ 'Pagination.firstPage' | nzTranslate }}"
        class="ant-pagination-item"
        (click)="_jumpPage(_firstIndex)"
        [class.ant-pagination-item-active]="_isFirstIndex">
        <a>{{ _firstIndex }}</a>
      </li>
      <li
        [attr.title]="'Pagination.forwardPage' | nzTranslate: { num: _roundPageSize }"
        (click)="_jumpBefore(_pageSize)"
        class="ant-pagination-jump-prev"
        *ngIf="(_lastIndex >9)&&(_current-3>_firstIndex)">
        <a></a>
      </li>
      <li
        *ngFor="let page of _pages"
        [attr.title]="page.index"
        class="ant-pagination-item"
        (click)="_jumpPage(page.index)"
        [class.ant-pagination-item-active]="_current==page.index">
        <a>{{ page.index }}</a>
      </li>
      <li
        [attr.title]="'Pagination.backwardPage' | nzTranslate: { num: _roundPageSize }"
        (click)="_jumpAfter(_pageSize)"
        class="ant-pagination-jump-next"
        *ngIf="(_lastIndex >9)&&(_current+3<_lastIndex)">
        <a></a>
      </li>
      <li
        [attr.title]="'Pagination.lastPage' | nzTranslate: { page: _lastIndex }"
        class="ant-pagination-item"
        (click)="_jumpPage(_lastIndex)"
        *ngIf="(_lastIndex>0)&&(_lastIndex!==_firstIndex)"
        [class.ant-pagination-item-active]="_isLastIndex">
        <a>{{ _lastIndex }}</a>
      </li>
      <li
        title="{{ 'Pagination.nextPage' | nzTranslate }}"
        class="ant-pagination-next"
        (click)="_jumpPage(_current+1)"
        [class.ant-pagination-disabled]="_isLastIndex">
        <a class="ant-pagination-item-link"></a>
      </li>
      <div class="ant-pagination-options">
        <nz-select
          *ngIf="nzShowSizeChanger"
          [nzSize]="nzSize=='small'?'small':''"
          class="ant-pagination-options-size-changer"
          [ngModel]="_pageSize"
          (ngModelChange)="_pageSizeChange($event)">
          <nz-option
            *ngFor="let option of _options"
            [nzLabel]="'Pagination.itemsPerPage' | nzTranslate: { num: option }"
            [nzValue]="option">
          </nz-option>
          <nz-option
            *ngIf="_options.indexOf(nzPageSize)==-1"
            [nzLabel]="'Pagination.itemsPerPage' | nzTranslate: { num: nzPageSize }"
            [nzValue]="nzPageSize">
          </nz-option>
        </nz-select>
        <div class="ant-pagination-options-quick-jumper"
          *ngIf="nzShowQuickJumper">
          {{ 'Pagination.jumpTo' | nzTranslate }}<input [ngModel]="nzPageIndex" (ngModelChange)="_nzPageIndexChange($event)">{{ 'Pagination.page' | nzTranslate }}
        </div>
      </div>
    </ul>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-pagination {
  font-size: 12px;
}
.ant-pagination:after {
  content: " ";
  display: block;
  height: 0;
  clear: both;
  overflow: hidden;
  visibility: hidden;
}
.ant-pagination-total-text {
  display: inline-block;
  vertical-align: middle;
  height: 28px;
  line-height: 28px;
  margin-right: 8px;
}
.ant-pagination-item {
  cursor: pointer;
  border-radius: 4px;
  user-select: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  list-style: none;
  display: inline-block;
  vertical-align: middle;
  border: 1px solid #d9d9d9;
  background-color: #fff;
  margin-right: 8px;
  font-family: Arial;
  outline: 0;
}
.ant-pagination-item a {
  text-decoration: none;
  color: rgba(0, 0, 0, 0.65);
  transition: none;
  margin: 0 6px;
}
.ant-pagination-item:focus,
.ant-pagination-item:hover {
  transition: all .3s;
  border-color: #108ee9;
}
.ant-pagination-item:focus a,
.ant-pagination-item:hover a {
  color: #108ee9;
}
.ant-pagination-item-active {
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-pagination-item-active:focus,
.ant-pagination-item-active:hover {
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-pagination-item-active a,
.ant-pagination-item-active:focus a,
.ant-pagination-item-active:hover a {
  color: #fff;
}
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  outline: 0;
}
.ant-pagination-jump-prev:after,
.ant-pagination-jump-next:after {
  content: "•••";
  display: block;
  letter-spacing: 2px;
  color: rgba(0, 0, 0, 0.25);
  text-align: center;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-prev:hover:after,
.ant-pagination-jump-next:hover:after {
  color: #108ee9;
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  letter-spacing: -1px;
  font-family: "anticon";
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  filter: none;
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  font-size: 12px;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-prev:hover:after {
  content: "\\e620\\e620";
}
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-next:hover:after {
  content: "\\e61f\\e61f";
}
.ant-pagination-prev,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  margin-right: 8px;
}
.ant-pagination-prev,
.ant-pagination-next,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  font-family: Arial;
  cursor: pointer;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 4px;
  list-style: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  transition: all .3s;
  display: inline-block;
  vertical-align: middle;
}
.ant-pagination-prev,
.ant-pagination-next {
  outline: 0;
}
.ant-pagination-prev a,
.ant-pagination-next a {
  color: rgba(0, 0, 0, 0.65);
  user-select: none;
}
.ant-pagination-prev:hover a,
.ant-pagination-next:hover a {
  color: #108ee9;
}
.ant-pagination-prev .ant-pagination-item-link,
.ant-pagination-next .ant-pagination-item-link {
  border: 1px solid #d9d9d9;
  background-color: #fff;
  border-radius: 4px;
  outline: none;
  display: block;
  transition: all .3s;
}
.ant-pagination-prev .ant-pagination-item-link:after,
.ant-pagination-next .ant-pagination-item-link:after {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  display: block;
  height: 26px;
  line-height: 26px;
  font-family: "anticon";
  text-align: center;
  font-weight: 500;
}
:root .ant-pagination-prev .ant-pagination-item-link:after,
:root .ant-pagination-next .ant-pagination-item-link:after {
  filter: none;
}
:root .ant-pagination-prev .ant-pagination-item-link:after,
:root .ant-pagination-next .ant-pagination-item-link:after {
  font-size: 12px;
}
.ant-pagination-prev:focus .ant-pagination-item-link,
.ant-pagination-next:focus .ant-pagination-item-link,
.ant-pagination-prev:hover .ant-pagination-item-link,
.ant-pagination-next:hover .ant-pagination-item-link {
  border-color: #108ee9;
  color: #108ee9;
}
.ant-pagination-prev .ant-pagination-item-link:after {
  content: "\\e620";
  display: block;
}
.ant-pagination-next .ant-pagination-item-link:after {
  content: "\\e61f";
  display: block;
}
.ant-pagination-disabled,
.ant-pagination-disabled:hover,
.ant-pagination-disabled:focus {
  cursor: not-allowed;
}
.ant-pagination-disabled a,
.ant-pagination-disabled:hover a,
.ant-pagination-disabled:focus a,
.ant-pagination-disabled .ant-pagination-item-link,
.ant-pagination-disabled:hover .ant-pagination-item-link,
.ant-pagination-disabled:focus .ant-pagination-item-link {
  border-color: #d9d9d9;
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-pagination-slash {
  margin: 0 10px 0 5px;
}
.ant-pagination-options {
  display: inline-block;
  vertical-align: middle;
  margin-left: 16px;
}
.ant-pagination-options-size-changer {
  display: inline-block;
  margin-right: 8px;
}
.ant-pagination-options-quick-jumper {
  display: inline-block;
  height: 28px;
  line-height: 28px;
}
.ant-pagination-options-quick-jumper input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  margin: 0 8px;
  width: 50px;
}
.ant-pagination-options-quick-jumper input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-pagination-options-quick-jumper input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-pagination-options-quick-jumper input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-pagination-options-quick-jumper input:hover {
  border-color: #49a9ee;
}
.ant-pagination-options-quick-jumper input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-pagination-options-quick-jumper input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-pagination-options-quick-jumper input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-pagination-options-quick-jumper input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-pagination-options-quick-jumper input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-pagination-simple .ant-pagination-prev,
.ant-pagination-simple .ant-pagination-next {
  height: 24px;
  line-height: 24px;
  vertical-align: top;
}
.ant-pagination-simple .ant-pagination-prev .ant-pagination-item-link,
.ant-pagination-simple .ant-pagination-next .ant-pagination-item-link {
  border: 0;
  height: 24px;
}
.ant-pagination-simple .ant-pagination-prev .ant-pagination-item-link:after,
.ant-pagination-simple .ant-pagination-next .ant-pagination-item-link:after {
  line-height: 24px;
}
.ant-pagination-simple .ant-pagination-simple-pager {
  display: inline-block;
  margin-right: 8px;
  height: 24px;
}
.ant-pagination-simple .ant-pagination-simple-pager input {
  margin-right: 8px;
  box-sizing: border-box;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  outline: none;
  padding: 0 6px;
  height: 100%;
  text-align: center;
  transition: border-color 0.3s;
}
.ant-pagination-simple .ant-pagination-simple-pager input:hover {
  border-color: #108ee9;
}
.ant-pagination.mini .ant-pagination-total-text,
.ant-pagination.mini .ant-pagination-simple-pager {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-item {
  border: 0;
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-prev,
.ant-pagination.mini .ant-pagination-next {
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-prev .ant-pagination-item-link,
.ant-pagination.mini .ant-pagination-next .ant-pagination-item-link {
  border: 0;
}
.ant-pagination.mini .ant-pagination-prev .ant-pagination-item-link:after,
.ant-pagination.mini .ant-pagination-next .ant-pagination-item-link:after {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-jump-prev,
.ant-pagination.mini .ant-pagination-jump-next {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options {
  margin-left: 8px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper input {
  padding: 1px 7px;
  height: 22px;
  width: 44px;
}
@media only screen and (max-width: 1024px) {
  .ant-pagination-item-after-jump-prev,
  .ant-pagination-item-before-jump-next {
    display: none;
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-pagination {
  font-size: 12px;
}
.ant-pagination:after {
  content: " ";
  display: block;
  height: 0;
  clear: both;
  overflow: hidden;
  visibility: hidden;
}
.ant-pagination-total-text {
  display: inline-block;
  vertical-align: middle;
  height: 28px;
  line-height: 28px;
  margin-right: 8px;
}
.ant-pagination-item {
  cursor: pointer;
  border-radius: 4px;
  user-select: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  list-style: none;
  display: inline-block;
  vertical-align: middle;
  border: 1px solid #d9d9d9;
  background-color: #fff;
  margin-right: 8px;
  font-family: Arial;
  outline: 0;
}
.ant-pagination-item a {
  text-decoration: none;
  color: rgba(0, 0, 0, 0.65);
  transition: none;
  margin: 0 6px;
}
.ant-pagination-item:focus,
.ant-pagination-item:hover {
  transition: all .3s;
  border-color: #108ee9;
}
.ant-pagination-item:focus a,
.ant-pagination-item:hover a {
  color: #108ee9;
}
.ant-pagination-item-active {
  background-color: #108ee9;
  border-color: #108ee9;
}
.ant-pagination-item-active:focus,
.ant-pagination-item-active:hover {
  background-color: #49a9ee;
  border-color: #49a9ee;
}
.ant-pagination-item-active a,
.ant-pagination-item-active:focus a,
.ant-pagination-item-active:hover a {
  color: #fff;
}
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  outline: 0;
}
.ant-pagination-jump-prev:after,
.ant-pagination-jump-next:after {
  content: "•••";
  display: block;
  letter-spacing: 2px;
  color: rgba(0, 0, 0, 0.25);
  text-align: center;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-prev:hover:after,
.ant-pagination-jump-next:hover:after {
  color: #108ee9;
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  letter-spacing: -1px;
  font-family: "anticon";
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  filter: none;
}
:root .ant-pagination-jump-prev:focus:after,
:root .ant-pagination-jump-next:focus:after,
:root .ant-pagination-jump-prev:hover:after,
:root .ant-pagination-jump-next:hover:after {
  font-size: 12px;
}
.ant-pagination-jump-prev:focus:after,
.ant-pagination-jump-prev:hover:after {
  content: "\\e620\\e620";
}
.ant-pagination-jump-next:focus:after,
.ant-pagination-jump-next:hover:after {
  content: "\\e61f\\e61f";
}
.ant-pagination-prev,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  margin-right: 8px;
}
.ant-pagination-prev,
.ant-pagination-next,
.ant-pagination-jump-prev,
.ant-pagination-jump-next {
  font-family: Arial;
  cursor: pointer;
  color: rgba(0, 0, 0, 0.65);
  border-radius: 4px;
  list-style: none;
  min-width: 28px;
  height: 28px;
  line-height: 28px;
  text-align: center;
  transition: all .3s;
  display: inline-block;
  vertical-align: middle;
}
.ant-pagination-prev,
.ant-pagination-next {
  outline: 0;
}
.ant-pagination-prev a,
.ant-pagination-next a {
  color: rgba(0, 0, 0, 0.65);
  user-select: none;
}
.ant-pagination-prev:hover a,
.ant-pagination-next:hover a {
  color: #108ee9;
}
.ant-pagination-prev .ant-pagination-item-link,
.ant-pagination-next .ant-pagination-item-link {
  border: 1px solid #d9d9d9;
  background-color: #fff;
  border-radius: 4px;
  outline: none;
  display: block;
  transition: all .3s;
}
.ant-pagination-prev .ant-pagination-item-link:after,
.ant-pagination-next .ant-pagination-item-link:after {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  display: block;
  height: 26px;
  line-height: 26px;
  font-family: "anticon";
  text-align: center;
  font-weight: 500;
}
:root .ant-pagination-prev .ant-pagination-item-link:after,
:root .ant-pagination-next .ant-pagination-item-link:after {
  filter: none;
}
:root .ant-pagination-prev .ant-pagination-item-link:after,
:root .ant-pagination-next .ant-pagination-item-link:after {
  font-size: 12px;
}
.ant-pagination-prev:focus .ant-pagination-item-link,
.ant-pagination-next:focus .ant-pagination-item-link,
.ant-pagination-prev:hover .ant-pagination-item-link,
.ant-pagination-next:hover .ant-pagination-item-link {
  border-color: #108ee9;
  color: #108ee9;
}
.ant-pagination-prev .ant-pagination-item-link:after {
  content: "\\e620";
  display: block;
}
.ant-pagination-next .ant-pagination-item-link:after {
  content: "\\e61f";
  display: block;
}
.ant-pagination-disabled,
.ant-pagination-disabled:hover,
.ant-pagination-disabled:focus {
  cursor: not-allowed;
}
.ant-pagination-disabled a,
.ant-pagination-disabled:hover a,
.ant-pagination-disabled:focus a,
.ant-pagination-disabled .ant-pagination-item-link,
.ant-pagination-disabled:hover .ant-pagination-item-link,
.ant-pagination-disabled:focus .ant-pagination-item-link {
  border-color: #d9d9d9;
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
}
.ant-pagination-slash {
  margin: 0 10px 0 5px;
}
.ant-pagination-options {
  display: inline-block;
  vertical-align: middle;
  margin-left: 16px;
}
.ant-pagination-options-size-changer {
  display: inline-block;
  margin-right: 8px;
}
.ant-pagination-options-quick-jumper {
  display: inline-block;
  height: 28px;
  line-height: 28px;
}
.ant-pagination-options-quick-jumper input {
  position: relative;
  display: inline-block;
  padding: 4px 7px;
  width: 100%;
  height: 28px;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
  background-image: none;
  border: 1px solid #d9d9d9;
  border-radius: 4px;
  transition: all .3s;
  margin: 0 8px;
  width: 50px;
}
.ant-pagination-options-quick-jumper input::-moz-placeholder {
  color: #bfbfbf;
  opacity: 1;
}
.ant-pagination-options-quick-jumper input:-ms-input-placeholder {
  color: #bfbfbf;
}
.ant-pagination-options-quick-jumper input::-webkit-input-placeholder {
  color: #bfbfbf;
}
.ant-pagination-options-quick-jumper input:hover {
  border-color: #49a9ee;
}
.ant-pagination-options-quick-jumper input:focus {
  border-color: #49a9ee;
  outline: 0;
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-pagination-options-quick-jumper input-disabled {
  background-color: #f7f7f7;
  opacity: 1;
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-pagination-options-quick-jumper input-disabled:hover {
  border-color: #e2e2e2;
}
textarea.ant-pagination-options-quick-jumper input {
  max-width: 100%;
  height: auto;
  vertical-align: bottom;
  transition: all .3s, height 0s;
}
.ant-pagination-options-quick-jumper input-lg {
  padding: 6px 7px;
  height: 32px;
}
.ant-pagination-options-quick-jumper input-sm {
  padding: 1px 7px;
  height: 22px;
}
.ant-pagination-simple .ant-pagination-prev,
.ant-pagination-simple .ant-pagination-next {
  height: 24px;
  line-height: 24px;
  vertical-align: top;
}
.ant-pagination-simple .ant-pagination-prev .ant-pagination-item-link,
.ant-pagination-simple .ant-pagination-next .ant-pagination-item-link {
  border: 0;
  height: 24px;
}
.ant-pagination-simple .ant-pagination-prev .ant-pagination-item-link:after,
.ant-pagination-simple .ant-pagination-next .ant-pagination-item-link:after {
  line-height: 24px;
}
.ant-pagination-simple .ant-pagination-simple-pager {
  display: inline-block;
  margin-right: 8px;
  height: 24px;
}
.ant-pagination-simple .ant-pagination-simple-pager input {
  margin-right: 8px;
  box-sizing: border-box;
  background-color: #fff;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  outline: none;
  padding: 0 6px;
  height: 100%;
  text-align: center;
  transition: border-color 0.3s;
}
.ant-pagination-simple .ant-pagination-simple-pager input:hover {
  border-color: #108ee9;
}
.ant-pagination.mini .ant-pagination-total-text,
.ant-pagination.mini .ant-pagination-simple-pager {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-item {
  border: 0;
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-prev,
.ant-pagination.mini .ant-pagination-next {
  margin: 0;
  min-width: 20px;
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-prev .ant-pagination-item-link,
.ant-pagination.mini .ant-pagination-next .ant-pagination-item-link {
  border: 0;
}
.ant-pagination.mini .ant-pagination-prev .ant-pagination-item-link:after,
.ant-pagination.mini .ant-pagination-next .ant-pagination-item-link:after {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-jump-prev,
.ant-pagination.mini .ant-pagination-jump-next {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options {
  margin-left: 8px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper {
  height: 20px;
  line-height: 20px;
}
.ant-pagination.mini .ant-pagination-options-quick-jumper input {
  padding: 1px 7px;
  height: 22px;
  width: 44px;
}
@media only screen and (max-width: 1024px) {
  .ant-pagination-item-after-jump-prev,
  .ant-pagination-item-before-jump-next {
    display: none;
  }
}
.ant-pagination {
  user-select: none;
}
`
                ]
            },] },
];
/** @nocollapse */
NzPaginationComponent.ctorParameters = () => [
    { type: ElementRef, },
];
NzPaginationComponent.propDecorators = {
    "nzInTable": [{ type: Input },],
    "nzShowSizeChanger": [{ type: Input },],
    "nzShowQuickJumper": [{ type: Input },],
    "nzShowTotal": [{ type: Input },],
    "nzSimple": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzPageSizeChange": [{ type: Output },],
    "nzPageIndexChange": [{ type: Output },],
    "nzPageIndexClickChange": [{ type: Output },],
    "nzPageSizeSelectorValues": [{ type: Input },],
    "nzPageIndex": [{ type: Input },],
    "nzPageSize": [{ type: Input },],
    "nzTotal": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPaginationModule {
}
NzPaginationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzPaginationComponent],
                exports: [NzPaginationComponent],
                imports: [CommonModule, FormsModule, NzSelectModule, NzLocaleModule]
            },] },
];
/** @nocollapse */
NzPaginationModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzToolTipComponent {
    /**
     * @param {?} _cdr
     */
    constructor(_cdr) {
        this._cdr = _cdr;
        this._hasBackdrop = false;
        this.nzOverlayClassName = '';
        this.nzOverlayStyle = {};
        this.nzMouseEnterDelay = 0;
        this.nzMouseLeaveDelay = 0.1;
        this.nzVisibleChange = new EventEmitter();
        this.visibleSource = new BehaviorSubject$1(false);
        this.visible$ = this.visibleSource.asObservable();
        this._prefix = 'ant-tooltip-placement';
        this._positions = [...DEFAULT_4_POSITIONS];
        this._classMap = {};
        this._placement = 'top';
        this._trigger = 'hover';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVisible(value) {
        const /** @type {?} */ visible = toBoolean(value);
        if (this.visibleSource.value !== visible) {
            this.visibleSource.next(visible);
            this.nzVisibleChange.emit(visible);
        }
    }
    /**
     * @return {?}
     */
    get nzVisible() {
        return this.visibleSource.value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTrigger(value) {
        this._trigger = value;
        this._hasBackdrop = this._trigger === 'click';
    }
    /**
     * @return {?}
     */
    get nzTrigger() {
        return this._trigger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPlacement(value) {
        if (value !== this._placement) {
            this._placement = value;
            this._positions.unshift(/** @type {?} */ (POSITION_MAP[this.nzPlacement]));
        }
    }
    /**
     * @return {?}
     */
    get nzPlacement() {
        return this._placement;
    }
    /**
     * @return {?}
     */
    updatePosition() {
        if (this.overlay && this.overlay.overlayRef) {
            this.overlay.overlayRef.updatePosition();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPositionChange($event) {
        for (const /** @type {?} */ key in POSITION_MAP) {
            if (JSON.stringify($event.connectionPair) === JSON.stringify(POSITION_MAP[key])) {
                this.nzPlacement = key;
                break;
            }
        }
        this.setClassMap();
        /** TODO may cause performance problem */
        this._cdr.detectChanges();
    }
    /**
     * @return {?}
     */
    show() {
        if (!this.isContentEmpty()) {
            this.nzVisible = true;
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.nzVisible = false;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _afterVisibilityAnimation(e) {
        if (e.toState === 'false' && !this.nzVisible) {
            this.nzVisibleChange.emit(false);
        }
        if (e.toState === 'true' && this.nzVisible) {
            this.nzVisibleChange.emit(true);
        }
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this.nzOverlayClassName]: true,
            [`${this._prefix}-${this._placement}`]: true
        };
    }
    /**
     * @param {?} origin
     * @return {?}
     */
    setOverlayOrigin(origin) {
        this.overlayOrigin = origin;
    }
    /**
     * @return {?}
     */
    isContentEmpty() {
        // return this.nzTemplate ? !(this.nzTemplate.elementRef.nativeElement as HTMLElement).hasChildNodes() : this.nzTitle === '';
        return this.nzTemplate ? false : (this.nzTitle === '' || this.nzTitle == null); // Pity, can't detect whether nzTemplate is empty due to can't get it's content before shown up
    }
}
NzToolTipComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tooltip',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    fadeAnimation
                ],
                template: `
    <ng-content></ng-content>
    <ng-template
      #overlay="cdkConnectedOverlay"
      cdkConnectedOverlay
      [cdkConnectedOverlayOrigin]="overlayOrigin"
      [cdkConnectedOverlayHasBackdrop]="_hasBackdrop"
      (backdropClick)="hide()"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOpen]="visible$ | async">
      <div class="ant-tooltip" [ngClass]="_classMap" [ngStyle]="nzOverlayStyle" [@fadeAnimation]="''+(visible$ | async)"
        (@fadeAnimation.done)="_afterVisibilityAnimation($event)">
        <div class="ant-tooltip-content">
          <div class="ant-tooltip-arrow"></div>
          <div class="ant-tooltip-inner">
            <span *ngIf="!nzTemplate">{{ nzTitle }}</span>
            <ng-template
              *ngIf="nzTemplate"
              [ngTemplateOutlet]="nzTemplate">
            </ng-template>
          </div>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tooltip {
  position: absolute;
  z-index: 1060;
  display: block;
  visibility: visible;
  font-size: 12px;
  line-height: 1.5;
}
.ant-tooltip-hidden {
  display: none;
}
.ant-tooltip-placement-top,
.ant-tooltip-placement-topLeft,
.ant-tooltip-placement-topRight {
  padding-bottom: 8px;
}
.ant-tooltip-placement-right,
.ant-tooltip-placement-rightTop,
.ant-tooltip-placement-rightBottom {
  padding-left: 8px;
}
.ant-tooltip-placement-bottom,
.ant-tooltip-placement-bottomLeft,
.ant-tooltip-placement-bottomRight {
  padding-top: 8px;
}
.ant-tooltip-placement-left,
.ant-tooltip-placement-leftTop,
.ant-tooltip-placement-leftBottom {
  padding-right: 8px;
}
.ant-tooltip-inner {
  max-width: 250px;
  padding: 8px 10px;
  color: #fff;
  text-align: left;
  text-decoration: none;
  background-color: rgba(0, 0, 0, 0.75);
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  min-height: 34px;
}
.ant-tooltip-arrow {
  position: absolute;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-tooltip-placement-top .ant-tooltip-arrow,
.ant-tooltip-placement-topLeft .ant-tooltip-arrow,
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  bottom: 3px;
  border-width: 5px 5px 0;
  border-top-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-top .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-topLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  right: 16px;
}
.ant-tooltip-placement-right .ant-tooltip-arrow,
.ant-tooltip-placement-rightTop .ant-tooltip-arrow,
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  left: 3px;
  border-width: 5px 5px 5px 0;
  border-right-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-right .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-rightTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-left .ant-tooltip-arrow,
.ant-tooltip-placement-leftTop .ant-tooltip-arrow,
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  right: 3px;
  border-width: 5px 0 5px 5px;
  border-left-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-left .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-leftTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow,
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow,
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  top: 3px;
  border-width: 0 5px 5px;
  border-bottom-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  right: 16px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tooltip {
  position: absolute;
  z-index: 1060;
  display: block;
  visibility: visible;
  font-size: 12px;
  line-height: 1.5;
}
.ant-tooltip-hidden {
  display: none;
}
.ant-tooltip-placement-top,
.ant-tooltip-placement-topLeft,
.ant-tooltip-placement-topRight {
  padding-bottom: 8px;
}
.ant-tooltip-placement-right,
.ant-tooltip-placement-rightTop,
.ant-tooltip-placement-rightBottom {
  padding-left: 8px;
}
.ant-tooltip-placement-bottom,
.ant-tooltip-placement-bottomLeft,
.ant-tooltip-placement-bottomRight {
  padding-top: 8px;
}
.ant-tooltip-placement-left,
.ant-tooltip-placement-leftTop,
.ant-tooltip-placement-leftBottom {
  padding-right: 8px;
}
.ant-tooltip-inner {
  max-width: 250px;
  padding: 8px 10px;
  color: #fff;
  text-align: left;
  text-decoration: none;
  background-color: rgba(0, 0, 0, 0.75);
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
  min-height: 34px;
}
.ant-tooltip-arrow {
  position: absolute;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-tooltip-placement-top .ant-tooltip-arrow,
.ant-tooltip-placement-topLeft .ant-tooltip-arrow,
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  bottom: 3px;
  border-width: 5px 5px 0;
  border-top-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-top .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-topLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-topRight .ant-tooltip-arrow {
  right: 16px;
}
.ant-tooltip-placement-right .ant-tooltip-arrow,
.ant-tooltip-placement-rightTop .ant-tooltip-arrow,
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  left: 3px;
  border-width: 5px 5px 5px 0;
  border-right-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-right .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-rightTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-rightBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-left .ant-tooltip-arrow,
.ant-tooltip-placement-leftTop .ant-tooltip-arrow,
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  right: 3px;
  border-width: 5px 0 5px 5px;
  border-left-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-left .ant-tooltip-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-tooltip-placement-leftTop .ant-tooltip-arrow {
  top: 8px;
}
.ant-tooltip-placement-leftBottom .ant-tooltip-arrow {
  bottom: 8px;
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow,
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow,
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  top: 3px;
  border-width: 0 5px 5px;
  border-bottom-color: rgba(0, 0, 0, 0.75);
}
.ant-tooltip-placement-bottom .ant-tooltip-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-tooltip-placement-bottomLeft .ant-tooltip-arrow {
  left: 16px;
}
.ant-tooltip-placement-bottomRight .ant-tooltip-arrow {
  right: 16px;
}
.ant-tooltip {
  position: relative;
}
`
                ]
            },] },
];
/** @nocollapse */
NzToolTipComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
];
NzToolTipComponent.propDecorators = {
    "nzTitle": [{ type: Input },],
    "nzOverlayClassName": [{ type: Input },],
    "nzOverlayStyle": [{ type: Input },],
    "nzMouseEnterDelay": [{ type: Input },],
    "nzMouseLeaveDelay": [{ type: Input },],
    "nzVisibleChange": [{ type: Output },],
    "nzTemplate": [{ type: ContentChild, args: ['nzTemplate',] },],
    "overlay": [{ type: ViewChild, args: ['overlay',] },],
    "nzVisible": [{ type: Input },],
    "nzTrigger": [{ type: Input },],
    "nzPlacement": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPopconfirmComponent extends NzToolTipComponent {
    /**
     * @param {?} cdr
     * @param {?} _locale
     */
    constructor(cdr, _locale) {
        super(cdr);
        this._locale = _locale;
        this._condition = false;
        this._prefix = 'ant-popover-placement';
        this._trigger = 'click';
        this._hasBackdrop = true;
        this.nzOkText = this._locale.translate('Modal.okText');
        this.nzCancelText = this._locale.translate('Modal.cancelText');
        this.nzOnCancel = new EventEmitter();
        this.nzOnConfirm = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCondition(value) {
        this._condition = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCondition() {
        return this._condition;
    }
    /**
     * @return {?}
     */
    show() {
        if (!this._condition) {
            this.nzVisible = true;
        }
        else {
            this.onConfirm();
        }
    }
    /**
     * @return {?}
     */
    onCancel() {
        this.nzOnCancel.emit();
        this.nzVisible = false;
    }
    /**
     * @return {?}
     */
    onConfirm() {
        this.nzOnConfirm.emit();
        this.nzVisible = false;
    }
}
NzPopconfirmComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-popconfirm',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    fadeAnimation
                ],
                template: `
    <ng-content></ng-content>
    <ng-template
      #overlay="cdkConnectedOverlay"
      cdkConnectedOverlay
      [cdkConnectedOverlayOrigin]="overlayOrigin"
      [cdkConnectedOverlayHasBackdrop]="_hasBackdrop"
      (backdropClick)="hide()"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOpen]="visible$ | async">
      <div class="ant-popover" [ngClass]="_classMap" [ngStyle]="nzOverlayStyle" [@fadeAnimation]="''+(visible$ | async)"
        (@fadeAnimation.done)="_afterVisibilityAnimation($event)">
        <div class="ant-popover-content">
          <div class="ant-popover-arrow"></div>
          <div class="ant-popover-inner">
            <div>
              <div class="ant-popover-inner-content">
                <div class="ant-popover-message" *ngIf="!nzTemplate">
                  <i class="anticon anticon-exclamation-circle"></i>
                  <div class="ant-popover-message-title">{{ nzTitle }}</div>
                </div>
                <div class="ant-popover-buttons" *ngIf="!nzTemplate">
                  <button nz-button [nzSize]="'small'" (click)="onCancel()"><span>{{ nzCancelText }}</span></button>
                  <button nz-button [nzSize]="'small'" [nzType]="'primary'" (click)="onConfirm()">
                    <span>{{ nzOkText }}</span></button>
                </div>
                <ng-template
                  *ngIf="nzTemplate"
                  [ngTemplateOutlet]="nzTemplate">
                </ng-template>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 8px 16px;
  min-height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 8px 16px;
  min-height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover {
  position: relative;
  margin: 1px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzPopconfirmComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: NzLocaleService, },
];
NzPopconfirmComponent.propDecorators = {
    "nzContent": [{ type: Input },],
    "nzOkText": [{ type: Input },],
    "nzCancelText": [{ type: Input },],
    "nzCondition": [{ type: Input },],
    "nzOnCancel": [{ type: Output },],
    "nzOnConfirm": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTooltipDirective {
    /**
     * @param {?} elementRef
     * @param {?} hostView
     * @param {?} resolver
     * @param {?} renderer
     * @param {?} tooltip
     */
    constructor(elementRef, hostView, resolver, renderer, tooltip) {
        this.elementRef = elementRef;
        this.hostView = hostView;
        this.resolver = resolver;
        this.renderer = renderer;
        this.isDynamicTooltip = false;
        this.tooltip = tooltip;
        // Support faster tooltip mode: <a nz-tooltip="xxx"></a>. [NOTE] Used only under NzTooltipDirective currently.
        if (!this.tooltip) {
            const /** @type {?} */ factory = this.resolver.resolveComponentFactory(NzToolTipComponent);
            this.tooltip = this.hostView.createComponent(factory).instance;
            this.isDynamicTooltip = true;
        }
        this.tooltip.setOverlayOrigin(this);
    }
    /**
     * @return {?}
     */
    get nzTitle() { return this.tooltip.nzTitle; }
    /**
     * @param {?} title
     * @return {?}
     */
    set nzTitle(title) {
        if (this.isDynamicTooltip) {
            this.tooltip.nzTitle = title;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.tooltip.nzTrigger === 'hover') {
            let /** @type {?} */ overlayElement;
            this.renderer.listen(this.elementRef.nativeElement, 'mouseenter', () => this.delayEnterLeave(true, true, this.tooltip.nzMouseEnterDelay));
            this.renderer.listen(this.elementRef.nativeElement, 'mouseleave', () => {
                this.delayEnterLeave(true, false, this.tooltip.nzMouseLeaveDelay);
                if (this.tooltip.overlay.overlayRef && !overlayElement) {
                    // NOTE: we bind events under "mouseleave" due to the overlayRef is only created after the overlay was completely shown up
                    overlayElement = this.tooltip.overlay.overlayRef.overlayElement;
                    this.renderer.listen(overlayElement, 'mouseenter', () => this.delayEnterLeave(false, true));
                    this.renderer.listen(overlayElement, 'mouseleave', () => this.delayEnterLeave(false, false));
                }
            });
        }
        else if (this.tooltip.nzTrigger === 'focus') {
            this.renderer.listen(this.elementRef.nativeElement, 'focus', () => this.show());
            this.renderer.listen(this.elementRef.nativeElement, 'blur', () => this.hide());
        }
        else if (this.tooltip.nzTrigger === 'click') {
            this.renderer.listen(this.elementRef.nativeElement, 'click', (e) => {
                e.preventDefault();
                this.show();
            });
        }
    }
    /**
     * @return {?}
     */
    show() {
        this.tooltip.show();
        this.isTooltipOpen = true;
    }
    /**
     * @return {?}
     */
    hide() {
        this.tooltip.hide();
        this.isTooltipOpen = false;
    }
    /**
     * @param {?} isOrigin
     * @param {?} isEnter
     * @param {?=} delay
     * @return {?}
     */
    delayEnterLeave(isOrigin, isEnter, delay = -1) {
        if (this.delayTimer) {
            // Clear timer during the delay time
            window.clearTimeout(this.delayTimer);
            this.delayTimer = null;
        }
        else if (delay > 0) {
            this.delayTimer = window.setTimeout(() => {
                this.delayTimer = null;
                isEnter ? this.show() : this.hide();
            }, delay * 1000);
        }
        else {
            isEnter && isOrigin ? this.show() : this.hide(); // [Compatible] The "isOrigin" is used due to the tooltip will not hide immediately (may caused by the fade-out animation)
        }
    }
}
NzTooltipDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tooltip]',
            },] },
];
/** @nocollapse */
NzTooltipDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: Renderer2, },
    { type: NzToolTipComponent, decorators: [{ type: Optional },] },
];
NzTooltipDirective.propDecorators = {
    "nzTitle": [{ type: Input, args: ['nz-tooltip',] },],
    "isTooltipOpen": [{ type: HostBinding, args: ['class.ant-tooltip-open',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPopconfirmDirective extends NzTooltipDirective {
    /**
     * @param {?} elementRef
     * @param {?} hostView
     * @param {?} resolver
     * @param {?} renderer
     * @param {?} tooltip
     */
    constructor(elementRef, hostView, resolver, renderer, tooltip) {
        super(elementRef, hostView, resolver, renderer, tooltip);
    }
}
NzPopconfirmDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-popconfirm]',
            },] },
];
/** @nocollapse */
NzPopconfirmDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: Renderer2, },
    { type: NzPopconfirmComponent, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPopconfirmModule {
}
NzPopconfirmModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzPopconfirmComponent, NzPopconfirmDirective],
                exports: [NzPopconfirmComponent, NzPopconfirmDirective],
                imports: [CommonModule, NzButtonModule, OverlayModule, NzLocaleModule]
            },] },
];
/** @nocollapse */
NzPopconfirmModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPopoverComponent extends NzToolTipComponent {
    constructor() {
        super(...arguments);
        this._prefix = 'ant-popover-placement';
    }
}
NzPopoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-popover',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    fadeAnimation
                ],
                template: `
    <ng-content></ng-content>
    <ng-template
      #overlay="cdkConnectedOverlay"
      cdkConnectedOverlay
      [cdkConnectedOverlayOrigin]="overlayOrigin"
      [cdkConnectedOverlayHasBackdrop]="_hasBackdrop"
      (backdropClick)="hide()"
      (detach)="hide()"
      (positionChange)="onPositionChange($event)"
      [cdkConnectedOverlayPositions]="_positions"
      [cdkConnectedOverlayOpen]="visible$ | async">
      <div class="ant-popover" [ngClass]="_classMap" [ngStyle]="nzOverlayStyle" [@fadeAnimation]="''+(visible$ | async)"
        (@fadeAnimation.done)="_afterVisibilityAnimation($event)">
        <div class="ant-popover-content">
          <div class="ant-popover-arrow"></div>
          <div class="ant-popover-inner">
            <div class="ant-popover-title" *ngIf="nzTitle" [innerHTML]="nzTitle"></div>
            <div class="ant-popover-inner-content">
              <span *ngIf="!nzTemplate">{{ nzContent }}</span>
              <ng-template
                *ngIf="nzTemplate"
                [ngTemplateOutlet]="nzTemplate">
              </ng-template>
            </div>
          </div>
        </div>
      </div>
    </ng-template>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 8px 16px;
  min-height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-popover {
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1030;
  cursor: auto;
  user-select: text;
  white-space: normal;
  font-size: 12px;
  line-height: 1.5;
  font-weight: normal;
  text-align: left;
}
.ant-popover:after {
  content: "";
  position: absolute;
  background: rgba(255, 255, 255, 0.01);
}
.ant-popover-hidden {
  display: none;
}
.ant-popover-placement-top,
.ant-popover-placement-topLeft,
.ant-popover-placement-topRight {
  padding-bottom: 8px;
}
.ant-popover-placement-right,
.ant-popover-placement-rightTop,
.ant-popover-placement-rightBottom {
  padding-left: 8px;
}
.ant-popover-placement-bottom,
.ant-popover-placement-bottomLeft,
.ant-popover-placement-bottomRight {
  padding-top: 8px;
}
.ant-popover-placement-left,
.ant-popover-placement-leftTop,
.ant-popover-placement-leftBottom {
  padding-right: 8px;
}
.ant-popover-inner {
  background-color: #fff;
  background-clip: padding-box;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-popover-title {
  min-width: 177px;
  margin: 0;
  padding: 8px 16px;
  min-height: 32px;
  border-bottom: 1px solid #e9e9e9;
  color: rgba(0, 0, 0, 0.65);
  font-weight: 500;
}
.ant-popover-inner-content {
  padding: 8px 16px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message {
  padding: 8px 0 16px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
}
.ant-popover-message > .anticon {
  color: #ffbf00;
  line-height: 17px;
  position: absolute;
}
.ant-popover-message-title {
  padding-left: 20px;
}
.ant-popover-buttons {
  text-align: right;
  margin-bottom: 8px;
}
.ant-popover-buttons button {
  margin-left: 8px;
}
.ant-popover-arrow,
.ant-popover-arrow:after {
  position: absolute;
  display: block;
  width: 0;
  height: 0;
  border-color: transparent;
  border-style: solid;
}
.ant-popover-arrow {
  border-width: 5px;
}
.ant-popover-arrow:after {
  border-width: 4px;
  content: "";
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  border-bottom-width: 0;
  border-top-color: rgba(217, 217, 217, 0.7);
  bottom: 3px;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  bottom: 1px;
  margin-left: -4px;
  border-bottom-width: 0;
  border-top-color: #fff;
}
.ant-popover-placement-top > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-topLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-topRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  left: 3px;
  border-left-width: 0;
  border-right-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  left: 1px;
  bottom: -4px;
  border-left-width: 0;
  border-right-color: #fff;
}
.ant-popover-placement-right > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-rightTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-rightBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  border-top-width: 0;
  border-bottom-color: rgba(217, 217, 217, 0.7);
  top: 3px;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  top: 1px;
  margin-left: -4px;
  border-top-width: 0;
  border-bottom-color: #fff;
}
.ant-popover-placement-bottom > .ant-popover-content > .ant-popover-arrow {
  left: 50%;
  margin-left: -5px;
}
.ant-popover-placement-bottomLeft > .ant-popover-content > .ant-popover-arrow {
  left: 16px;
}
.ant-popover-placement-bottomRight > .ant-popover-content > .ant-popover-arrow {
  right: 16px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  right: 3px;
  border-right-width: 0;
  border-left-color: rgba(217, 217, 217, 0.7);
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow:after,
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow:after {
  content: " ";
  right: 1px;
  border-right-width: 0;
  border-left-color: #fff;
  bottom: -4px;
}
.ant-popover-placement-left > .ant-popover-content > .ant-popover-arrow {
  top: 50%;
  margin-top: -5px;
}
.ant-popover-placement-leftTop > .ant-popover-content > .ant-popover-arrow {
  top: 12px;
}
.ant-popover-placement-leftBottom > .ant-popover-content > .ant-popover-arrow {
  bottom: 12px;
}
.ant-popover {
  position: relative;
  margin: 1px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzPopoverComponent.ctorParameters = () => [];
NzPopoverComponent.propDecorators = {
    "nzContent": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPopoverDirective extends NzTooltipDirective {
    /**
     * @param {?} elementRef
     * @param {?} hostView
     * @param {?} resolver
     * @param {?} renderer
     * @param {?} tooltip
     */
    constructor(elementRef, hostView, resolver, renderer, tooltip) {
        super(elementRef, hostView, resolver, renderer, tooltip);
    }
}
NzPopoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-popover]',
            },] },
];
/** @nocollapse */
NzPopoverDirective.ctorParameters = () => [
    { type: ElementRef, },
    { type: ViewContainerRef, },
    { type: ComponentFactoryResolver, },
    { type: Renderer2, },
    { type: NzPopoverComponent, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzPopoverModule {
}
NzPopoverModule.decorators = [
    { type: NgModule, args: [{
                entryComponents: [NzPopoverComponent],
                exports: [NzPopoverDirective, NzPopoverComponent],
                declarations: [NzPopoverDirective, NzPopoverComponent],
                imports: [CommonModule, OverlayModule]
            },] },
];
/** @nocollapse */
NzPopoverModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzProgressComponent {
    constructor() {
        this._statusColorMap = {
            normal: '#108ee9',
            exception: '#ff5500',
            success: '#87d068',
        };
        this._pathString = '';
        this._pathStyle = {};
        this._circleStyle = {};
        this._percent = 0;
        this._hasFormat = false;
        this._rawStatus = 'normal';
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
        this.nzType = 'line';
        this.nzStrokeWidth = this.nzType === 'line' ? 10 : 6;
        this.nzWidth = 132;
        this.nzShowInfo = true;
        this.nzStatus = 'normal';
        this._format = (percent) => percent + '%';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _setFormat(value) {
        this._format = value;
        this._hasFormat = true;
    }
    /**
     * @return {?}
     */
    updateCircleStatus() {
        const /** @type {?} */ circleSize = this.nzWidth || 132;
        this._circleStyle = {
            'width.px': circleSize,
            'height.px': circleSize,
            'font-size.px': circleSize * 0.16 + 6,
        };
        const /** @type {?} */ radius = 50 - this.nzStrokeWidth / 2;
        const /** @type {?} */ len = Math.PI * 2 * radius;
        this._pathString = `M 50,50 m 0,-${radius}\n     a ${radius},${radius} 0 1 1 0,${radius * 2}\n     a ${radius},${radius} 0 1 1 0,-${radius * 2}`;
        this._pathStyle = {
            'stroke-dasharray': `${len}px ${len}px`,
            'stroke-dashoffset': (100 - this._percent) / 100 * len + 'px',
            'transition': 'stroke-dashoffset 0.3s ease 0s, stroke 0.3s ease'
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this._percent = value == null ? 0 : +value;
        if (this._percent === 100) {
            this.nzStatus = 'success';
        }
        else {
            this.nzStatus = this._rawStatus;
        }
        if (this.nzType === 'circle') {
            this.updateCircleStatus();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._rawStatus = this.nzStatus;
    }
}
NzProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-progress',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="'ant-progress ant-progress-status-'+nzStatus"
      [class.ant-progress-line]="nzType=='line'"
      [class.ant-progress-show-info]="nzShowInfo"
      [class.ant-progress-circle]="nzType=='circle'">
      <div *ngIf="nzType=='line'">
        <div class="ant-progress-outer"><!----><div class="ant-progress-inner"><!----><div class="ant-progress-bg" [style.width.%]="_percent" [style.height.px]="nzStrokeWidth"></div><!----></div><!----></div><!----><span class="ant-progress-text" *ngIf="nzShowInfo"><ng-template [ngIf]="(nzStatus=='active')||(nzStatus=='normal')||(_hasFormat)">{{ _format(_percent) }}</ng-template><ng-template [ngIf]="(nzStatus=='exception')||(nzStatus=='success')&&(!_hasFormat)"><i class="anticon" [ngClass]="{'anticon-check-circle':nzStatus=='success','anticon-cross-circle':nzStatus=='exception'}"></i></ng-template></span>
      </div>
      <div class="ant-progress-inner" *ngIf="nzType=='circle'" [ngStyle]="_circleStyle">
        <svg class="rc-progress-circle " viewBox="0 0 100 100" *ngIf="nzType=='circle'">
          <path class="rc-progress-circle-trail" [attr.d]="_pathString" stroke="#f3f3f3" [attr.stroke-width]="nzStrokeWidth" fill-opacity="0"></path>
          <path class="rc-progress-circle-path" [attr.d]="_pathString" stroke-linecap="round" [attr.stroke]="_statusColorMap[nzStatus]" stroke-width="6" fill-opacity="0" [ngStyle]="_pathStyle"></path>
        </svg>
        <span class="ant-progress-text" *ngIf="nzShowInfo"><ng-template [ngIf]="(nzStatus=='active')||(nzStatus=='normal')||(_hasFormat)">{{ _format(_percent) }}</ng-template><ng-template [ngIf]="(nzStatus=='exception')||(nzStatus=='success')&&!(_hasFormat)"><i class="anticon" [ngClass]="{'anticon-check':nzStatus=='success','anticon-cross':nzStatus=='exception'}"></i></ng-template></span>
      </div>
    </div>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzProgressComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-progress {
  display: inline-block;
}
.ant-progress-line {
  width: 100%;
  font-size: 12px;
  position: relative;
}
.ant-progress-outer {
  display: inline-block;
  width: 100%;
  margin-right: 0;
  padding-right: 0;
}
.ant-progress-show-info .ant-progress-outer {
  padding-right: 2.75em;
  margin-right: -2.75em;
}
.ant-progress-inner {
  display: inline-block;
  width: 100%;
  background-color: #f7f7f7;
  border-radius: 100px;
  vertical-align: middle;
}
.ant-progress-circle-trail {
  stroke: #f7f7f7;
}
.ant-progress-circle-path {
  stroke: #108ee9;
  animation: ant-progress-appear 0.3s;
}
.ant-progress-bg {
  border-radius: 100px;
  background-color: #108ee9;
  transition: all 0.4s cubic-bezier(0.08, 0.82, 0.17, 1) 0s;
  position: relative;
}
.ant-progress-text {
  word-break: normal;
  width: 2em;
  text-align: left;
  font-size: 1em;
  margin-left: 0.75em;
  vertical-align: middle;
  display: inline-block;
}
.ant-progress-text .anticon {
  font-size: 12px;
}
.ant-progress-status-active .ant-progress-bg:before {
  content: "";
  opacity: 0;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: #fff;
  border-radius: 10px;
  animation: ant-progress-active 2.4s cubic-bezier(0.23, 1, 0.32, 1) infinite;
}
.ant-progress-status-exception .ant-progress-bg {
  background-color: #f04134;
}
.ant-progress-status-exception .ant-progress-text {
  color: #f04134;
}
.ant-progress-status-exception .ant-progress-circle-path {
  stroke: #f04134;
}
.ant-progress-status-success .ant-progress-bg {
  background-color: #00a854;
}
.ant-progress-status-success .ant-progress-text {
  color: #00a854;
}
.ant-progress-status-success .ant-progress-circle-path {
  stroke: #00a854;
}
.ant-progress-circle .ant-progress-inner {
  position: relative;
  line-height: 1;
  background-color: transparent;
}
.ant-progress-circle .ant-progress-text {
  display: block;
  position: absolute;
  width: 100%;
  text-align: center;
  line-height: 1;
  top: 50%;
  transform: translateY(-50%);
  left: 0;
  font-family: tahoma;
  margin: 0;
}
.ant-progress-circle .ant-progress-text .anticon {
  font-size: 1.16666667em;
}
.ant-progress-circle .ant-progress-status-exception .ant-progress-text {
  color: #f04134;
}
.ant-progress-circle .ant-progress-status-success .ant-progress-text {
  color: #00a854;
}
@keyframes ant-progress-appear {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes ant-progress-active {
  0% {
    opacity: 0.1;
    width: 0;
  }
  20% {
    opacity: 0.5;
    width: 0;
  }
  100% {
    opacity: 0;
    width: 100%;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzProgressComponent.ctorParameters = () => [];
NzProgressComponent.propDecorators = {
    "nzType": [{ type: Input },],
    "nzStrokeWidth": [{ type: Input },],
    "nzWidth": [{ type: Input },],
    "nzShowInfo": [{ type: Input },],
    "nzStatus": [{ type: Input },],
    "_setFormat": [{ type: Input, args: ['nzFormat',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzProgressModule {
}
NzProgressModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzProgressComponent],
                declarations: [NzProgressComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzProgressModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRateComponent {
    constructor() {
        this._hasHalf = false;
        this._allowHalf = false;
        this._disabled = false;
        this._prefixCls = 'ant-rate';
        this._innerPrefixCls = `${this._prefixCls}-star`;
        this._starArray = [];
        this._count = 5;
        this._value = 0;
        this._hoverValue = 0;
        // TODO: What's this for? It will match all number values
        this._floatReg = /^\d+(\.\d+)?$/;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCount(value) {
        this._count = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAllowHalf(value) {
        this._allowHalf = toBoolean(value);
    }
    /**
     * @param {?} input
     * @return {?}
     */
    set nzDefaultValue(input) {
        let /** @type {?} */ value = input;
        this._value = value;
        if (this._floatReg.test(value.toString())) {
            value += 0.5;
            this._hasHalf = true;
        }
        this._hoverValue = value;
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} input
     * @return {?}
     */
    set nzValue(input) {
        let /** @type {?} */ value = input;
        if (this._value === value) {
            return;
        }
        this._value = value;
        if (this._floatReg.test(value.toString())) {
            value += 0.5;
            this._hasHalf = true;
        }
        this._hoverValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-disabled`]: this._disabled
        };
    }
    /**
     * @return {?}
     */
    setChildrenClassMap() {
        let /** @type {?} */ index = 0;
        while (index < this._count) {
            this._starArray.push(index++);
        }
    }
    /**
     * @param {?} e
     * @param {?} index
     * @param {?} isFull
     * @return {?}
     */
    _clickRate(e, index, isFull) {
        e.stopPropagation();
        if (this._disabled) {
            return;
        }
        this._hoverValue = this._value = index + 1;
        this._hasHalf = !isFull && this._allowHalf;
        if (this._hasHalf) {
            this._value -= 0.5;
        }
        this.onChange(this._value);
    }
    /**
     * @param {?} e
     * @param {?} index
     * @param {?} isFull
     * @return {?}
     */
    _hoverRate(e, index, isFull) {
        e.stopPropagation();
        if (this._disabled) {
            return;
        }
        const /** @type {?} */ isHalf = !isFull && this._allowHalf;
        // 如果星数一致，则不作操作，用于提高性能
        if (this._hoverValue === index + 1 && isHalf === this._hasHalf) {
            return;
        }
        this._hoverValue = index + 1;
        this._hasHalf = isHalf;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _leaveRate(e) {
        e.stopPropagation();
        let /** @type {?} */ oldVal = this._value;
        if (this._floatReg.test(oldVal.toString())) {
            oldVal += 0.5;
            this._hasHalf = true;
        }
        this._hoverValue = oldVal;
    }
    /**
     * @param {?} i
     * @return {?}
     */
    setClasses(i) {
        return {
            [this._innerPrefixCls]: true,
            [`${this._innerPrefixCls}-full`]: (i + 1 < this._hoverValue) || (!this._hasHalf) && (i + 1 === this._hoverValue),
            [`${this._innerPrefixCls}-half`]: (this._hasHalf) && (i + 1 === this._hoverValue),
            [`${this._innerPrefixCls}-active`]: (this._hasHalf) && (i + 1 === this._hoverValue),
            [`${this._innerPrefixCls}-zero`]: (i + 1 > this._hoverValue)
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.nzValue = value || 0;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
        this.setChildrenClassMap();
    }
}
NzRateComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-rate',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ul [ngClass]="_classMap" (mouseleave)="_leaveRate($event)">
      <li *ngFor="let star of _starArray; let i = index"
        [ngClass]="setClasses(i)"
        (mouseover)="_hoverRate($event, i, true)"
        (click)="_clickRate($event, i, true)">
        <div class="ant-rate-star-first" (mouseover)="_hoverRate($event, i)" (click)="_clickRate($event, i)">
          <i class="anticon anticon-star"></i></div>
        <div class="ant-rate-star-second" (mouseover)="_hoverRate($event, i, true)" (click)="_clickRate($event, i, true)">
          <i class="anticon anticon-star"></i></div>
      </li>
    </ul>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzRateComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-rate {
  margin: 0;
  padding: 0;
  list-style: none;
  font-size: 20px;
  display: inline-block;
  vertical-align: middle;
  color: #f5a623;
}
.ant-rate-disabled .ant-rate-star {
  cursor: not-allowed;
}
.ant-rate-disabled .ant-rate-star:hover {
  transform: scale(1);
}
.ant-rate-star {
  margin: 0;
  padding: 0;
  display: inline-block;
  margin-right: 8px;
  position: relative;
  transition: all .3s;
  color: inherit;
  cursor: pointer;
}
.ant-rate-star-first,
.ant-rate-star-second {
  user-select: none;
  transition: all .3s;
  color: #e9e9e9;
}
.ant-rate-star:hover {
  transform: scale(1.1);
}
.ant-rate-star-first {
  position: absolute;
  left: 0;
  top: 0;
  width: 50%;
  height: 100%;
  overflow: hidden;
  opacity: 0;
}
.ant-rate-star-half .ant-rate-star-first,
.ant-rate-star-half .ant-rate-star-second {
  opacity: 1;
}
.ant-rate-star-half .ant-rate-star-first,
.ant-rate-star-full .ant-rate-star-second {
  color: inherit;
}
.ant-rate-text {
  margin-left: 8px;
  vertical-align: middle;
  display: inline-block;
  font-size: 12px;
}
`
                ]
            },] },
];
/** @nocollapse */
NzRateComponent.ctorParameters = () => [];
NzRateComponent.propDecorators = {
    "nzCount": [{ type: Input },],
    "nzAllowHalf": [{ type: Input },],
    "nzDefaultValue": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRateModule {
}
NzRateModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzRateComponent],
                declarations: [NzRateComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzRateModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

const NZ_ROOT_CONFIG = new InjectionToken('NzRootConfig');
/**
 * @param {?} document
 * @param {?=} options
 * @return {?}
 */
function createNzRootInitializer(document, options) {
    return function nzRootInitializer() {
        if (options) {
            const /** @type {?} */ style$$1 = document.createElement('style');
            style$$1.innerHTML = `
        @font-face {
          font-family: '${options.extraFontName}';
          src: url('${options.extraFontUrl}.eot'); /* IE9*/
          src:
            /* IE6-IE8 */
            url('${options.extraFontUrl}.eot?#iefix') format('embedded-opentype'),
            /* chrome、firefox */
            url('${options.extraFontUrl}.woff') format('woff'),
            /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/
            url('${options.extraFontUrl}.ttf') format('truetype'),
            /* iOS 4.1- */
            url('${options.extraFontUrl}.svg#iconfont') format('svg');
        }
      `;
            document.head.appendChild(style$$1);
        }
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRootStyleComponent {
}
NzRootStyleComponent.decorators = [
    { type: Component, args: [{
                template: ``,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}
/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0;
}
/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}
/**
 * Correct the font size and margin on 'h1' elements within 'section' and
 * 'article' contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}
/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 * 1. Add the correct display in IE.
 */
figcaption,
figure,
main {
  /* 1 */
  display: block;
}
/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px;
}
/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd 'em' font sizing in all browsers.
 */
pre {
  font-family: monospace, monospace;
  /* 1 */
  /* stylelint-disable-line */
  font-size: 1em;
  /* 2 */
}
/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}
/**
 * Prevent the duplicate application of 'bolder' by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit;
}
/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder;
}
/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd 'em' font sizing in all browsers.
 */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  /* stylelint-disable-line */
  font-size: 1em;
  /* 2 */
}
/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic;
}
/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000;
}
/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%;
}
/**
 * Prevent 'sub' and 'sup' elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
sub {
  bottom: -0.25em;
}
sup {
  top: -0.5em;
}
/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block;
}
/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}
/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none;
}
/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden;
}
/* Forms
   ========================================================================== */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}
/**
 * Show the overflow in IE.
 * 1. Show the overflow in Edge.
 */
button,
input {
  /* 1 */
  overflow: visible;
}
/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none;
}
/**
 * 1. Prevent a WebKit bug where (2) destroys native 'audio' and 'video'
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}
/**
 * Remove the inner border and padding in Firefox.
 */
button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}
/**
 * Restore the focus styles unset by the previous rule.
 */
button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}
/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em;
}
/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from 'fieldset' elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    'fieldset' elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  color: inherit;
  /* 2 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  white-space: normal;
  /* 1 */
}
/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}
/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto;
}
/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}
/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
}
/**
 * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
 */
[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to 'inherit' in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}
/* Interactive
   ========================================================================== */
/*
 * Add the correct display in IE 9-.
 * 1. Add the correct display in Edge, IE, and Firefox.
 */
details,
menu {
  display: block;
}
/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item;
}
/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block;
}
/**
 * Add the correct display in IE.
 */
template {
  display: none;
}
/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none;
}
@font-face {
  font-family: "Helvetica Neue For Number";
  src: local("Helvetica Neue");
  unicode-range: U+30-39;
}
* {
  box-sizing: border-box;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}
*:before,
*:after {
  box-sizing: border-box;
}
html,
body {
  width: 100%;
  height: 100%;
}
body {
  font-family: "Helvetica Neue For Number", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", Helvetica, Arial, sans-serif;
  font-size: 12px;
  line-height: 1.5;
  color: rgba(0, 0, 0, 0.65);
  background-color: #fff;
}
body,
div,
dl,
dt,
dd,
ul,
ol,
li,
h1,
h2,
h3,
h4,
h5,
h6,
pre,
code,
form,
fieldset,
legend,
input,
textarea,
p,
blockquote,
th,
td,
hr,
button,
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
menu,
nav,
section {
  margin: 0;
  padding: 0;
}
button,
input,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
  color: inherit;
}
input[type="text"],
textarea {
  -webkit-appearance: none;
}
ul,
ol {
  list-style: none;
}
input::-ms-clear,
input::-ms-reveal {
  display: none;
}
::selection {
  background: #108ee9;
  color: #fff;
}
h1,
h2,
h3,
h4,
h5,
h6 {
  color: rgba(0, 0, 0, 0.85);
  font-weight: 500;
}
a {
  color: #108ee9;
  background: transparent;
  text-decoration: none;
  outline: none;
  cursor: pointer;
  transition: color .3s ease;
}
a:focus {
  text-decoration: underline;
  text-decoration-skip: ink;
}
a:hover {
  color: #49a9ee;
}
a:active {
  color: #0e77ca;
}
a:active,
a:hover {
  outline: 0;
  text-decoration: none;
}
a[disabled] {
  color: rgba(0, 0, 0, 0.25);
  cursor: not-allowed;
  pointer-events: none;
}
.ant-divider {
  margin: 0 6px;
  display: inline-block;
  height: 8px;
  width: 1px;
  background: #ccc;
}
code,
kbd,
pre,
samp {
  font-family: Consolas, Menlo, Courier, monospace;
}
.clearfix {
  zoom: 1;
}
.clearfix:before,
.clearfix:after {
  content: " ";
  display: table;
}
.clearfix:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
@font-face {
  font-family: 'anticon';
  src: url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.eot');
  /* IE9*/
  src: url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.eot?#iefix') format('embedded-opentype'), /* chrome、firefox */ url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.woff') format('woff'), /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/ url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.ttf') format('truetype'), /* iOS 4.1- */ url('https://at.alicdn.com/t/font_zck90zmlh7hf47vi.svg#iconfont') format('svg');
}
.anticon {
  display: inline-block;
  font-style: normal;
  vertical-align: baseline;
  text-align: center;
  text-transform: none;
  line-height: 1;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
.anticon:before {
  display: block;
  font-family: "anticon" !important;
}
.anticon-step-forward:before {
  content: "\\e600";
}
.anticon-step-backward:before {
  content: "\\e601";
}
.anticon-forward:before {
  content: "\\e602";
}
.anticon-backward:before {
  content: "\\e603";
}
.anticon-caret-right:before {
  content: "\\e604";
}
.anticon-caret-left:before {
  content: "\\e605";
}
.anticon-caret-down:before {
  content: "\\e606";
}
.anticon-caret-up:before {
  content: "\\e607";
}
.anticon-right-circle:before {
  content: "\\e608";
}
.anticon-circle-right:before {
  content: "\\e608";
}
.anticon-caret-circle-right:before {
  content: "\\e608";
}
.anticon-left-circle:before {
  content: "\\e609";
}
.anticon-circle-left:before {
  content: "\\e609";
}
.anticon-caret-circle-left:before {
  content: "\\e609";
}
.anticon-up-circle:before {
  content: "\\e60a";
}
.anticon-circle-up:before {
  content: "\\e60a";
}
.anticon-caret-circle-up:before {
  content: "\\e60a";
}
.anticon-down-circle:before {
  content: "\\e60b";
}
.anticon-circle-down:before {
  content: "\\e60b";
}
.anticon-caret-circle-down:before {
  content: "\\e60b";
}
.anticon-right-circle-o:before {
  content: "\\e60c";
}
.anticon-circle-o-right:before {
  content: "\\e60c";
}
.anticon-caret-circle-o-right:before {
  content: "\\e60c";
}
.anticon-left-circle-o:before {
  content: "\\e60d";
}
.anticon-circle-o-left:before {
  content: "\\e60d";
}
.anticon-caret-circle-o-left:before {
  content: "\\e60d";
}
.anticon-up-circle-o:before {
  content: "\\e60e";
}
.anticon-circle-o-up:before {
  content: "\\e60e";
}
.anticon-caret-circle-o-up:before {
  content: "\\e60e";
}
.anticon-down-circle-o:before {
  content: "\\e60f";
}
.anticon-circle-o-down:before {
  content: "\\e60f";
}
.anticon-caret-circle-o-down:before {
  content: "\\e60f";
}
.anticon-verticle-left:before {
  content: "\\e610";
}
.anticon-verticle-right:before {
  content: "\\e611";
}
.anticon-rollback:before {
  content: "\\e612";
}
.anticon-retweet:before {
  content: "\\e613";
}
.anticon-shrink:before {
  content: "\\e614";
}
.anticon-arrows-alt:before {
  content: "\\e615";
}
.anticon-arrow-salt:before {
  content: "\\e615";
}
.anticon-reload:before {
  content: "\\e616";
}
.anticon-double-right:before {
  content: "\\e617";
}
.anticon-double-left:before {
  content: "\\e618";
}
.anticon-arrow-down:before {
  content: "\\e619";
}
.anticon-arrow-up:before {
  content: "\\e61a";
}
.anticon-arrow-right:before {
  content: "\\e61b";
}
.anticon-arrow-left:before {
  content: "\\e61c";
}
.anticon-down:before {
  content: "\\e61d";
}
.anticon-up:before {
  content: "\\e61e";
}
.anticon-right:before {
  content: "\\e61f";
}
.anticon-left:before {
  content: "\\e620";
}
.anticon-minus-square-o:before {
  content: "\\e621";
}
.anticon-minus-circle:before {
  content: "\\e622";
}
.anticon-minus-circle-o:before {
  content: "\\e623";
}
.anticon-minus:before {
  content: "\\e624";
}
.anticon-plus-circle-o:before {
  content: "\\e625";
}
.anticon-plus-circle:before {
  content: "\\e626";
}
.anticon-plus:before {
  content: "\\e627";
}
.anticon-info-circle:before {
  content: "\\e628";
}
.anticon-info-circle-o:before {
  content: "\\e629";
}
.anticon-info:before {
  content: "\\e62a";
}
.anticon-exclamation:before {
  content: "\\e62b";
}
.anticon-exclamation-circle:before {
  content: "\\e62c";
}
.anticon-exclamation-circle-o:before {
  content: "\\e62d";
}
.anticon-close-circle:before {
  content: "\\e62e";
}
.anticon-cross-circle:before {
  content: "\\e62e";
}
.anticon-close-circle-o:before {
  content: "\\e62f";
}
.anticon-cross-circle-o:before {
  content: "\\e62f";
}
.anticon-check-circle:before {
  content: "\\e630";
}
.anticon-check-circle-o:before {
  content: "\\e631";
}
.anticon-check:before {
  content: "\\e632";
}
.anticon-close:before {
  content: "\\e633";
}
.anticon-cross:before {
  content: "\\e633";
}
.anticon-customer-service:before {
  content: "\\e634";
}
.anticon-customerservice:before {
  content: "\\e634";
}
.anticon-credit-card:before {
  content: "\\e635";
}
.anticon-code-o:before {
  content: "\\e636";
}
.anticon-book:before {
  content: "\\e637";
}
.anticon-bar-chart:before {
  content: "\\e638";
}
.anticon-bars:before {
  content: "\\e639";
}
.anticon-question:before {
  content: "\\e63a";
}
.anticon-question-circle:before {
  content: "\\e63b";
}
.anticon-question-circle-o:before {
  content: "\\e63c";
}
.anticon-pause:before {
  content: "\\e63d";
}
.anticon-pause-circle:before {
  content: "\\e63e";
}
.anticon-pause-circle-o:before {
  content: "\\e63f";
}
.anticon-clock-circle:before {
  content: "\\e640";
}
.anticon-clock-circle-o:before {
  content: "\\e641";
}
.anticon-swap:before {
  content: "\\e642";
}
.anticon-swap-left:before {
  content: "\\e643";
}
.anticon-swap-right:before {
  content: "\\e644";
}
.anticon-plus-square-o:before {
  content: "\\e645";
}
.anticon-frown:before {
  content: "\\e646";
}
.anticon-frown-circle:before {
  content: "\\e646";
}
.anticon-ellipsis:before {
  content: "\\e647";
}
.anticon-copy:before {
  content: "\\e648";
}
.anticon-menu-fold:before {
  content: "\\e658";
}
.anticon-mail:before {
  content: "\\e659";
}
.anticon-logout:before {
  content: "\\e65a";
}
.anticon-link:before {
  content: "\\e65b";
}
.anticon-area-chart:before {
  content: "\\e65c";
}
.anticon-line-chart:before {
  content: "\\e65d";
}
.anticon-home:before {
  content: "\\e65e";
}
.anticon-laptop:before {
  content: "\\e65f";
}
.anticon-star:before {
  content: "\\e660";
}
.anticon-star-o:before {
  content: "\\e661";
}
.anticon-folder:before {
  content: "\\e662";
}
.anticon-filter:before {
  content: "\\e663";
}
.anticon-file:before {
  content: "\\e664";
}
.anticon-exception:before {
  content: "\\e665";
}
.anticon-meh:before {
  content: "\\e666";
}
.anticon-meh-circle:before {
  content: "\\e666";
}
.anticon-meh-o:before {
  content: "\\e667";
}
.anticon-shopping-cart:before {
  content: "\\e668";
}
.anticon-save:before {
  content: "\\e669";
}
.anticon-user:before {
  content: "\\e66a";
}
.anticon-video-camera:before {
  content: "\\e66b";
}
.anticon-to-top:before {
  content: "\\e66c";
}
.anticon-team:before {
  content: "\\e66d";
}
.anticon-tablet:before {
  content: "\\e66e";
}
.anticon-solution:before {
  content: "\\e66f";
}
.anticon-search:before {
  content: "\\e670";
}
.anticon-share-alt:before {
  content: "\\e671";
}
.anticon-setting:before {
  content: "\\e672";
}
.anticon-poweroff:before {
  content: "\\e6d5";
}
.anticon-picture:before {
  content: "\\e674";
}
.anticon-phone:before {
  content: "\\e675";
}
.anticon-paper-clip:before {
  content: "\\e676";
}
.anticon-notification:before {
  content: "\\e677";
}
.anticon-mobile:before {
  content: "\\e678";
}
.anticon-menu-unfold:before {
  content: "\\e679";
}
.anticon-inbox:before {
  content: "\\e67a";
}
.anticon-lock:before {
  content: "\\e67b";
}
.anticon-qrcode:before {
  content: "\\e67c";
}
.anticon-play-circle:before {
  content: "\\e6d0";
}
.anticon-play-circle-o:before {
  content: "\\e6d1";
}
.anticon-tag:before {
  content: "\\e6d2";
}
.anticon-tag-o:before {
  content: "\\e6d3";
}
.anticon-tags:before {
  content: "\\e67d";
}
.anticon-tags-o:before {
  content: "\\e67e";
}
.anticon-cloud-o:before {
  content: "\\e67f";
}
.anticon-cloud:before {
  content: "\\e680";
}
.anticon-cloud-upload:before {
  content: "\\e681";
}
.anticon-cloud-download:before {
  content: "\\e682";
}
.anticon-cloud-download-o:before {
  content: "\\e683";
}
.anticon-cloud-upload-o:before {
  content: "\\e684";
}
.anticon-environment:before {
  content: "\\e685";
}
.anticon-environment-o:before {
  content: "\\e686";
}
.anticon-eye:before {
  content: "\\e687";
}
.anticon-eye-o:before {
  content: "\\e688";
}
.anticon-camera:before {
  content: "\\e689";
}
.anticon-camera-o:before {
  content: "\\e68a";
}
.anticon-windows:before {
  content: "\\e68b";
}
.anticon-apple:before {
  content: "\\e68c";
}
.anticon-apple-o:before {
  content: "\\e6d4";
}
.anticon-android:before {
  content: "\\e938";
}
.anticon-android-o:before {
  content: "\\e68d";
}
.anticon-aliwangwang:before {
  content: "\\e68e";
}
.anticon-aliwangwang-o:before {
  content: "\\e68f";
}
.anticon-export:before {
  content: "\\e691";
}
.anticon-edit:before {
  content: "\\e692";
}
.anticon-circle-down-o:before {
  content: "\\e693";
}
.anticon-circle-down-:before {
  content: "\\e694";
}
.anticon-appstore-o:before {
  content: "\\e695";
}
.anticon-appstore:before {
  content: "\\e696";
}
.anticon-scan:before {
  content: "\\e697";
}
.anticon-file-text:before {
  content: "\\e698";
}
.anticon-folder-open:before {
  content: "\\e699";
}
.anticon-hdd:before {
  content: "\\e69a";
}
.anticon-ie:before {
  content: "\\e69b";
}
.anticon-file-jpg:before {
  content: "\\e69c";
}
.anticon-like:before {
  content: "\\e64c";
}
.anticon-like-o:before {
  content: "\\e69d";
}
.anticon-dislike:before {
  content: "\\e64b";
}
.anticon-dislike-o:before {
  content: "\\e69e";
}
.anticon-delete:before {
  content: "\\e69f";
}
.anticon-enter:before {
  content: "\\e6a0";
}
.anticon-pushpin-o:before {
  content: "\\e6a1";
}
.anticon-pushpin:before {
  content: "\\e6a2";
}
.anticon-heart:before {
  content: "\\e6a3";
}
.anticon-heart-o:before {
  content: "\\e6a4";
}
.anticon-pay-circle:before {
  content: "\\e6a5";
}
.anticon-pay-circle-o:before {
  content: "\\e6a6";
}
.anticon-smile:before {
  content: "\\e6a7";
}
.anticon-smile-circle:before {
  content: "\\e6a7";
}
.anticon-smile-o:before {
  content: "\\e6a8";
}
.anticon-frown-o:before {
  content: "\\e6a9";
}
.anticon-calculator:before {
  content: "\\e6aa";
}
.anticon-message:before {
  content: "\\e6ab";
}
.anticon-chrome:before {
  content: "\\e6ac";
}
.anticon-github:before {
  content: "\\e6ad";
}
.anticon-file-unknown:before {
  content: "\\e6af";
}
.anticon-file-excel:before {
  content: "\\e6b0";
}
.anticon-file-ppt:before {
  content: "\\e6b1";
}
.anticon-file-word:before {
  content: "\\e6b2";
}
.anticon-file-pdf:before {
  content: "\\e6b3";
}
.anticon-desktop:before {
  content: "\\e6b4";
}
.anticon-upload:before {
  content: "\\e6b6";
}
.anticon-download:before {
  content: "\\e6b7";
}
.anticon-pie-chart:before {
  content: "\\e6b8";
}
.anticon-unlock:before {
  content: "\\e6ba";
}
.anticon-calendar:before {
  content: "\\e6bb";
}
.anticon-windows-o:before {
  content: "\\e6bc";
}
.anticon-dot-chart:before {
  content: "\\e6bd";
}
.anticon-bar-chart:before {
  content: "\\e6be";
}
.anticon-code:before {
  content: "\\e6bf";
}
.anticon-api:before {
  content: "\\e951";
}
.anticon-plus-square:before {
  content: "\\e6c0";
}
.anticon-minus-square:before {
  content: "\\e6c1";
}
.anticon-close-square:before {
  content: "\\e6c2";
}
.anticon-close-square-o:before {
  content: "\\e6c3";
}
.anticon-check-square:before {
  content: "\\e6c4";
}
.anticon-check-square-o:before {
  content: "\\e6c5";
}
.anticon-fast-backward:before {
  content: "\\e6c6";
}
.anticon-fast-forward:before {
  content: "\\e6c7";
}
.anticon-up-square:before {
  content: "\\e6c8";
}
.anticon-down-square:before {
  content: "\\e6c9";
}
.anticon-left-square:before {
  content: "\\e6ca";
}
.anticon-right-square:before {
  content: "\\e6cb";
}
.anticon-right-square-o:before {
  content: "\\e6cc";
}
.anticon-left-square-o:before {
  content: "\\e6cd";
}
.anticon-down-square-o:before {
  content: "\\e6ce";
}
.anticon-up-square-o:before {
  content: "\\e6cf";
}
.anticon-loading:before {
  content: "\\e64d";
}
.anticon-loading-3-quarters:before {
  content: "\\e6ae";
}
.anticon-bulb:before {
  content: "\\e649";
}
.anticon-select:before {
  content: "\\e64a";
}
.anticon-addfile:before,
.anticon-file-add:before {
  content: "\\e910";
}
.anticon-addfolder:before,
.anticon-folder-add:before {
  content: "\\e914";
}
.anticon-switcher:before {
  content: "\\e913";
}
.anticon-rocket:before {
  content: "\\e90f";
}
.anticon-dingding:before {
  content: "\\e923";
}
.anticon-dingding-o:before {
  content: "\\e925";
}
.anticon-bell:before {
  content: "\\e64e";
}
.anticon-disconnect:before {
  content: "\\e64f";
}
.anticon-database:before {
  content: "\\e650";
}
.anticon-compass:before {
  content: "\\e6db";
}
.anticon-barcode:before {
  content: "\\e652";
}
.anticon-hourglass:before {
  content: "\\e653";
}
.anticon-key:before {
  content: "\\e654";
}
.anticon-flag:before {
  content: "\\e655";
}
.anticon-layout:before {
  content: "\\e656";
}
.anticon-login:before {
  content: "\\e657";
}
.anticon-printer:before {
  content: "\\e673";
}
.anticon-sound:before {
  content: "\\e6e9";
}
.anticon-usb:before {
  content: "\\e6d7";
}
.anticon-skin:before {
  content: "\\e6d8";
}
.anticon-tool:before {
  content: "\\e6d9";
}
.anticon-sync:before {
  content: "\\e6da";
}
.anticon-wifi:before {
  content: "\\e6d6";
}
.anticon-car:before {
  content: "\\e6dc";
}
.anticon-copyright:before {
  content: "\\e6de";
}
.anticon-schedule:before {
  content: "\\e6df";
}
.anticon-user-add:before {
  content: "\\e6ed";
}
.anticon-user-delete:before {
  content: "\\e6e0";
}
.anticon-usergroup-add:before {
  content: "\\e6dd";
}
.anticon-usergroup-delete:before {
  content: "\\e6e1";
}
.anticon-man:before {
  content: "\\e6e2";
}
.anticon-woman:before {
  content: "\\e6ec";
}
.anticon-shop:before {
  content: "\\e6e3";
}
.anticon-gift:before {
  content: "\\e6e4";
}
.anticon-idcard:before {
  content: "\\e6e5";
}
.anticon-medicine-box:before {
  content: "\\e6e6";
}
.anticon-red-envelope:before {
  content: "\\e6e7";
}
.anticon-coffee:before {
  content: "\\e6e8";
}
.anticon-trademark:before {
  content: "\\e651";
}
.anticon-safety:before {
  content: "\\e6ea";
}
.anticon-wallet:before {
  content: "\\e6eb";
}
.anticon-bank:before {
  content: "\\e6ee";
}
.anticon-trophy:before {
  content: "\\e6ef";
}
.anticon-contacts:before {
  content: "\\e6f0";
}
.anticon-global:before {
  content: "\\e6f1";
}
.anticon-shake:before {
  content: "\\e94f";
}
.anticon-fork:before {
  content: "\\e6f2";
}
.anticon-spin:before {
  display: inline-block;
  animation: loadingCircle 1s infinite linear;
}
.fade-enter,
.fade-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.fade-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.fade-enter.fade-enter-active,
.fade-appear.fade-appear-active {
  animation-name: antFadeIn;
  animation-play-state: running;
}
.fade-leave.fade-leave-active {
  animation-name: antFadeOut;
  animation-play-state: running;
  pointer-events: none;
}
.fade-enter,
.fade-appear {
  opacity: 0;
  animation-timing-function: linear;
}
.fade-leave {
  animation-timing-function: linear;
}
@keyframes antFadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}
@keyframes antFadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}
.move-up-enter,
.move-up-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-up-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-up-enter.move-up-enter-active,
.move-up-appear.move-up-appear-active {
  animation-name: antMoveUpIn;
  animation-play-state: running;
}
.move-up-leave.move-up-leave-active {
  animation-name: antMoveUpOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-up-enter,
.move-up-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-up-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
.move-down-enter,
.move-down-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-down-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-down-enter.move-down-enter-active,
.move-down-appear.move-down-appear-active {
  animation-name: antMoveDownIn;
  animation-play-state: running;
}
.move-down-leave.move-down-leave-active {
  animation-name: antMoveDownOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-down-enter,
.move-down-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-down-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
.move-left-enter,
.move-left-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-left-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-left-enter.move-left-enter-active,
.move-left-appear.move-left-appear-active {
  animation-name: antMoveLeftIn;
  animation-play-state: running;
}
.move-left-leave.move-left-leave-active {
  animation-name: antMoveLeftOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-left-enter,
.move-left-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-left-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
.move-right-enter,
.move-right-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-right-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.move-right-enter.move-right-enter-active,
.move-right-appear.move-right-appear-active {
  animation-name: antMoveRightIn;
  animation-play-state: running;
}
.move-right-leave.move-right-leave-active {
  animation-name: antMoveRightOut;
  animation-play-state: running;
  pointer-events: none;
}
.move-right-enter,
.move-right-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.move-right-leave {
  animation-timing-function: cubic-bezier(0.6, 0.04, 0.98, 0.34);
}
@keyframes antMoveDownIn {
  0% {
    transform-origin: 0 0;
    transform: translateY(100%);
    opacity: 0;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
}
@keyframes antMoveDownOut {
  0% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(100%);
    opacity: 0;
  }
}
@keyframes antMoveLeftIn {
  0% {
    transform-origin: 0 0;
    transform: translateX(-100%);
    opacity: 0;
  }
  100% {
    transform-origin: 0 0;
    transform: translateX(0%);
    opacity: 1;
  }
}
@keyframes antMoveLeftOut {
  0% {
    transform-origin: 0 0;
    transform: translateX(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateX(-100%);
    opacity: 0;
  }
}
@keyframes antMoveRightIn {
  0% {
    opacity: 0;
    transform-origin: 0 0;
    transform: translateX(100%);
  }
  100% {
    opacity: 1;
    transform-origin: 0 0;
    transform: translateX(0%);
  }
}
@keyframes antMoveRightOut {
  0% {
    transform-origin: 0 0;
    transform: translateX(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateX(100%);
    opacity: 0;
  }
}
@keyframes antMoveUpIn {
  0% {
    transform-origin: 0 0;
    transform: translateY(-100%);
    opacity: 0;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
}
@keyframes antMoveUpOut {
  0% {
    transform-origin: 0 0;
    transform: translateY(0%);
    opacity: 1;
  }
  100% {
    transform-origin: 0 0;
    transform: translateY(-100%);
    opacity: 0;
  }
}
@keyframes loadingCircle {
  0% {
    transform-origin: 50% 50%;
    transform: rotate(0deg);
  }
  100% {
    transform-origin: 50% 50%;
    transform: rotate(360deg);
  }
}
.slide-up-enter,
.slide-up-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-up-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-up-enter.slide-up-enter-active,
.slide-up-appear.slide-up-appear-active {
  animation-name: antSlideUpIn;
  animation-play-state: running;
}
.slide-up-leave.slide-up-leave-active {
  animation-name: antSlideUpOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-up-enter,
.slide-up-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-up-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
.slide-down-enter,
.slide-down-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-down-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-down-enter.slide-down-enter-active,
.slide-down-appear.slide-down-appear-active {
  animation-name: antSlideDownIn;
  animation-play-state: running;
}
.slide-down-leave.slide-down-leave-active {
  animation-name: antSlideDownOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-down-enter,
.slide-down-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-down-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
.slide-left-enter,
.slide-left-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-left-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-left-enter.slide-left-enter-active,
.slide-left-appear.slide-left-appear-active {
  animation-name: antSlideLeftIn;
  animation-play-state: running;
}
.slide-left-leave.slide-left-leave-active {
  animation-name: antSlideLeftOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-left-enter,
.slide-left-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-left-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
.slide-right-enter,
.slide-right-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-right-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.slide-right-enter.slide-right-enter-active,
.slide-right-appear.slide-right-appear-active {
  animation-name: antSlideRightIn;
  animation-play-state: running;
}
.slide-right-leave.slide-right-leave-active {
  animation-name: antSlideRightOut;
  animation-play-state: running;
  pointer-events: none;
}
.slide-right-enter,
.slide-right-appear {
  opacity: 0;
  animation-timing-function: cubic-bezier(0.23, 1, 0.32, 1);
}
.slide-right-leave {
  animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
}
@keyframes antSlideUpIn {
  0% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
}
@keyframes antSlideUpOut {
  0% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleY(0.8);
  }
}
@keyframes antSlideDownIn {
  0% {
    opacity: 0;
    transform-origin: 100% 100%;
    transform: scaleY(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 100% 100%;
    transform: scaleY(1);
  }
}
@keyframes antSlideDownOut {
  0% {
    opacity: 1;
    transform-origin: 100% 100%;
    transform: scaleY(1);
  }
  100% {
    opacity: 0;
    transform-origin: 100% 100%;
    transform: scaleY(0.8);
  }
}
@keyframes antSlideLeftIn {
  0% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleX(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleX(1);
  }
}
@keyframes antSlideLeftOut {
  0% {
    opacity: 1;
    transform-origin: 0% 0%;
    transform: scaleX(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 0%;
    transform: scaleX(0.8);
  }
}
@keyframes antSlideRightIn {
  0% {
    opacity: 0;
    transform-origin: 100% 0%;
    transform: scaleX(0.8);
  }
  100% {
    opacity: 1;
    transform-origin: 100% 0%;
    transform: scaleX(1);
  }
}
@keyframes antSlideRightOut {
  0% {
    opacity: 1;
    transform-origin: 100% 0%;
    transform: scaleX(1);
  }
  100% {
    opacity: 0;
    transform-origin: 100% 0%;
    transform: scaleX(0.8);
  }
}
.swing-enter,
.swing-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.swing-enter.swing-enter-active,
.swing-appear.swing-appear-active {
  animation-name: antSwingIn;
  animation-play-state: running;
}
@keyframes antSwingIn {
  0%,
  100% {
    transform: translateX(0);
  }
  20% {
    transform: translateX(-10px);
  }
  40% {
    transform: translateX(10px);
  }
  60% {
    transform: translateX(-5px);
  }
  80% {
    transform: translateX(5px);
  }
}
.zoom-enter,
.zoom-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-enter.zoom-enter-active,
.zoom-appear.zoom-appear-active {
  animation-name: antZoomIn;
  animation-play-state: running;
}
.zoom-leave.zoom-leave-active {
  animation-name: antZoomOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-enter,
.zoom-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-big-enter,
.zoom-big-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-enter.zoom-big-enter-active,
.zoom-big-appear.zoom-big-appear-active {
  animation-name: antZoomBigIn;
  animation-play-state: running;
}
.zoom-big-leave.zoom-big-leave-active {
  animation-name: antZoomBigOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-big-enter,
.zoom-big-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-big-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-big-fast-enter,
.zoom-big-fast-appear {
  animation-duration: 0.1s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-fast-leave {
  animation-duration: 0.1s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-big-fast-enter.zoom-big-fast-enter-active,
.zoom-big-fast-appear.zoom-big-fast-appear-active {
  animation-name: antZoomBigIn;
  animation-play-state: running;
}
.zoom-big-fast-leave.zoom-big-fast-leave-active {
  animation-name: antZoomBigOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-big-fast-enter,
.zoom-big-fast-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-big-fast-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-up-enter,
.zoom-up-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-up-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-up-enter.zoom-up-enter-active,
.zoom-up-appear.zoom-up-appear-active {
  animation-name: antZoomUpIn;
  animation-play-state: running;
}
.zoom-up-leave.zoom-up-leave-active {
  animation-name: antZoomUpOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-up-enter,
.zoom-up-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-up-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-down-enter,
.zoom-down-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-down-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-down-enter.zoom-down-enter-active,
.zoom-down-appear.zoom-down-appear-active {
  animation-name: antZoomDownIn;
  animation-play-state: running;
}
.zoom-down-leave.zoom-down-leave-active {
  animation-name: antZoomDownOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-down-enter,
.zoom-down-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-down-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-left-enter,
.zoom-left-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-left-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-left-enter.zoom-left-enter-active,
.zoom-left-appear.zoom-left-appear-active {
  animation-name: antZoomLeftIn;
  animation-play-state: running;
}
.zoom-left-leave.zoom-left-leave-active {
  animation-name: antZoomLeftOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-left-enter,
.zoom-left-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-left-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.zoom-right-enter,
.zoom-right-appear {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-right-leave {
  animation-duration: 0.2s;
  animation-fill-mode: both;
  animation-play-state: paused;
}
.zoom-right-enter.zoom-right-enter-active,
.zoom-right-appear.zoom-right-appear-active {
  animation-name: antZoomRightIn;
  animation-play-state: running;
}
.zoom-right-leave.zoom-right-leave-active {
  animation-name: antZoomRightOut;
  animation-play-state: running;
  pointer-events: none;
}
.zoom-right-enter,
.zoom-right-appear {
  transform: scale(0);
  animation-timing-function: cubic-bezier(0.08, 0.82, 0.17, 1);
}
.zoom-right-leave {
  animation-timing-function: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
@keyframes antZoomIn {
  0% {
    opacity: 0;
    transform: scale(0.2);
  }
  100% {
    opacity: 1;
    transform: scale(1);
  }
}
@keyframes antZoomOut {
  0% {
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.2);
  }
}
@keyframes antZoomBigIn {
  0% {
    opacity: 0;
    transform: scale(0.8);
  }
  100% {
    transform: scale(1);
  }
}
@keyframes antZoomBigOut {
  0% {
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform: scale(0.8);
  }
}
@keyframes antZoomUpIn {
  0% {
    opacity: 0;
    transform-origin: 50% 0%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 50% 0%;
    transform: scale(1);
  }
}
@keyframes antZoomUpOut {
  0% {
    transform-origin: 50% 0%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 50% 0%;
    transform: scale(0.8);
  }
}
@keyframes antZoomLeftIn {
  0% {
    opacity: 0;
    transform-origin: 0% 50%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 0% 50%;
    transform: scale(1);
  }
}
@keyframes antZoomLeftOut {
  0% {
    transform-origin: 0% 50%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 0% 50%;
    transform: scale(0.8);
  }
}
@keyframes antZoomRightIn {
  0% {
    opacity: 0;
    transform-origin: 100% 50%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 100% 50%;
    transform: scale(1);
  }
}
@keyframes antZoomRightOut {
  0% {
    transform-origin: 100% 50%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 100% 50%;
    transform: scale(0.8);
  }
}
@keyframes antZoomDownIn {
  0% {
    opacity: 0;
    transform-origin: 50% 100%;
    transform: scale(0.8);
  }
  100% {
    transform-origin: 50% 100%;
    transform: scale(1);
  }
}
@keyframes antZoomDownOut {
  0% {
    transform-origin: 50% 100%;
    transform: scale(1);
  }
  100% {
    opacity: 0;
    transform-origin: 50% 100%;
    transform: scale(0.8);
  }
}
.ant-motion-collapse {
  overflow: hidden;
}
.ant-motion-collapse-active {
  transition: height 0.15s cubic-bezier(0.645, 0.045, 0.355, 1), opacity 0.15s cubic-bezier(0.645, 0.045, 0.355, 1) !important;
}
`,
                    `/**
 * Global styles for all components (WANT antd's global style? SEE at components/style)
 */
.cdk-overlay-container {
  pointer-events: none;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  position: fixed;
  z-index: 1000;
}
.cdk-overlay-backdrop {
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  -webkit-tap-highlight-color: transparent;
  transition: opacity 0.4s cubic-bezier(0.25, 0.8, 0.25, 1);
  opacity: 0;
  position: absolute;
  pointer-events: auto;
  z-index: 1000;
}
.cdk-overlay-pane {
  position: absolute;
  pointer-events: auto;
  z-index: 1000;
}
`,
                ],
                encapsulation: ViewEncapsulation.None,
            },] },
];
/** @nocollapse */
NzRootStyleComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRootComponent {
    /**
     * @param {?} _document
     * @param {?} options
     */
    constructor(_document, options) {
        this._document = _document;
        this.options = options;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.nzExtraFontName && this.nzExtraFontUrl && !this.options) {
            const /** @type {?} */ options = { extraFontName: this.nzExtraFontName, extraFontUrl: this.nzExtraFontUrl };
            const /** @type {?} */ initializer = createNzRootInitializer(this._document, options);
            initializer();
        }
    }
}
NzRootComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-root],nz-root',
                template: `
    <ng-content></ng-content>
  `,
            },] },
];
/** @nocollapse */
NzRootComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: undefined, decorators: [{ type: Inject, args: [NZ_ROOT_CONFIG,] }, { type: Optional },] },
];
NzRootComponent.propDecorators = {
    "nzExtraFontName": [{ type: Input },],
    "nzExtraFontUrl": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const ɵ0$2 = createNzRootInitializer;
class NzRootModule {
    /**
     * @param {?} _document
     * @param {?} injector
     * @param {?} resolver
     */
    constructor(_document, injector, resolver) {
        this._document = _document;
        const /** @type {?} */ componentFactory = resolver.resolveComponentFactory(NzRootStyleComponent);
        const /** @type {?} */ div = this._document.createElement('div');
        this.styleHostComponent = componentFactory.create(injector, null, div);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.styleHostComponent.destroy();
    }
}
NzRootModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzRootComponent],
                declarations: [NzRootComponent, NzRootStyleComponent],
                imports: [CommonModule],
                entryComponents: [NzRootStyleComponent],
                providers: [
                    { provide: APP_INITIALIZER, multi: true, useFactory: ɵ0$2, deps: [DOCUMENT, [new Optional(), NZ_ROOT_CONFIG]] },
                ],
            },] },
];
/** @nocollapse */
NzRootModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
    { type: Injector, },
    { type: ComponentFactoryResolver, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzToolTipModule {
}
NzToolTipModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzToolTipComponent, NzTooltipDirective],
                exports: [NzToolTipComponent, NzTooltipDirective],
                imports: [CommonModule, OverlayModule],
                entryComponents: [NzToolTipComponent]
            },] },
];
/** @nocollapse */
NzToolTipModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSliderMarksComponent {
    constructor() {
        this._vertical = false;
        this._included = false;
        // Dynamic properties
        this.nzLowerBound = null;
        this.nzUpperBound = null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVertical(value) {
        // Required
        this._vertical = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzVertical() {
        return this._vertical;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIncluded(value) {
        this._included = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIncluded() {
        return this._included;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["nzMarksArray"]) {
            this.buildAttrs();
        }
        if (changes["nzMarksArray"] || changes["nzLowerBound"] || changes["nzUpperBound"]) {
            this.togglePointActive();
        }
    }
    /**
     * @param {?} index
     * @param {?} attr
     * @return {?}
     */
    trackById(index, attr) {
        return attr.id;
    }
    /**
     * @return {?}
     */
    buildAttrs() {
        const /** @type {?} */ range = this.nzMax - this.nzMin;
        this.attrs = this.nzMarksArray.map(mark => {
            const { value, offset, config } = mark;
            // calc styles
            let /** @type {?} */ label = config;
            let /** @type {?} */ style$$1;
            if (this.nzVertical) {
                style$$1 = {
                    marginBottom: '-50%',
                    bottom: `${(value - this.nzMin) / range * 100}%`
                };
            }
            else {
                const /** @type {?} */ marksCount = this.nzMarksArray.length;
                const /** @type {?} */ unit = 100 / (marksCount - 1);
                const /** @type {?} */ markWidth = unit * 0.9;
                style$$1 = {
                    width: `${markWidth}%`,
                    marginLeft: `${-markWidth / 2}%`,
                    left: `${(value - this.nzMin) / range * 100}%`
                };
            }
            // custom configuration
            if (typeof config === 'object') {
                label = config.label;
                if (config.style) {
                    style$$1 = Object.assign({}, style$$1, config.style);
                }
            }
            return {
                id: value,
                value,
                offset,
                classes: {
                    [`${this.nzClassName}-text`]: true
                },
                style: style$$1,
                label
            };
        }); // END - map
    }
    /**
     * @return {?}
     */
    togglePointActive() {
        if (this.attrs && this.nzLowerBound !== null && this.nzUpperBound !== null) {
            this.attrs.forEach(attr => {
                const /** @type {?} */ value = attr.value;
                const /** @type {?} */ isActive = (!this.nzIncluded && value === this.nzUpperBound) ||
                    (this.nzIncluded && value <= this.nzUpperBound && value >= this.nzLowerBound);
                attr.classes[`${this.nzClassName}-text-active`] = isActive;
            });
        }
    }
}
NzSliderMarksComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-marks',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [class]="nzClassName">
      <span *ngFor="let attr of attrs; trackBy: trackById" [ngClass]="attr.classes" [ngStyle]="attr.style" [innerHTML]="attr.label"></span>
    </div>
  `
            },] },
];
/** @nocollapse */
NzSliderMarksComponent.ctorParameters = () => [];
NzSliderMarksComponent.propDecorators = {
    "nzLowerBound": [{ type: Input },],
    "nzUpperBound": [{ type: Input },],
    "nzMarksArray": [{ type: Input },],
    "nzClassName": [{ type: Input },],
    "nzMin": [{ type: Input },],
    "nzMax": [{ type: Input },],
    "nzVertical": [{ type: Input },],
    "nzIncluded": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSliderService {
    /**
     * @param {?} e
     * @return {?}
     */
    pauseEvent(e) {
        e.stopPropagation();
        e.preventDefault();
    }
    /**
     * @param {?} num
     * @return {?}
     */
    getPrecision(num) {
        const /** @type {?} */ numStr = num.toString();
        const /** @type {?} */ dotIndex = numStr.indexOf('.');
        return dotIndex >= 0 ? numStr.length - dotIndex - 1 : 0;
    }
    /**
     * @template T
     * @param {?} arr
     * @return {?}
     */
    cloneArray(arr) {
        return arr.slice();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    isNotTouchEvent(e) {
        return !e.touches || e.touches.length > 1 ||
            (e.type.toLowerCase() === 'touchend' && e.touches.length > 0);
    }
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} value
     * @return {?}
     */
    valueToOffset(min, max, value) {
        return (value - min) / (max - min) * 100;
    }
    /**
     * @param {?} num
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    correctNumLimit(num, min, max) {
        let /** @type {?} */ res = +num;
        if (isNaN(res)) {
            return min;
        }
        if (num < min) {
            res = min;
        }
        else if (num > max) {
            res = max;
        }
        return res;
    }
    /**
     * get the offset of an element relative to the document (Reference from jquery's offset())
     * @param {?} elem HTMLElement ref
     * @return {?}
     */
    getElementOffset(elem) {
        // Return zeros for disconnected and hidden (display: none) elements (gh-2310)
        // Support: IE <=11 only
        // Running getBoundingClientRect on a
        // disconnected node in IE throws an error
        if (!elem.getClientRects().length) {
            return { top: 0, left: 0 };
        }
        // Get document-relative position by adding viewport scroll to viewport-relative gBCR
        const /** @type {?} */ rect = elem.getBoundingClientRect();
        const /** @type {?} */ win = elem.ownerDocument.defaultView;
        return {
            top: rect.top + win.pageYOffset,
            left: rect.left + win.pageXOffset
        };
    }
}
NzSliderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzSliderService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

class NzSliderComponent {
    /**
     * @param {?} utils
     */
    constructor(utils) {
        this.utils = utils;
        // Debugging
        this.nzDebugId = null;
        // Static configurations (properties that can only specify once)
        this.nzStep = 1;
        this.nzMarks = null;
        this.nzMin = 0;
        this.nzMax = 100;
        this.nzDefaultValue = null;
        this.nzOnAfterChange = new EventEmitter();
        this._disabled = false;
        this._dots = false;
        this._included = true;
        this._range = false;
        this._vertical = false;
        this.value = null;
        this.cacheSliderStart = null;
        this.cacheSliderLength = null;
        this.prefixCls = 'ant-slider';
        this.activeValueIndex = null;
        this.track = { offset: null, length: null };
        this.bounds = { lower: null, upper: null };
        this.isDragging = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVertical(value) {
        this._vertical = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzVertical() {
        return this._vertical;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzRange(value) {
        this._range = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzRange() {
        return this._range;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDots(value) {
        this._dots = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDots() {
        return this._dots;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIncluded(value) {
        this._included = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIncluded() {
        return this._included;
    }
    /**
     * @param {?} val
     * @param {?=} isWriteValue
     * @return {?}
     */
    setValue(val, isWriteValue = false) {
        if (isWriteValue) {
            // [ngModel-writeValue]: Formatting before setting value, always update current value, but trigger onValueChange ONLY when the "formatted value" not equals "input value"
            this.value = this.formatValue(val);
            this.log(`[ngModel:setValue/writeValue]Update track & handles`);
            this.updateTrackAndHandles();
            // if (!this.isValueEqual(this.value, val)) {
            //   this.log(`[ngModel:setValue/writeValue]onValueChange`, val);
            //   if (this.onValueChange) { // NOTE: onValueChange will be unavailable when writeValue() called at the first time
            //     this.onValueChange(this.value);
            //   }
            // }
        }
        else {
            // [Normal]: setting value, ONLY check changed, then update and trigger onValueChange
            if (!this.isValueEqual(this.value, val)) {
                this.value = val;
                this.log(`[Normal:setValue]Update track & handles`);
                this.updateTrackAndHandles();
                this.log(`[Normal:setValue]onValueChange`, val);
                if (this.onValueChange) {
                    // NOTE: onValueChange will be unavailable when writeValue() called at the first time
                    this.onValueChange(this.value);
                }
            }
        }
    }
    /**
     * @param {?=} cloneAndSort
     * @return {?}
     */
    getValue(cloneAndSort = false) {
        // TODO: using type guard, remove type cast
        if (cloneAndSort && this.nzRange) {
            // clone & sort range values
            return this.utils.cloneArray(/** @type {?} */ (this.value)).sort((a, b) => a - b);
        }
        return this.value;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    getValueToOffset(value) {
        let /** @type {?} */ normalizedValue = value;
        if (typeof normalizedValue === 'undefined') {
            normalizedValue = this.getValue(true);
        }
        // TODO: using type guard, remove type cast
        return this.nzRange ?
            (/** @type {?} */ (normalizedValue)).map(val => this.valueToOffset(val)) :
            this.valueToOffset(/** @type {?} */ (normalizedValue));
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        // NOTE: writeValue will be called twice when initialized (may BUG? see: https://github.com/angular/angular/issues/14988), here we just ignore the first inited(the first the onValueChange will not registered)
        if (typeof this.onValueChange !== 'function') {
            return;
        } // ignore the first initial call
        this.log(`[ngModel/writeValue]current writing value = `, val);
        this.setValue(val, true);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onValueChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
        this.toggleDragDisabled(isDisabled);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // initial checking
        this.checkValidValue(this.nzDefaultValue); // check nzDefaultValue
        // default handles
        this.handles = this._generateHandles(this.nzRange ? 2 : 1);
        // initialize
        this.sliderDOM = this.slider.nativeElement;
        if (this.getValue() === null) {
            this.setValue(this.formatValue(null));
        } // init with default value
        this.marksArray = this.nzMarks === null ? null : this.toMarksArray(this.nzMarks);
        // event bindings
        this.createDrag();
        // initialize drag's disabled status
        this.toggleDragDisabled(this.nzDisabled);
        // the first time to init classes
        this.setClassMap();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { nzDisabled, nzMarks } = changes;
        if (nzDisabled && !nzDisabled.firstChange) {
            this.toggleDragDisabled(nzDisabled.currentValue);
            this.setClassMap();
        }
        else if (nzMarks && !nzMarks.firstChange) {
            this.marksArray = this.nzMarks ? this.toMarksArray(this.nzMarks) : null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unsubscribeDrag();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this.classMap = {
            [this.prefixCls]: true,
            [`${this.prefixCls}-disabled`]: this.nzDisabled,
            [`${this.prefixCls}-vertical`]: this.nzVertical,
            [`${this.prefixCls}-with-marks`]: this.marksArray ? this.marksArray.length : 0
        };
    }
    /**
     * @param {?} pointerValue
     * @return {?}
     */
    setActiveValueIndex(pointerValue) {
        if (this.nzRange) {
            let /** @type {?} */ minimal = null;
            let /** @type {?} */ gap;
            let /** @type {?} */ activeIndex;
            // TODO: using type guard, remove type cast
            (/** @type {?} */ (this.getValue())).forEach((val, index) => {
                gap = Math.abs(pointerValue - val);
                if (minimal === null || gap < minimal) {
                    minimal = gap;
                    activeIndex = index;
                }
            });
            this.activeValueIndex = activeIndex;
        }
    }
    /**
     * @param {?} pointerValue
     * @return {?}
     */
    setActiveValue(pointerValue) {
        if (this.nzRange) {
            // TODO: using type guard, remove type cast
            const /** @type {?} */ newValue = this.utils.cloneArray(/** @type {?} */ (this.value));
            newValue[this.activeValueIndex] = pointerValue;
            this.setValue(newValue);
        }
        else {
            this.setValue(pointerValue);
        }
    }
    /**
     * @return {?}
     */
    updateTrackAndHandles() {
        const /** @type {?} */ value = this.getValue();
        const /** @type {?} */ offset = this.getValueToOffset(value);
        const /** @type {?} */ valueSorted = this.getValue(true);
        const /** @type {?} */ offsetSorted = this.getValueToOffset(valueSorted);
        const /** @type {?} */ boundParts = this.nzRange ? /** @type {?} */ (valueSorted) : [0, valueSorted];
        const /** @type {?} */ trackParts = this.nzRange ? [offsetSorted[0], offsetSorted[1] - offsetSorted[0]] : [0, offsetSorted];
        this.handles.forEach((handle, index) => {
            handle.offset = this.nzRange ? offset[index] : offset;
            handle.value = this.nzRange ? value[index] : value;
        });
        [this.bounds.lower, this.bounds.upper] = boundParts;
        [this.track.offset, this.track.length] = trackParts;
    }
    /**
     * @param {?} marks
     * @return {?}
     */
    toMarksArray(marks) {
        const /** @type {?} */ marksArray = [];
        for (const /** @type {?} */ key in marks) {
            const /** @type {?} */ mark = marks[key];
            const /** @type {?} */ val = typeof key === 'number' ? key : parseFloat(key);
            if (val < this.nzMin || val > this.nzMax) {
                continue;
            }
            marksArray.push({ value: val, offset: this.valueToOffset(val), config: mark });
        }
        return marksArray;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onDragStart(value) {
        this.log('[onDragStart]dragging value = ', value);
        this.toggleDragMoving(true);
        // cache DOM layout/reflow operations
        this.cacheSliderProperty();
        // trigger drag start
        this.setActiveValueIndex(value);
        this.setActiveValue(value);
        // Tooltip visibility of handles
        this._showHandleTooltip(this.nzRange ? this.activeValueIndex : 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onDragMove(value) {
        this.log('[onDragMove]dragging value = ', value);
        // trigger drag moving
        this.setActiveValue(value);
    }
    /**
     * @return {?}
     */
    onDragEnd() {
        this.log('[onDragEnd]');
        this.toggleDragMoving(false);
        this.nzOnAfterChange.emit(this.getValue(true));
        // remove cache DOM layout/reflow operations
        this.cacheSliderProperty(true);
        // Hide all tooltip
        this._hideAllHandleTooltip();
    }
    /**
     * @return {?}
     */
    createDrag() {
        const /** @type {?} */ sliderDOM = this.sliderDOM;
        const /** @type {?} */ orientField = this.nzVertical ? 'pageY' : 'pageX';
        // TODO: using named interface
        const /** @type {?} */ mouse = /** @type {?} */ ({
            start: 'mousedown', move: 'mousemove', end: 'mouseup',
            pluckKey: [orientField]
        });
        const /** @type {?} */ touch = /** @type {?} */ ({
            start: 'touchstart', move: 'touchmove', end: 'touchend',
            pluckKey: ['touches', '0', orientField],
            filter: (e) => !this.utils.isNotTouchEvent(/** @type {?} */ (e))
        });
        // make observables
        [mouse, touch].forEach(source => {
            // TODO: remove any
            // TODO: filterFunc doesn't match filter in touch, should be checked
            /* tslint:disable-next-line:no-any */
            const { start, move, end, pluckKey, filterFunc = (() => true) } = /** @type {?} */ (source);
            // start
            source.startPlucked$ = fromEvent$1(sliderDOM, start).pipe(filter$1(filterFunc), tap$1(this.utils.pauseEvent), pluck$1(...pluckKey), map$1((position) => this.findClosestValue(position)));
            // end
            source.end$ = fromEvent$1(document, end);
            // resolve move
            source.moveResolved$ = fromEvent$1(document, move).pipe(filter$1(filterFunc), tap$1(this.utils.pauseEvent), pluck$1(...pluckKey), distinctUntilChanged$1(), map$1((position) => this.findClosestValue(position)), distinctUntilChanged$1(), takeUntil$1(source.end$));
            // merge to become moving
            // source.move$ = source.startPlucked$.mergeMapTo(source.moveResolved$);
        });
        // merge mouse and touch observables
        this.dragstart$ = merge$3(mouse.startPlucked$, touch.startPlucked$);
        // this.dragmove$ = Observable.merge(mouse.move$, touch.move$);
        this.dragmove$ = merge$3(mouse.moveResolved$, touch.moveResolved$);
        this.dragend$ = merge$3(mouse.end$, touch.end$);
    }
    /**
     * @param {?=} periods
     * @return {?}
     */
    subscribeDrag(periods = ['start', 'move', 'end']) {
        this.log('[subscribeDrag]this.dragstart$ = ', this.dragstart$);
        if (periods.indexOf('start') !== -1 && this.dragstart$ && !this.dragstart_) {
            this.dragstart_ = this.dragstart$.subscribe(this.onDragStart.bind(this));
        }
        if (periods.indexOf('move') !== -1 && this.dragmove$ && !this.dragmove_) {
            this.dragmove_ = this.dragmove$.subscribe(this.onDragMove.bind(this));
        }
        if (periods.indexOf('end') !== -1 && this.dragend$ && !this.dragend_) {
            this.dragend_ = this.dragend$.subscribe(this.onDragEnd.bind(this));
        }
    }
    /**
     * @param {?=} periods
     * @return {?}
     */
    unsubscribeDrag(periods = ['start', 'move', 'end']) {
        this.log('[unsubscribeDrag]this.dragstart_ = ', this.dragstart_);
        if (periods.indexOf('start') !== -1 && this.dragstart_) {
            this.dragstart_.unsubscribe();
            this.dragstart_ = null;
        }
        if (periods.indexOf('move') !== -1 && this.dragmove_) {
            this.dragmove_.unsubscribe();
            this.dragmove_ = null;
        }
        if (periods.indexOf('end') !== -1 && this.dragend_) {
            this.dragend_.unsubscribe();
            this.dragend_ = null;
        }
    }
    /**
     * @param {?} movable
     * @return {?}
     */
    toggleDragMoving(movable) {
        const /** @type {?} */ periods = ['move', 'end'];
        if (movable) {
            this.isDragging = true;
            this.subscribeDrag(periods);
        }
        else {
            this.isDragging = false;
            this.unsubscribeDrag(periods);
        }
    }
    /**
     * @param {?} disabled
     * @return {?}
     */
    toggleDragDisabled(disabled) {
        if (disabled) {
            this.unsubscribeDrag();
        }
        else {
            this.subscribeDrag(['start']);
        }
    }
    /**
     * @param {?} position
     * @return {?}
     */
    findClosestValue(position) {
        const /** @type {?} */ sliderStart = this.getSliderStartPosition();
        const /** @type {?} */ sliderLength = this.getSliderLength();
        const /** @type {?} */ ratio = this.utils.correctNumLimit((position - sliderStart) / sliderLength, 0, 1);
        const /** @type {?} */ val = (this.nzMax - this.nzMin) * (this.nzVertical ? 1 - ratio : ratio) + this.nzMin;
        const /** @type {?} */ points = (this.nzMarks === null ? [] : Object.keys(this.nzMarks).map(parseFloat));
        // push closest step
        if (this.nzStep !== null && !this.nzDots) {
            const /** @type {?} */ closestOne = Math.round(val / this.nzStep) * this.nzStep;
            points.push(closestOne);
        }
        // calculate gaps
        const /** @type {?} */ gaps = points.map(point => Math.abs(val - point));
        const /** @type {?} */ closest = points[gaps.indexOf(Math.min(...gaps))];
        // return the fixed
        return this.nzStep === null ? closest :
            parseFloat(closest.toFixed(this.utils.getPrecision(this.nzStep)));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    valueToOffset(value) {
        return this.utils.valueToOffset(this.nzMin, this.nzMax, value);
    }
    /**
     * @return {?}
     */
    getSliderStartPosition() {
        if (this.cacheSliderStart !== null) {
            return this.cacheSliderStart;
        }
        const /** @type {?} */ offset = this.utils.getElementOffset(this.sliderDOM);
        return this.nzVertical ? offset.top : offset.left;
    }
    /**
     * @return {?}
     */
    getSliderLength() {
        if (this.cacheSliderLength !== null) {
            return this.cacheSliderLength;
        }
        const /** @type {?} */ sliderDOM = this.sliderDOM;
        return this.nzVertical ?
            sliderDOM.clientHeight : sliderDOM.clientWidth;
    }
    /**
     * @param {?=} remove
     * @return {?}
     */
    cacheSliderProperty(remove = false) {
        this.cacheSliderStart = remove ? null : this.getSliderStartPosition();
        this.cacheSliderLength = remove ? null : this.getSliderLength();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatValue(value) {
        // NOTE: will return new value
        let /** @type {?} */ res = value;
        if (!this.checkValidValue(value)) {
            // if empty, use default value
            res = this.nzDefaultValue === null ?
                (this.nzRange ? [this.nzMin, this.nzMax] : this.nzMin) : this.nzDefaultValue;
        }
        else {
            // format
            // TODO: using type guard, remove type cast
            res = this.nzRange ?
                (/** @type {?} */ (value)).map(val => this.utils.correctNumLimit(val, this.nzMin, this.nzMax)) :
                this.utils.correctNumLimit(/** @type {?} */ (value), this.nzMin, this.nzMax);
        }
        return res;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkValidValue(value) {
        const /** @type {?} */ range = this.nzRange;
        if (value === null || value === undefined) {
            return false;
        } // it's an invalid value, just return
        const /** @type {?} */ isArray = Array.isArray(value);
        if (!Array.isArray(value)) {
            let /** @type {?} */ parsedValue = value;
            if (typeof value !== 'number') {
                parsedValue = parseFloat(value);
            }
            if (isNaN(parsedValue)) {
                return false;
            } // it's an invalid value, just return
        }
        if (isArray !== !!range) {
            // value type not match
            throw new Error(`The "nzRange" can't match the "nzValue"'s type, please check these properties: "nzRange", "nzValue", "nzDefaultValue".`);
        }
        return true;
    }
    /**
     * @param {?} value
     * @param {?} val
     * @return {?}
     */
    isValueEqual(value, val) {
        if (typeof value !== typeof val) {
            return false;
        }
        if (Array.isArray(value)) {
            const /** @type {?} */ len = value.length;
            for (let /** @type {?} */ i = 0; i < len; i++) {
                if (value[i] !== val[i]) {
                    return false;
                }
            }
            return true;
        }
        else {
            return value === val;
        }
    }
    /**
     * @param {...?} messages
     * @return {?}
     */
    log(...messages) {
        if (this.nzDebugId !== null) {
            const /** @type {?} */ args = [`[nz-slider][#${this.nzDebugId}] `].concat(Array.prototype.slice.call(arguments));
            console.log.apply(null, args);
        }
    }
    /**
     * @param {?=} handleIndex
     * @return {?}
     */
    _showHandleTooltip(handleIndex = 0) {
        this.handles.forEach((handle, index) => {
            this.handles[index].active = index === handleIndex;
        });
    }
    /**
     * @return {?}
     */
    _hideAllHandleTooltip() {
        this.handles.forEach(handle => handle.active = false);
    }
    /**
     * @param {?} amount
     * @return {?}
     */
    _generateHandles(amount) {
        const /** @type {?} */ handles = [];
        for (let /** @type {?} */ i = 0; i < amount; i++) {
            handles.push({ offset: null, value: null, active: false });
        }
        return handles;
    }
}
NzSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider',
                encapsulation: ViewEncapsulation.None,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzSliderComponent),
                        multi: true
                    }],
                template: `
    <div #slider [ngClass]="classMap">
      <div class="ant-slider-rail"></div>
      <nz-slider-track
        nzClassName="{{prefixCls}}-track"
        [nzVertical]="nzVertical"
        [nzIncluded]="nzIncluded"
        [nzOffset]="track.offset"
        [nzLength]="track.length"
      ></nz-slider-track>
      <nz-slider-step *ngIf="marksArray"
        nzPrefixCls="{{prefixCls}}"
        [nzVertical]="nzVertical"
        [nzLowerBound]="bounds.lower"
        [nzUpperBound]="bounds.upper"
        [nzMarksArray]="marksArray"
        [nzIncluded]="nzIncluded"
      ></nz-slider-step>
      <nz-slider-handle
        *ngFor="let handle of handles;"
        nzClassName="{{prefixCls}}-handle"
        [nzVertical]="nzVertical"
        [nzOffset]="handle.offset"
        [nzValue]="handle.value"
        [nzActive]="handle.active"
        [nzTipFormatter]="nzTipFormatter"
      ></nz-slider-handle>
      <nz-slider-marks *ngIf="marksArray"
        nzClassName="{{prefixCls}}-mark"
        [nzVertical]="nzVertical"
        [nzMin]="nzMin"
        [nzMax]="nzMax"
        [nzLowerBound]="bounds.lower"
        [nzUpperBound]="bounds.upper"
        [nzMarksArray]="marksArray"
        [nzIncluded]="nzIncluded"
      ></nz-slider-marks>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-slider {
  position: relative;
  margin: 10px 6px;
  padding: 4px 0;
  height: 12px;
  cursor: pointer;
}
.ant-slider-vertical {
  width: 12px;
  height: 100%;
  margin: 6px 10px;
  padding: 0 4px;
}
.ant-slider-vertical .ant-slider-rail {
  height: 100%;
  width: 4px;
}
.ant-slider-vertical .ant-slider-track {
  width: 4px;
}
.ant-slider-vertical .ant-slider-handle {
  margin-left: -5px;
  margin-bottom: -7px;
}
.ant-slider-vertical .ant-slider-mark {
  top: 0;
  left: 12px;
  width: 18px;
  height: 100%;
}
.ant-slider-vertical .ant-slider-mark-text {
  left: 4px;
  white-space: nowrap;
}
.ant-slider-vertical .ant-slider-step {
  width: 4px;
  height: 100%;
}
.ant-slider-vertical .ant-slider-dot {
  top: auto;
  left: 2px;
  margin-bottom: -4px;
}
.ant-slider-with-marks {
  margin-bottom: 28px;
}
.ant-slider-rail {
  position: absolute;
  width: 100%;
  height: 4px;
  border-radius: 2px;
  background-color: #e9e9e9;
  transition: background-color 0.3s ease;
}
.ant-slider-track {
  position: absolute;
  height: 4px;
  border-radius: 4px;
  background-color: #9fd2f6;
  transition: background-color 0.3s ease;
}
.ant-slider-handle {
  position: absolute;
  margin-left: -7px;
  margin-top: -5px;
  width: 14px;
  height: 14px;
  cursor: pointer;
  border-radius: 50%;
  border: solid 2px #88c7f4;
  background-color: #fff;
  transition: border-color 0.3s ease, transform 0.3s cubic-bezier(0.18, 0.89, 0.32, 1.28);
}
.ant-slider-handle:hover {
  border-color: #49a9ee;
  transform: scale(1.2);
  transform-origin: center center;
}
.ant-slider-handle:active {
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
}
.ant-slider:hover .ant-slider-rail {
  background-color: #e1e1e1;
}
.ant-slider:hover .ant-slider-track {
  background-color: #70bbf2;
}
.ant-slider:hover .ant-slider-handle {
  border-color: #49a9ee;
}
.ant-slider-mark {
  position: absolute;
  top: 14px;
  left: 0;
  width: 100%;
  font-size: 12px;
}
.ant-slider-mark-text {
  position: absolute;
  display: inline-block;
  vertical-align: middle;
  text-align: center;
  cursor: pointer;
  color: rgba(0, 0, 0, 0.43);
}
.ant-slider-mark-text-active {
  color: rgba(0, 0, 0, 0.65);
}
.ant-slider-step {
  position: absolute;
  width: 100%;
  height: 4px;
  background: transparent;
}
.ant-slider-dot {
  position: absolute;
  top: -2px;
  margin-left: -4px;
  width: 8px;
  height: 8px;
  border: 2px solid #e9e9e9;
  background-color: #fff;
  cursor: pointer;
  border-radius: 50%;
  vertical-align: middle;
}
.ant-slider-dot:first-child {
  margin-left: -4px;
}
.ant-slider-dot:last-child {
  margin-left: -4px;
}
.ant-slider-dot-active {
  border-color: #88c7f4;
}
.ant-slider-disabled {
  cursor: not-allowed;
}
.ant-slider-disabled .ant-slider-track {
  background-color: rgba(0, 0, 0, 0.25) !important;
}
.ant-slider-disabled .ant-slider-handle,
.ant-slider-disabled .ant-slider-dot {
  border-color: rgba(0, 0, 0, 0.25) !important;
  background-color: #fff;
  cursor: not-allowed;
  box-shadow: none;
}
.ant-slider-disabled .ant-slider-mark-text,
.ant-slider-disabled .ant-slider-dot {
  cursor: not-allowed !important;
}
`
                ]
            },] },
];
/** @nocollapse */
NzSliderComponent.ctorParameters = () => [
    { type: NzSliderService, },
];
NzSliderComponent.propDecorators = {
    "nzDebugId": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "nzStep": [{ type: Input },],
    "nzMarks": [{ type: Input },],
    "nzMin": [{ type: Input },],
    "nzMax": [{ type: Input },],
    "nzDefaultValue": [{ type: Input },],
    "nzTipFormatter": [{ type: Input },],
    "nzOnAfterChange": [{ type: Output },],
    "nzVertical": [{ type: Input },],
    "nzRange": [{ type: Input },],
    "nzDots": [{ type: Input },],
    "nzIncluded": [{ type: Input },],
    "slider": [{ type: ViewChild, args: ['slider',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSliderHandleComponent {
    /**
     * @param {?} _slider
     */
    constructor(_slider) {
        this._slider = _slider;
        this.style = {};
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzActive(value) {
        // [For tooltip]
        const /** @type {?} */ show = toBoolean(value);
        if (this.tooltip) {
            if (show) {
                this.tooltip.show();
            }
            else {
                this.tooltip.hide();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["nzOffset"]) {
            this._updateStyle();
        }
        if (changes["nzValue"]) {
            this._updateTooltipTitle(); // [For tooltip]
            this._updateTooltipPosition(); // [For tooltip]
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        if (!this._slider.isDragging) {
            this.nzActive = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseLeave($event) {
        if (!this._slider.isDragging) {
            this.nzActive = false;
        }
    }
    /**
     * @return {?}
     */
    _updateTooltipTitle() {
        // [For tooltip]
        this.tooltipTitle = this.nzTipFormatter ? this.nzTipFormatter(this.nzValue) : `${this.nzValue}`;
    }
    /**
     * @return {?}
     */
    _updateTooltipPosition() {
        // [For tooltip]
        if (this.tooltip) {
            window.setTimeout(() => this.tooltip.updatePosition(), 0); // MAY use ngAfterViewChecked? but this will be called so many times.
        }
    }
    /**
     * @return {?}
     */
    _updateStyle() {
        this.style[this.nzVertical ? 'bottom' : 'left'] = `${this.nzOffset}%`;
    }
}
NzSliderHandleComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-handle',
                encapsulation: ViewEncapsulation.None,
                template: `
    <nz-tooltip *ngIf="nzTipFormatter !== null" #tooltip [nzTitle]="tooltipTitle" [nzTrigger]="null">
      <div nz-tooltip [class]="nzClassName" [ngStyle]="style"></div>
    </nz-tooltip>
    <div *ngIf="nzTipFormatter === null" [class]="nzClassName" [ngStyle]="style"></div>
  `
            },] },
];
/** @nocollapse */
NzSliderHandleComponent.ctorParameters = () => [
    { type: NzSliderComponent, },
];
NzSliderHandleComponent.propDecorators = {
    "nzClassName": [{ type: Input },],
    "nzVertical": [{ type: Input },],
    "nzOffset": [{ type: Input },],
    "nzValue": [{ type: Input },],
    "nzTipFormatter": [{ type: Input },],
    "nzActive": [{ type: Input },],
    "tooltip": [{ type: ViewChild, args: ['tooltip',] },],
    "onMouseEnter": [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    "onMouseLeave": [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSliderStepComponent {
    constructor() {
        this._vertical = false;
        this._included = false;
        // Dynamic properties
        this.nzLowerBound = null;
        this.nzUpperBound = null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVertical(value) {
        // Required
        this._vertical = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzVertical() {
        return this._vertical;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIncluded(value) {
        this._included = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIncluded() {
        return this._included;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["nzMarksArray"]) {
            this.buildAttrs();
        }
        if (changes["nzMarksArray"] || changes["nzLowerBound"] || changes["nzUpperBound"]) {
            this.togglePointActive();
        }
    }
    /**
     * @param {?} index
     * @param {?} attr
     * @return {?}
     */
    trackById(index, attr) {
        return attr.id;
    }
    /**
     * @return {?}
     */
    buildAttrs() {
        const /** @type {?} */ orient = this.nzVertical ? 'bottom' : 'left';
        const /** @type {?} */ prefixCls = this.nzPrefixCls;
        this.attrs = this.nzMarksArray.map(mark => {
            const { value, offset } = mark;
            return {
                id: value,
                value,
                offset,
                style: {
                    [orient]: `${offset}%`
                },
                classes: {
                    [`${prefixCls}-dot`]: true,
                    [`${prefixCls}-dot-active`]: false
                }
            };
        });
    }
    /**
     * @return {?}
     */
    togglePointActive() {
        if (this.attrs && this.nzLowerBound !== null && this.nzUpperBound !== null) {
            this.attrs.forEach(attr => {
                const /** @type {?} */ value = attr.value;
                const /** @type {?} */ isActive = (!this.nzIncluded && value === this.nzUpperBound) ||
                    (this.nzIncluded && value <= this.nzUpperBound && value >= this.nzLowerBound);
                attr.classes[`${this.nzPrefixCls}-dot-active`] = isActive;
            });
        }
    }
}
NzSliderStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-step',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="{{nzPrefixCls}}-step">
      <span *ngFor="let attr of attrs; trackBy: trackById" [ngClass]="attr.classes" [ngStyle]="attr.style"></span>
    </div>
  `
            },] },
];
/** @nocollapse */
NzSliderStepComponent.ctorParameters = () => [];
NzSliderStepComponent.propDecorators = {
    "nzLowerBound": [{ type: Input },],
    "nzUpperBound": [{ type: Input },],
    "nzMarksArray": [{ type: Input },],
    "nzPrefixCls": [{ type: Input },],
    "nzVertical": [{ type: Input },],
    "nzIncluded": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSliderTrackComponent {
    constructor() {
        this._vertical = false;
        this._included = false;
        this.style = {};
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzVertical(value) {
        // Required
        this._vertical = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzVertical() {
        return this._vertical;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIncluded(value) {
        this._included = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIncluded() {
        return this._included;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["nzIncluded"]) {
            this.style.visibility = this.nzIncluded ? 'visible' : 'hidden';
        }
        if (changes["nzVertical"] || changes["nzOffset"] || changes["nzLength"]) {
            if (this.nzVertical) {
                this.style.bottom = `${this.nzOffset}%`;
                this.style.height = `${this.nzLength}%`;
            }
            else {
                this.style.left = `${this.nzOffset}%`;
                this.style.width = `${this.nzLength}%`;
            }
        }
    }
}
NzSliderTrackComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-slider-track',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [class]="nzClassName" [ngStyle]="style"></div>
  `
            },] },
];
/** @nocollapse */
NzSliderTrackComponent.ctorParameters = () => [];
NzSliderTrackComponent.propDecorators = {
    "nzOffset": [{ type: Input },],
    "nzLength": [{ type: Input },],
    "nzClassName": [{ type: Input },],
    "nzVertical": [{ type: Input },],
    "nzIncluded": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSliderModule {
}
NzSliderModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],
                declarations: [NzSliderComponent, NzSliderTrackComponent, NzSliderHandleComponent, NzSliderStepComponent, NzSliderMarksComponent],
                imports: [CommonModule, NzToolTipModule],
                providers: [NzSliderService]
            },] },
];
/** @nocollapse */
NzSliderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSpinComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _renderer
     */
    constructor(_elementRef, _renderer) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._spinning = true;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTip(value) {
        this._tip = value || '加载中...';
    }
    /**
     * @return {?}
     */
    get nzTip() {
        return this._tip;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSpinning(value) {
        this._spinning = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzSpinning() {
        return this._spinning;
    }
    /**
     * @return {?}
     */
    get isNested() {
        return this.nzSpinning && (this._ref.nativeElement.childNodes.length !== 0);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = { large: 'lg', small: 'sm' }[value];
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this._ref.nativeElement.children.length !== 0) {
            this._renderer.setStyle(this._el, 'display', 'block');
        }
    }
}
NzSpinComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-spin',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div>
      <div class="ant-spin" [ngClass]="{'ant-spin-spinning':nzSpinning,'ant-spin-lg':_size=='lg','ant-spin-sm':_size=='sm','ant-spin-show-text':_tip}">
        <span class="ant-spin-dot"><i></i><i></i><i></i><i></i></span>
        <div class="ant-spin-text">{{ _tip }}</div>
      </div>
    </div>
    <div class="ant-spin-container" [class.ant-spin-blur]="nzSpinning" #ref [hidden]="ref.children.length == 0"><ng-content></ng-content></div>

  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-spin {
  color: #108ee9;
  vertical-align: middle;
  text-align: center;
  opacity: 0;
  position: absolute;
  transition: transform 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  font-size: 12px;
  display: none;
}
.ant-spin-spinning {
  opacity: 1;
  position: static;
  display: inline-block;
}
.ant-spin-nested-loading {
  position: relative;
}
.ant-spin-nested-loading > div > .ant-spin {
  position: absolute;
  height: 100%;
  max-height: 320px;
  width: 100%;
  z-index: 4;
}
.ant-spin-nested-loading > div > .ant-spin .ant-spin-dot {
  position: absolute;
  top: 50%;
  left: 50%;
  margin: -10px;
}
.ant-spin-nested-loading > div > .ant-spin .ant-spin-text {
  position: absolute;
  top: 50%;
  width: 100%;
  padding-top: 6px;
}
.ant-spin-nested-loading > div > .ant-spin.ant-spin-show-text .ant-spin-dot {
  margin-top: -20px;
}
.ant-spin-nested-loading > div > .ant-spin-sm .ant-spin-dot {
  margin: -7px;
}
.ant-spin-nested-loading > div > .ant-spin-sm .ant-spin-text {
  padding-top: 3px;
}
.ant-spin-nested-loading > div > .ant-spin-sm.ant-spin-show-text .ant-spin-dot {
  margin-top: -17px;
}
.ant-spin-nested-loading > div > .ant-spin-lg .ant-spin-dot {
  margin: -16px;
}
.ant-spin-nested-loading > div > .ant-spin-lg .ant-spin-text {
  padding-top: 12px;
}
.ant-spin-nested-loading > div > .ant-spin-lg.ant-spin-show-text .ant-spin-dot {
  margin-top: -26px;
}
.ant-spin-container {
  position: relative;
}
.ant-spin-blur {
  overflow: hidden;
  opacity: 0.7;
  -webkit-filter: blur(0.5px);
  filter: blur(0.5px);
  /* autoprefixer: off */
  filter: progid\:DXImageTransform\.Microsoft\.Blur(PixelRadius\=1, MakeShadow\=false);
  -webkit-transform: translateZ(0);
}
.ant-spin-blur:after {
  content: '';
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  background: #fff;
  opacity: 0.3;
  transition: all .3s;
  z-index: 10;
}
.ant-spin-tip {
  color: rgba(0, 0, 0, 0.43);
}
.ant-spin-dot {
  position: relative;
  display: inline-block;
  width: 20px;
  height: 20px;
  transform: rotate(45deg);
  animation: antRotate 1.2s infinite linear;
}
.ant-spin-dot i {
  width: 9px;
  height: 9px;
  border-radius: 100%;
  background-color: #108ee9;
  transform: scale(0.75);
  display: block;
  position: absolute;
  opacity: 0.3;
  animation: antSpinMove 1s infinite linear alternate;
  transform-origin: 50% 50%;
}
.ant-spin-dot i:nth-child(1) {
  left: 0;
  top: 0;
}
.ant-spin-dot i:nth-child(2) {
  right: 0;
  top: 0;
  animation-delay: 0.4s;
}
.ant-spin-dot i:nth-child(3) {
  right: 0;
  bottom: 0;
  animation-delay: 0.8s;
}
.ant-spin-dot i:nth-child(4) {
  left: 0;
  bottom: 0;
  animation-delay: 1.2s;
}
.ant-spin-sm .ant-spin-dot {
  width: 14px;
  height: 14px;
}
.ant-spin-sm .ant-spin-dot i {
  width: 6px;
  height: 6px;
}
.ant-spin-lg .ant-spin-dot {
  width: 32px;
  height: 32px;
}
.ant-spin-lg .ant-spin-dot i {
  width: 14px;
  height: 14px;
}
.ant-spin.ant-spin-show-text .ant-spin-text {
  display: block;
}
@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
  /* IE10+ */
  .ant-spin-blur {
    background: #fff;
    opacity: 0.5;
  }
}
@keyframes antSpinMove {
  to {
    opacity: 1;
  }
}
@keyframes antRotate {
  to {
    transform: rotate(405deg);
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzSpinComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzSpinComponent.propDecorators = {
    "nzTip": [{ type: Input },],
    "nzSpinning": [{ type: Input },],
    "_ref": [{ type: ViewChild, args: ['ref',] },],
    "isNested": [{ type: HostBinding, args: ['class.ant-spin-nested-loading',] },],
    "nzSize": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSpinModule {
}
NzSpinModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzSpinComponent],
                declarations: [NzSpinComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzSpinModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzStepComponent {
    /**
     * @param {?} erf
     * @param {?} _renderer
     * @param {?} cdr
     */
    constructor(erf, _renderer, cdr) {
        this.erf = erf;
        this._renderer = _renderer;
        this.cdr = cdr;
        this._status = 'wait';
        this._ifCustomStatus = false;
        this._totalCount = 1;
        this._currentIndex = 0;
        this._last = false;
        this._first = false;
        this._processDot = false;
        this._direction = 'horizontal';
        this._outStatus = 'process';
        this.index = 0;
        this._description = '';
        this._el = erf.nativeElement;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    set nzStatus(status) {
        this._status = status;
        this._ifCustomStatus = true;
    }
    /**
     * @return {?}
     */
    get nzStatus() {
        return this._status;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDescription(value) {
        if (value instanceof TemplateRef) {
            this._descriptionTpl = value;
        }
        else {
            this._description = /** @type {?} */ (value);
        }
    }
    /**
     * @return {?}
     */
    get _current() {
        return this._currentIndex;
    }
    /**
     * @param {?} current
     * @return {?}
     */
    set _current(current) {
        this._currentIndex = current;
        if (!this._ifCustomStatus) {
            if (current > this.index) {
                this._status = 'finish';
            }
            else if (current === this.index) {
                if (this._outStatus) {
                    this._status = 'error';
                }
                else {
                    this._status = 'process';
                }
            }
            else {
                this._status = 'wait';
            }
        }
        this.initClassMap();
    }
    /**
     * @return {?}
     */
    initClassMap() {
        this.stepStatusClass = {
            ['ant-steps-item']: true,
            [`ant-steps-status-wait`]: this._status === 'wait',
            [`ant-steps-status-process`]: this._status === 'process',
            [`ant-steps-status-finish`]: this._status === 'finish',
            [`ant-steps-status-error`]: this._status === 'error',
            ['ant-steps-item-last']: this._last,
            ['ant-steps-custom']: !!this.nzIcon,
            ['ant-steps-next-error']: (this._outStatus === 'error' && this._current === this.index - 1)
        };
        for (const /** @type {?} */ i in this.stepStatusClass) {
            if (this.stepStatusClass[i]) {
                this._renderer.addClass(this._el, i);
            }
            else {
                this._renderer.removeClass(this._el, i);
            }
        }
    }
    /**
     * @return {?}
     */
    updateLastWidth() {
        let /** @type {?} */ width = this._stepsHead.nativeElement.offsetWidth + this._stepsMain.nativeElement.offsetWidth;
        /** remove left padding if not first**/
        if (!this._first) {
            width = width - 10;
        }
        this._renderer.setStyle(this.erf.nativeElement, 'width', (100 / (this._totalCount - 1)) + '%');
        this._renderer.setStyle(this.erf.nativeElement, 'margin-right', (-(width / (this._totalCount - 1) + 5)) + 'px');
        if (this._direction === 'horizontal') {
            if (this._stepsTail && this._stepsTail.nativeElement) {
                this._renderer.setStyle(this._stepsTail.nativeElement, 'padding-right', ((width / (this._totalCount - 1) + 5)) + 'px');
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this._last) {
            this.updateLastWidth();
        }
    }
}
NzStepComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-step',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-steps-tail" #stepsTail *ngIf="_last !== true">
      <i></i>
    </div>
    <div class="ant-steps-step">
      <div class="ant-steps-head" #stepsHead>
        <div class="ant-steps-head-inner">
          <ng-template [ngIf]="!_processDot">
            <span class="ant-steps-icon anticon anticon-check" *ngIf="_status === 'finish' && !nzIcon"></span>
            <span class="ant-steps-icon anticon anticon-cross" *ngIf="_status === 'error'"></span>
            <span class="ant-steps-icon" *ngIf="(_status === 'process' || _status === 'wait') && !nzIcon">{{ index + 1 }}</span>
            <span class="ant-steps-icon" *ngIf="nzIcon">
            <ng-template [ngTemplateOutlet]="nzIcon"></ng-template>
          </span>
          </ng-template>
          <ng-template [ngIf]="_processDot">
            <span class="ant-steps-icon">
              <span class="ant-steps-icon-dot"></span>
            </span>
          </ng-template>
        </div>
      </div>
      <div class="ant-steps-main" #stepsMain>
        <div class="ant-steps-title" [innerHTML]="nzTitle"></div>
        <div class="ant-steps-description">
          <ng-container *ngIf="_description; else _descriptionTpl">{{ _description }}</ng-container>
        </div>
      </div>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-steps {
  font-size: 0;
  line-height: 1.5;
}
.ant-steps .ant-steps-item {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner {
  border-color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon {
  color: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner {
  border-color: #108ee9;
  background-color: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-title {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-description {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner {
  border-color: #108ee9;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon {
  color: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-tail > i:after {
  width: 100%;
  background: #108ee9;
  transition: all .6s;
  opacity: 1;
  box-shadow: 0 0 0 0 #108ee9;
  animation: tailEffect .4s;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner {
  border-color: #f04134;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-title {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-description {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i,
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i:after {
  background-color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner {
  background: none;
  border: 0;
  width: auto;
  height: auto;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 26px;
  width: 26px;
  height: 26px;
}
.ant-steps .ant-steps-item.ant-steps-custom.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #108ee9;
}
.ant-steps .ant-steps-head,
.ant-steps .ant-steps-main {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-head {
  background: #fff;
}
.ant-steps .ant-steps-head-inner {
  display: block;
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 26px;
  height: 26px;
  line-height: 23px;
  text-align: center;
  border-radius: 26px;
  font-size: 14px;
  margin-right: 8px;
  transition: background-color 0.3s ease, border-color 0.3s ease;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", Helvetica, Arial, sans-serif;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon {
  line-height: 1;
  color: #108ee9;
  position: relative;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-cross,
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-check {
  font-weight: bold;
}
.ant-steps .ant-steps-title {
  font-size: 14px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  background-color: #fff;
  display: inline-block;
  padding-right: 10px;
}
.ant-steps .ant-steps-title > a:first-child:last-child {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item:last-child .ant-steps-title {
  padding-right: 0;
  width: 100%;
}
.ant-steps .ant-steps-item:last-child .ant-steps-tail {
  display: none;
}
.ant-steps .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-tail {
  position: absolute;
  left: 0;
  width: 100%;
  top: 13px;
  padding: 0 10px;
}
.ant-steps .ant-steps-tail > i {
  display: inline-block;
  vertical-align: top;
  background: #e9e9e9;
  height: 1px;
  border-radius: 1px;
  width: 100%;
  position: relative;
}
.ant-steps .ant-steps-tail > i:after {
  position: absolute;
  content: '';
  top: 0;
  width: 0;
  background: #e9e9e9;
  height: 100%;
  opacity: 0;
}
.ant-steps.ant-steps-small .ant-steps-head-inner {
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 18px;
  height: 18px;
  line-height: 15px;
  text-align: center;
  border-radius: 18px;
  font-size: 12px;
  margin-right: 10px;
}
.ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  top: 0;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  filter: none;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps.ant-steps-small .ant-steps-main {
  margin-top: 0;
}
.ant-steps.ant-steps-small .ant-steps-title {
  font-size: 12px;
  line-height: 18px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
}
.ant-steps.ant-steps-small .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps.ant-steps-small .ant-steps-tail {
  top: 8px;
  padding: 0 8px;
}
.ant-steps.ant-steps-small .ant-steps-tail > i {
  height: 1px;
  border-radius: 1px;
  width: 100%;
}
.ant-steps.ant-steps-small .ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 18px;
  width: 18px;
  height: 18px;
}
.ant-steps-vertical > .ant-steps-item {
  display: block;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail {
  position: absolute;
  left: 13px;
  top: 0;
  height: 100%;
  width: 1px;
  padding: 30px 0 4px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i {
  height: 100%;
  width: 1px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i:after {
  height: 0;
  width: 100%;
}
.ant-steps-vertical .ant-steps-status-finish .ant-steps-tail > i:after {
  height: 100%;
}
.ant-steps-vertical .ant-steps-head {
  float: left;
}
.ant-steps-vertical .ant-steps-head-inner {
  margin-right: 16px;
}
.ant-steps-vertical .ant-steps-main {
  min-height: 47px;
  overflow: hidden;
  display: block;
}
.ant-steps-vertical .ant-steps-main .ant-steps-title {
  line-height: 26px;
}
.ant-steps-vertical .ant-steps-main .ant-steps-description {
  padding-bottom: 12px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail {
  position: absolute;
  left: 9px;
  top: 0;
  padding: 22px 0 4px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail > i {
  height: 100%;
}
.ant-steps-vertical.ant-steps-small .ant-steps-title {
  line-height: 18px;
}
.ant-steps-horizontal.ant-steps-hidden {
  visibility: hidden;
}
.ant-steps-horizontal .ant-steps-description {
  max-width: 120px;
}
.ant-steps-horizontal .ant-steps-item:not(:first-child) .ant-steps-head {
  padding-left: 10px;
  margin-left: -10px;
}
.ant-steps-dot .ant-steps-item .ant-steps-step {
  display: inline-block;
  text-align: center;
  width: 120px;
}
.ant-steps-dot .ant-steps-item:not(:first-child) .ant-steps-head {
  margin-left: 0;
  padding-left: 0;
}
.ant-steps-dot .ant-steps-tail {
  margin: 0 0 0 60px;
  padding: 0;
  width: 100%;
  top: 1px;
}
.ant-steps-dot .ant-steps-tail > i {
  height: 3px;
}
.ant-steps-dot .ant-steps-head {
  display: inline-block;
  padding-right: 0;
}
.ant-steps-dot .ant-steps-head-inner {
  margin: 0 auto;
  width: 5px;
  height: 5px;
  line-height: 5px;
  border: 0;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot {
  float: left;
  width: 100%;
  height: 100%;
  border-radius: 2.5px;
  position: relative;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:after {
  content: '';
  background: rgba(255, 255, 255, 0.001);
  width: 40px;
  height: 24px;
  position: absolute;
  top: -8px;
  left: -16px;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:hover {
  transform: scale(1.3);
}
.ant-steps-dot .ant-steps-main {
  display: block;
  margin-top: 10px;
}
.ant-steps-dot .ant-steps-main .ant-steps-title {
  padding-right: 0;
  background-color: transparent;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head {
  top: -1px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner {
  width: 7px;
  height: 7px;
  line-height: 7px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner .ant-steps-icon-dot {
  border-radius: 3.5px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail {
  left: 2px;
  height: 100%;
  padding: 0;
  top: 15px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail > i {
  height: 100%;
  width: 3px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-head {
  top: 12px;
  left: 1px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-status-process .ant-steps-head {
  left: 0;
}
@keyframes tailEffect {
  to {
    box-shadow: 0 0 3px 3px transparent;
  }
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-steps-horizontal nz-step:not(:first-child) .ant-steps-head {
  padding-left: 10px;
  margin-left: -10px;
}
nz-step {
  display: block;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail {
  margin-left: 0;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-step {
  text-align: left;
  width: auto;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-head-inner {
  margin-right: 16px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-main {
  margin-top: 0;
}
`
                ]
            },] },
];
/** @nocollapse */
NzStepComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzStepComponent.propDecorators = {
    "nzIcon": [{ type: ContentChild, args: ['nzIcon',] },],
    "_stepsTail": [{ type: ViewChild, args: ['stepsTail',] },],
    "_stepsHead": [{ type: ViewChild, args: ['stepsHead',] },],
    "_stepsMain": [{ type: ViewChild, args: ['stepsMain',] },],
    "nzStatus": [{ type: Input },],
    "nzTitle": [{ type: Input },],
    "nzDescription": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzStepsComponent {
    constructor() {
        this._progressDot = false;
        this._status = 'process';
        this._current = 0;
        this._afterViewInit = false;
        this._direction = 'horizontal';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDirection(value) {
        this._direction = value;
        this.updateChildrenSteps();
    }
    /**
     * @return {?}
     */
    get nzDirection() {
        return this._direction;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzProgressDot(value) {
        this._progressDot = toBoolean(value);
        this.updateChildrenSteps();
        this.setDirectionClass();
    }
    /**
     * @return {?}
     */
    get nzProgressDot() {
        return this._progressDot;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    set nzStatus(status) {
        this._status = status;
        this.updateChildrenSteps();
    }
    /**
     * @return {?}
     */
    get nzStatus() {
        return this._status;
    }
    /**
     * @param {?} current
     * @return {?}
     */
    set nzCurrent(current) {
        this._current = current;
        this.updateChildrenSteps();
    }
    /**
     * @return {?}
     */
    get nzCurrent() {
        return this._current;
    }
    /**
     * @return {?}
     */
    setDirectionClass() {
        this._stepsClassMap = {
            [`ant-steps-${this.nzDirection}`]: true,
            [`ant-steps-label-${this.nzDirection}`]: true,
            [`ant-steps-dot`]: this.nzProgressDot,
            ['ant-steps-small']: this.nzSize === 'small'
        };
    }
    /**
     * @return {?}
     */
    updateChildrenSteps() {
        setTimeout(() => {
            this.steps.toArray().forEach((step, index, arr) => {
                step._outStatus = this.nzStatus;
                step._processDot = /** @type {?} */ (this.nzProgressDot);
                step._direction = this.nzDirection;
                step.index = index;
                step._totalCount = arr.length;
                step._current = this.nzCurrent;
                step._first = index === 0;
                if (arr.length === index + 1) {
                    step._last = true;
                }
                else {
                    step._last = false;
                    step.updateLastWidth();
                }
                if (this.nzCurrent === step.index) {
                    step._status = this.nzStatus;
                }
                step.initClassMap();
            });
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setDirectionClass();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._stepsChanges) {
            this._stepsChanges.unsubscribe();
            this._stepsChanges = null;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout(() => {
            this._afterViewInit = true;
        });
        this.updateChildrenSteps();
        if (this.steps) {
            this._stepsChanges = this.steps.changes.subscribe(() => {
                this.updateChildrenSteps();
            });
        }
    }
}
NzStepsComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-steps',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-steps" [ngClass]="_stepsClassMap" [hidden]="!_afterViewInit">
      <ng-content></ng-content>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-steps {
  font-size: 0;
  line-height: 1.5;
}
.ant-steps .ant-steps-item {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner {
  border-color: rgba(0, 0, 0, 0.25);
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon {
  color: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: rgba(0, 0, 0, 0.25);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-wait .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner {
  border-color: #108ee9;
  background-color: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-title {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-description {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item.ant-steps-status-process .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner {
  border-color: #108ee9;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon {
  color: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #108ee9;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-tail > i:after {
  width: 100%;
  background: #108ee9;
  transition: all .6s;
  opacity: 1;
  box-shadow: 0 0 0 0 #108ee9;
  animation: tailEffect .4s;
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-title {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-finish .ant-steps-description {
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner {
  border-color: #f04134;
  background-color: #fff;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-head-inner > .ant-steps-icon .ant-steps-icon-dot {
  background: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-title {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-description {
  color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-status-error .ant-steps-tail > i {
  background-color: #e9e9e9;
}
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i,
.ant-steps .ant-steps-item.ant-steps-next-error .ant-steps-tail > i:after {
  background-color: #f04134;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner {
  background: none;
  border: 0;
  width: auto;
  height: auto;
}
.ant-steps .ant-steps-item.ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 26px;
  width: 26px;
  height: 26px;
}
.ant-steps .ant-steps-item.ant-steps-custom.ant-steps-status-process .ant-steps-head-inner > .ant-steps-icon {
  color: #108ee9;
}
.ant-steps .ant-steps-head,
.ant-steps .ant-steps-main {
  position: relative;
  display: inline-block;
  vertical-align: top;
}
.ant-steps .ant-steps-head {
  background: #fff;
}
.ant-steps .ant-steps-head-inner {
  display: block;
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 26px;
  height: 26px;
  line-height: 23px;
  text-align: center;
  border-radius: 26px;
  font-size: 14px;
  margin-right: 8px;
  transition: background-color 0.3s ease, border-color 0.3s ease;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei", "Helvetica Neue", Helvetica, Arial, sans-serif;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon {
  line-height: 1;
  color: #108ee9;
  position: relative;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-cross,
.ant-steps .ant-steps-head-inner > .ant-steps-icon.anticon-check {
  font-weight: bold;
}
.ant-steps .ant-steps-title {
  font-size: 14px;
  line-height: 26px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
  background-color: #fff;
  display: inline-block;
  padding-right: 10px;
}
.ant-steps .ant-steps-title > a:first-child:last-child {
  color: rgba(0, 0, 0, 0.65);
}
.ant-steps .ant-steps-item:last-child .ant-steps-title {
  padding-right: 0;
  width: 100%;
}
.ant-steps .ant-steps-item:last-child .ant-steps-tail {
  display: none;
}
.ant-steps .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps .ant-steps-tail {
  position: absolute;
  left: 0;
  width: 100%;
  top: 13px;
  padding: 0 10px;
}
.ant-steps .ant-steps-tail > i {
  display: inline-block;
  vertical-align: top;
  background: #e9e9e9;
  height: 1px;
  border-radius: 1px;
  width: 100%;
  position: relative;
}
.ant-steps .ant-steps-tail > i:after {
  position: absolute;
  content: '';
  top: 0;
  width: 0;
  background: #e9e9e9;
  height: 100%;
  opacity: 0;
}
.ant-steps.ant-steps-small .ant-steps-head-inner {
  border: 1px solid rgba(0, 0, 0, 0.25);
  width: 18px;
  height: 18px;
  line-height: 15px;
  text-align: center;
  border-radius: 18px;
  font-size: 12px;
  margin-right: 10px;
}
.ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  display: inline-block;
  font-size: 12px;
  font-size: 9px \9;
  transform: scale(0.75) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  top: 0;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  filter: none;
}
:root .ant-steps.ant-steps-small .ant-steps-head-inner > .ant-steps-icon.anticon {
  font-size: 12px;
}
.ant-steps.ant-steps-small .ant-steps-main {
  margin-top: 0;
}
.ant-steps.ant-steps-small .ant-steps-title {
  font-size: 12px;
  line-height: 18px;
  color: rgba(0, 0, 0, 0.65);
  font-weight: bold;
}
.ant-steps.ant-steps-small .ant-steps-description {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-steps.ant-steps-small .ant-steps-tail {
  top: 8px;
  padding: 0 8px;
}
.ant-steps.ant-steps-small .ant-steps-tail > i {
  height: 1px;
  border-radius: 1px;
  width: 100%;
}
.ant-steps.ant-steps-small .ant-steps-custom .ant-steps-head-inner > .ant-steps-icon {
  font-size: 18px;
  width: 18px;
  height: 18px;
}
.ant-steps-vertical > .ant-steps-item {
  display: block;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail {
  position: absolute;
  left: 13px;
  top: 0;
  height: 100%;
  width: 1px;
  padding: 30px 0 4px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i {
  height: 100%;
  width: 1px;
}
.ant-steps-vertical > .ant-steps-item > .ant-steps-tail > i:after {
  height: 0;
  width: 100%;
}
.ant-steps-vertical .ant-steps-status-finish .ant-steps-tail > i:after {
  height: 100%;
}
.ant-steps-vertical .ant-steps-head {
  float: left;
}
.ant-steps-vertical .ant-steps-head-inner {
  margin-right: 16px;
}
.ant-steps-vertical .ant-steps-main {
  min-height: 47px;
  overflow: hidden;
  display: block;
}
.ant-steps-vertical .ant-steps-main .ant-steps-title {
  line-height: 26px;
}
.ant-steps-vertical .ant-steps-main .ant-steps-description {
  padding-bottom: 12px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail {
  position: absolute;
  left: 9px;
  top: 0;
  padding: 22px 0 4px;
}
.ant-steps-vertical.ant-steps-small .ant-steps-tail > i {
  height: 100%;
}
.ant-steps-vertical.ant-steps-small .ant-steps-title {
  line-height: 18px;
}
.ant-steps-horizontal.ant-steps-hidden {
  visibility: hidden;
}
.ant-steps-horizontal .ant-steps-description {
  max-width: 120px;
}
.ant-steps-horizontal .ant-steps-item:not(:first-child) .ant-steps-head {
  padding-left: 10px;
  margin-left: -10px;
}
.ant-steps-dot .ant-steps-item .ant-steps-step {
  display: inline-block;
  text-align: center;
  width: 120px;
}
.ant-steps-dot .ant-steps-item:not(:first-child) .ant-steps-head {
  margin-left: 0;
  padding-left: 0;
}
.ant-steps-dot .ant-steps-tail {
  margin: 0 0 0 60px;
  padding: 0;
  width: 100%;
  top: 1px;
}
.ant-steps-dot .ant-steps-tail > i {
  height: 3px;
}
.ant-steps-dot .ant-steps-head {
  display: inline-block;
  padding-right: 0;
}
.ant-steps-dot .ant-steps-head-inner {
  margin: 0 auto;
  width: 5px;
  height: 5px;
  line-height: 5px;
  border: 0;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot {
  float: left;
  width: 100%;
  height: 100%;
  border-radius: 2.5px;
  position: relative;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:after {
  content: '';
  background: rgba(255, 255, 255, 0.001);
  width: 40px;
  height: 24px;
  position: absolute;
  top: -8px;
  left: -16px;
}
.ant-steps-dot .ant-steps-head-inner .ant-steps-icon-dot:hover {
  transform: scale(1.3);
}
.ant-steps-dot .ant-steps-main {
  display: block;
  margin-top: 10px;
}
.ant-steps-dot .ant-steps-main .ant-steps-title {
  padding-right: 0;
  background-color: transparent;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head {
  top: -1px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner {
  width: 7px;
  height: 7px;
  line-height: 7px;
}
.ant-steps-dot .ant-steps-status-process .ant-steps-head-inner .ant-steps-icon-dot {
  border-radius: 3.5px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail {
  left: 2px;
  height: 100%;
  padding: 0;
  top: 15px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-tail > i {
  height: 100%;
  width: 3px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-head {
  top: 12px;
  left: 1px;
}
.ant-steps-dot.ant-steps-vertical .ant-steps-status-process .ant-steps-head {
  left: 0;
}
@keyframes tailEffect {
  to {
    box-shadow: 0 0 3px 3px transparent;
  }
}
`
                ]
            },] },
];
/** @nocollapse */
NzStepsComponent.ctorParameters = () => [];
NzStepsComponent.propDecorators = {
    "steps": [{ type: ContentChildren, args: [NzStepComponent,] },],
    "nzDirection": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzProgressDot": [{ type: Input },],
    "nzStatus": [{ type: Input },],
    "nzCurrent": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzStepsModule {
}
NzStepsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                exports: [NzStepsComponent, NzStepComponent],
                declarations: [NzStepsComponent, NzStepComponent],
            },] },
];
/** @nocollapse */
NzStepsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSwitchComponent {
    constructor() {
        this._disabled = false;
        this._prefixCls = 'ant-switch';
        this._innerPrefixCls = `${this._prefixCls}-inner`;
        this._checked = false;
        // ngModel Access
        this.onChange = () => null;
        this.onTouched = () => null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSize(value) {
        this._size = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzSize() {
        return this._size;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onClick(e) {
        e.preventDefault();
        if (!this._disabled) {
            this.updateValue(!this._checked);
            this.onChange(this._checked);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (this._checked === value) {
            return;
        }
        this._checked = value;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-checked`]: this._checked,
            [`${this._prefixCls}-disabled`]: this._disabled,
            [`${this._prefixCls}-small`]: this._size === 'small'
        };
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.updateValue(value);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.nzDisabled = isDisabled;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
}
NzSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-switch',
                encapsulation: ViewEncapsulation.None,
                template: `
    <span [ngClass]="_classMap" tabindex="0">
      <span [ngClass]="_innerPrefixCls">
        <ng-template [ngIf]="_checked">
          <ng-content select="[checked]"></ng-content>
        </ng-template>
        <ng-template [ngIf]="!_checked">
          <ng-content select="[unchecked]"></ng-content>
        </ng-template>
      </span>
    </span>
  `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NzSwitchComponent),
                        multi: true
                    }
                ],
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-switch {
  position: relative;
  display: inline-block;
  box-sizing: border-box;
  height: 22px;
  min-width: 44px;
  line-height: 20px;
  vertical-align: middle;
  border-radius: 20px;
  border: 1px solid transparent;
  background-color: rgba(0, 0, 0, 0.25);
  cursor: pointer;
  transition: all 0.36s;
  user-select: none;
}
.ant-switch-inner {
  color: #fff;
  font-size: 12px;
  margin-left: 24px;
  margin-right: 6px;
  display: block;
}
.ant-switch:after {
  position: absolute;
  width: 18px;
  height: 18px;
  left: 1px;
  top: 1px;
  border-radius: 18px;
  background-color: #fff;
  content: " ";
  cursor: pointer;
  transition: all 0.36s cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-switch:active:after {
  width: 24px;
}
.ant-switch:focus {
  box-shadow: 0 0 0 2px rgba(16, 142, 233, 0.2);
  outline: 0;
}
.ant-switch:focus:hover {
  box-shadow: none;
}
.ant-switch-small {
  height: 14px;
  min-width: 28px;
  line-height: 12px;
}
.ant-switch-small .ant-switch-inner {
  margin-left: 18px;
  margin-right: 3px;
}
.ant-switch-small:after {
  width: 12px;
  height: 12px;
  top: 0;
  left: 0.5px;
}
.ant-switch-small:active:after {
  width: 16px;
}
.ant-switch-small.ant-switch-checked:after {
  left: 100%;
  margin-left: -12.5px;
}
.ant-switch-small.ant-switch-checked .ant-switch-inner {
  margin-left: 3px;
  margin-right: 18px;
}
.ant-switch-small:active.ant-switch-checked:after {
  margin-left: -16.5px;
}
.ant-switch-checked {
  background-color: #108ee9;
}
.ant-switch-checked .ant-switch-inner {
  margin-left: 6px;
  margin-right: 24px;
}
.ant-switch-checked:after {
  left: 100%;
  margin-left: -19px;
}
.ant-switch-checked:active:after {
  margin-left: -25px;
}
.ant-switch-disabled {
  cursor: not-allowed;
  background: #f4f4f4;
}
.ant-switch-disabled:after {
  background: #ccc;
  cursor: not-allowed;
}
.ant-switch-disabled .ant-switch-inner {
  color: rgba(0, 0, 0, 0.25);
}
`
                ]
            },] },
];
/** @nocollapse */
NzSwitchComponent.ctorParameters = () => [];
NzSwitchComponent.propDecorators = {
    "nzSize": [{ type: Input },],
    "nzDisabled": [{ type: Input },],
    "onClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzSwitchModule {
}
NzSwitchModule.decorators = [
    { type: NgModule, args: [{
                exports: [NzSwitchComponent],
                declarations: [NzSwitchComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzSwitchModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRowExpandIconComponent {
    constructor() {
        this._expand = false;
        this._showExpand = true;
        this.nzExpandChange = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzExpand(value) {
        this._expand = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzExpand() {
        return this._expand;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowExpand(value) {
        this._showExpand = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowExpand() {
        return this._showExpand;
    }
    /**
     * @return {?}
     */
    get hidden() {
        return !this.nzShowExpand;
    }
    /**
     * @return {?}
     */
    get expanded() {
        return this.nzShowExpand && this.nzExpand;
    }
    /**
     * @return {?}
     */
    get collapsed() {
        return this.nzShowExpand && !this.nzExpand;
    }
    /**
     * @return {?}
     */
    onClick() {
        this.nzExpand = !this.nzExpand;
        this.nzExpandChange.emit(this.nzExpand);
    }
}
NzRowExpandIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-row-expand-icon',
                template: ``,
                host: {
                    '[class.ant-table-row-expand-icon]': 'true'
                }
            },] },
];
/** @nocollapse */
NzRowExpandIconComponent.ctorParameters = () => [];
NzRowExpandIconComponent.propDecorators = {
    "nzExpandChange": [{ type: Output },],
    "nzExpand": [{ type: Input },],
    "nzShowExpand": [{ type: Input },],
    "hidden": [{ type: HostBinding, args: ['class.ant-table-row-spaced',] },],
    "expanded": [{ type: HostBinding, args: [`class.ant-table-row-expanded`,] },],
    "collapsed": [{ type: HostBinding, args: [`class.ant-table-row-collapsed`,] },],
    "onClick": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzRowIndentComponent {
    /**
     * @return {?}
     */
    get paddingLeft() {
        return this.nzIndentSize * 20;
    }
}
NzRowIndentComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-row-indent',
                template: ``,
                host: {
                    '[class.ant-table-row-indent]': 'true'
                }
            },] },
];
/** @nocollapse */
NzRowIndentComponent.ctorParameters = () => [];
NzRowIndentComponent.propDecorators = {
    "nzIndentSize": [{ type: Input },],
    "paddingLeft": [{ type: HostBinding, args: [`style.paddingLeft.px`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTableDividerDirective {
}
NzTableDividerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-table-divider]',
                host: {
                    '[class.ant-divider]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTableDividerDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTableFilterComponent {
    /**
     * @param {?} nzDropDownComponent
     */
    constructor(nzDropDownComponent) {
        this.nzDropDownComponent = nzDropDownComponent;
    }
    /**
     * @return {?}
     */
    hideDropDown() {
        this.nzDropDownComponent.nzVisible = false;
        this.nzDropDownComponent._hide();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nzDropDownComponent.hasFilterButton = true;
        this.nzDropDownComponent.nzClickHide = false;
    }
}
NzTableFilterComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-table-filter]',
                template: `
    <a class="ant-table-filter-dropdown-link confirm" (click)="hideDropDown()">
      <ng-content select="[nz-table-filter-confirm]"></ng-content>
    </a>
    <a class="ant-table-filter-dropdown-link clear" (click)="hideDropDown()">
      <ng-content select="[nz-table-filter-clear]"></ng-content>
    </a>
  `,
                host: {
                    '[class.ant-table-filter-dropdown-btns]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTableFilterComponent.ctorParameters = () => [
    { type: NzDropDownComponent, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzThDirective {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._checkbox = false;
        this._expand = false;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCheckbox(value) {
        this._checkbox = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCheckbox() {
        return this._checkbox;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzExpand(value) {
        this._expand = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzExpand() {
        return this._expand;
    }
}
NzThDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-th]'
            },] },
];
/** @nocollapse */
NzThDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzThDirective.propDecorators = {
    "nzWidth": [{ type: Input },],
    "nzCheckbox": [{ type: Input }, { type: HostBinding, args: [`class.ant-table-selection-column`,] },],
    "nzExpand": [{ type: Input }, { type: HostBinding, args: [`class.ant-table-expand-icon-th`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTableSortComponent {
    /**
     * @param {?} nzThDirective
     * @param {?} _renderer
     */
    constructor(nzThDirective, _renderer) {
        this.nzThDirective = nzThDirective;
        this._renderer = _renderer;
        this._value = null;
        this.nzValueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get nzValue() {
        return this._value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzValue(value) {
        this._value = value;
        if (this.nzThDirective) {
            if ((this._value !== 'ascend') && (this._value !== 'descend')) {
                this._renderer.removeClass(this.nzThDirective._el, 'ant-table-column-sort');
            }
            else {
                this._renderer.addClass(this.nzThDirective._el, 'ant-table-column-sort');
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _setValue(value) {
        if (this.nzValue === value) {
            this.nzValue = null;
        }
        else {
            this.nzValue = value;
        }
        this.nzValueChange.emit(this.nzValue);
    }
}
NzTableSortComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-table-sort',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="ant-table-column-sorter">
      <span class="ant-table-column-sorter-up" [ngClass]="{'on':_value == 'ascend'}" title="↑" (click)="_setValue('ascend')">
        <i class="anticon anticon-caret-up"></i>
      </span>
      <span class="ant-table-column-sorter-down" [ngClass]="{'on':_value == 'descend'}" title="↓" (click)="_setValue('descend')">
        <i class="anticon anticon-caret-down"></i>
      </span>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-table-wrapper {
  zoom: 1;
}
.ant-table-wrapper:before,
.ant-table-wrapper:after {
  content: " ";
  display: table;
}
.ant-table-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-table {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  overflow: hidden;
  position: relative;
  border-radius: 4px 4px 0 0;
}
.ant-table-body {
  transition: opacity 0.3s ease;
}
.ant-table table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  text-align: left;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-thead > tr > th {
  background: #f7f7f7;
  font-weight: 500;
  transition: background .3s ease;
  text-align: left;
  color: rgba(0, 0, 0, 0.85);
}
.ant-table-thead > tr > th[colspan] {
  text-align: center;
}
.ant-table-thead > tr > th .anticon-filter,
.ant-table-thead > tr > th .ant-table-filter-icon {
  position: relative;
  margin-left: 4px;
  font-size: 12px;
  cursor: pointer;
  color: #999;
  transition: all .3s;
  width: 14px;
}
.ant-table-thead > tr > th .anticon-filter:hover,
.ant-table-thead > tr > th .ant-table-filter-icon:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-thead > tr > th .anticon-filter:after,
.ant-table-thead > tr > th .ant-table-filter-icon:after {
  content: '';
  position: absolute;
  width: 14px;
  height: 50px;
  left: 0;
  top: -19px;
}
.ant-table-thead > tr > th .ant-table-filter-selected.anticon-filter {
  color: #108ee9;
}
.ant-table-tbody > tr > td {
  border-bottom: 1px solid #e9e9e9;
  transition: all .3s;
}
.ant-table-thead > tr,
.ant-table-tbody > tr {
  transition: all .3s;
}
.ant-table-thead > tr.ant-table-row-hover > td,
.ant-table-tbody > tr.ant-table-row-hover > td,
.ant-table-thead > tr:hover > td,
.ant-table-tbody > tr:hover > td {
  background: #ecf6fd;
}
.ant-table-thead > tr:hover {
  background: none;
}
.ant-table-footer {
  padding: 16px 8px;
  background: #f7f7f7;
  border-radius: 0 0 4px 4px;
  position: relative;
}
.ant-table-footer:before {
  content: '';
  height: 1px;
  background: #f7f7f7;
  position: absolute;
  top: -1px;
  width: 100%;
  left: 0;
}
.ant-table.ant-table-bordered .ant-table-footer {
  border: 1px solid #e9e9e9;
}
.ant-table-title {
  padding: 16px 0;
  position: relative;
  top: 1px;
  border-radius: 4px 4px 0 0;
}
.ant-table.ant-table-bordered .ant-table-title {
  border: 1px solid #e9e9e9;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-table-title + .ant-table-content {
  position: relative;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-bordered .ant-table-title + .ant-table-content,
.ant-table-bordered .ant-table-title + .ant-table-content table {
  border-radius: 0;
}
.ant-table-without-column-header .ant-table-title + .ant-table-content,
.ant-table-without-column-header table {
  border-radius: 0;
}
.ant-table-tbody > tr.ant-table-row-selected {
  background: #fafafa;
}
.ant-table-thead > tr > th.ant-table-column-sort {
  background: #eee;
}
.ant-table-thead > tr > th,
.ant-table-tbody > tr > td {
  padding: 16px 8px;
  word-break: break-all;
}
.ant-table-thead > tr > th.ant-table-selection-column-custom {
  padding-left: 16px;
  padding-right: 0;
}
.ant-table-thead > tr > th.ant-table-selection-column,
.ant-table-tbody > tr > td.ant-table-selection-column {
  text-align: center;
  min-width: 62px;
  width: 62px;
}
.ant-table-thead > tr > th.ant-table-selection-column .ant-radio-wrapper,
.ant-table-tbody > tr > td.ant-table-selection-column .ant-radio-wrapper {
  margin-right: 0;
}
.ant-table-expand-icon-th,
.ant-table-row-expand-icon-cell {
  text-align: center;
  min-width: 50px;
  width: 50px;
}
.ant-table-header {
  background: #f7f7f7;
  overflow: hidden;
}
.ant-table-header table {
  border-radius: 4px 4px 0 0;
}
.ant-table-loading {
  position: relative;
}
.ant-table-loading .ant-table-body {
  background: #fff;
  opacity: 0.5;
}
.ant-table-loading .ant-table-spin-holder {
  height: 20px;
  line-height: 20px;
  left: 50%;
  top: 50%;
  margin-left: -30px;
  position: absolute;
}
.ant-table-loading .ant-table-with-pagination {
  margin-top: -20px;
}
.ant-table-loading .ant-table-without-pagination {
  margin-top: 10px;
}
.ant-table-middle .ant-table-thead > tr > th,
.ant-table-middle .ant-table-tbody > tr > td {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-title,
.ant-table-middle .ant-table-footer {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-column-sorter-up:after {
  top: -13px;
  height: 13px;
}
.ant-table-middle .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-middle .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-middle .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 38px;
  top: -13px;
}
.ant-table-small {
  border: 1px solid #e9e9e9;
  border-radius: 4px;
}
.ant-table-small .ant-table-header > table,
.ant-table-small .ant-table-body > table {
  border: 0;
  padding: 0 8px;
}
.ant-table-small .ant-table-thead > tr > th {
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-small .ant-table-tbody > tr > td {
  padding: 6px 8px;
}
.ant-table-small .ant-table-title,
.ant-table-small .ant-table-footer,
.ant-table-small .ant-table-thead > tr > th {
  padding: 10px 8px;
}
.ant-table-small .ant-table-title {
  border-bottom: 1px solid #e9e9e9;
  top: 0;
}
.ant-table-small .ant-table-header {
  background: #fff;
}
.ant-table-small .ant-table-placeholder,
.ant-table-small .ant-table-row:last-child td {
  border-bottom: 0;
}
.ant-table-small .ant-table-column-sorter-up:after {
  top: -14px;
  height: 13px;
}
.ant-table-small .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-small .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-small .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 39px;
  top: -14px;
}
.ant-table-column-sorter {
  position: relative;
  margin-left: 4px;
  display: inline-block;
  width: 14px;
  vertical-align: middle;
  text-align: center;
}
.ant-table-column-sorter-up,
.ant-table-column-sorter-down {
  line-height: 4px;
  display: block;
  width: 14px;
  height: 6px;
  cursor: pointer;
}
.ant-table-column-sorter-up:hover .anticon,
.ant-table-column-sorter-down:hover .anticon {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-column-sorter-up.on .anticon-caret-up,
.ant-table-column-sorter-down.on .anticon-caret-up,
.ant-table-column-sorter-up.on .anticon-caret-down,
.ant-table-column-sorter-down.on .anticon-caret-down {
  color: #108ee9;
}
.ant-table-column-sorter-up:after,
.ant-table-column-sorter-down:after {
  position: absolute;
  content: '';
  height: 20px;
  width: 14px;
  left: 0;
}
.ant-table-column-sorter-up:after {
  top: -19px;
}
.ant-table-column-sorter-down:after {
  bottom: -17px;
}
.ant-table-column-sorter .anticon-caret-up,
.ant-table-column-sorter .anticon-caret-down {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  line-height: 4px;
  height: 4px;
  color: #999;
  transition: all .3s;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  filter: none;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  font-size: 12px;
}
.ant-table-bordered .ant-table-header > table,
.ant-table-bordered .ant-table-body > table,
.ant-table-bordered .ant-table-fixed-left table,
.ant-table-bordered .ant-table-fixed-right table {
  border: 1px solid #e9e9e9;
  border-right: 0;
  border-bottom: 0;
}
.ant-table-bordered.ant-table-empty .ant-table-placeholder {
  border-left: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-header > table {
  border-bottom: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body > table {
  border-top: 0;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body-inner > table {
  border-top: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-placeholder {
  border: 0;
}
.ant-table-bordered .ant-table-thead > tr > th {
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-bordered .ant-table-thead > tr > th,
.ant-table-bordered .ant-table-tbody > tr > td {
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small {
  border-right: 0;
}
.ant-table-bordered.ant-table-small .ant-table-header > table,
.ant-table-bordered.ant-table-small .ant-table-body > table,
.ant-table-bordered.ant-table-small .ant-table-fixed-left table,
.ant-table-bordered.ant-table-small .ant-table-fixed-right table {
  border: 0;
  padding: 0;
}
.ant-table-bordered.ant-table-small .ant-table-title {
  border: 0;
  border-bottom: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer {
  border: 0;
  border-top: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer:before {
  display: none;
}
.ant-table-bordered.ant-table-small .ant-table-placeholder {
  border-left: 0;
  border-bottom: 0;
}
.ant-table-placeholder {
  position: relative;
  padding: 16px 8px;
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
  text-align: center;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  z-index: 1;
}
.ant-table-placeholder .anticon {
  margin-right: 4px;
}
.ant-table-pagination.ant-pagination {
  margin: 16px 0;
  float: right;
}
.ant-table-filter-dropdown {
  min-width: 96px;
  margin-left: -8px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu {
  border: 0;
  box-shadow: none;
  border-radius: 4px 4px 0 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-without-submenu {
  max-height: 400px;
  overflow-x: hidden;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item > label + span {
  padding-right: 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-sub {
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu .ant-dropdown-submenu-contain-selected .ant-dropdown-menu-submenu-title:after {
  color: #108ee9;
  font-weight: bold;
  text-shadow: 0 0 2px #d2eafb;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item {
  overflow: hidden;
}
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-item:last-child,
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0;
}
.ant-table-filter-dropdown-btns {
  overflow: hidden;
  padding: 7px 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-table-filter-dropdown-link {
  color: #108ee9;
}
.ant-table-filter-dropdown-link:hover {
  color: #49a9ee;
}
.ant-table-filter-dropdown-link:active {
  color: #0e77ca;
}
.ant-table-filter-dropdown-link.confirm {
  float: left;
}
.ant-table-filter-dropdown-link.clear {
  float: right;
}
.ant-table-selection-select-all-custom {
  margin-right: 4px !important;
}
.ant-table-selection .anticon-down {
  color: #999;
  transition: all .3s;
}
.ant-table-selection-menu {
  min-width: 96px;
  margin-top: 5px;
  margin-left: -30px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-selection-menu .ant-action-down {
  color: #999;
}
.ant-table-selection-down {
  cursor: pointer;
  padding: 0;
  display: inline-block;
  line-height: 1;
}
.ant-table-selection-down:hover .anticon-down {
  color: #666;
}
.ant-table-row-expand-icon {
  cursor: pointer;
  display: inline-block;
  width: 17px;
  height: 17px;
  text-align: center;
  line-height: 14px;
  border: 1px solid #e9e9e9;
  user-select: none;
  background: #fff;
}
.ant-table-row-expanded:after {
  content: '-';
}
.ant-table-row-collapsed:after {
  content: '+';
}
.ant-table-row-spaced {
  visibility: hidden;
}
.ant-table-row-spaced:after {
  content: '.';
}
.ant-table-row[class*="ant-table-row-level-0"] .ant-table-selection-column > span {
  display: inline-block;
}
tr.ant-table-expanded-row,
tr.ant-table-expanded-row:hover {
  background: #fbfbfb;
}
.ant-table .ant-table-row-indent + .ant-table-row-expand-icon {
  margin-right: 8px;
}
.ant-table-scroll {
  overflow: auto;
  overflow-x: hidden;
}
.ant-table-scroll table {
  width: auto;
  min-width: 100%;
}
.ant-table-body-inner {
  height: 100%;
}
.ant-table-fixed-header > .ant-table-content > .ant-table-scroll > .ant-table-body {
  position: relative;
  background: #fff;
}
.ant-table-fixed-header .ant-table-body-inner {
  overflow: scroll;
}
.ant-table-fixed-header .ant-table-scroll .ant-table-header {
  overflow: scroll;
  padding-bottom: 20px;
  margin-bottom: -20px;
}
.ant-table-fixed-left,
.ant-table-fixed-right {
  position: absolute;
  top: 0;
  overflow: hidden;
  transition: box-shadow 0.3s ease;
  border-radius: 0;
}
.ant-table-fixed-left table,
.ant-table-fixed-right table {
  width: auto;
  background: #fff;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-outer .ant-table-fixed,
.ant-table-fixed-header .ant-table-fixed-right .ant-table-body-outer .ant-table-fixed {
  border-radius: 0;
}
.ant-table-fixed-left {
  left: 0;
  box-shadow: 6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-left .ant-table-header {
  overflow-y: hidden;
}
.ant-table-fixed-left .ant-table-body-inner {
  margin-right: -20px;
  padding-right: 20px;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-inner {
  padding-right: 0;
}
.ant-table-fixed-left,
.ant-table-fixed-left table {
  border-radius: 4px 0 0 0;
}
.ant-table-fixed-right {
  right: 0;
  box-shadow: -6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-right,
.ant-table-fixed-right table {
  border-radius: 0 4px 0 0;
}
.ant-table-fixed-right .ant-table-expanded-row {
  color: transparent;
  pointer-events: none;
}
.ant-table.ant-table-scroll-position-left .ant-table-fixed-left {
  box-shadow: none;
}
.ant-table.ant-table-scroll-position-right .ant-table-fixed-right {
  box-shadow: none;
}
`
                ]
            },] },
];
/** @nocollapse */
NzTableSortComponent.ctorParameters = () => [
    { type: NzThDirective, decorators: [{ type: Host }, { type: Optional },] },
    { type: Renderer2, },
];
NzTableSortComponent.propDecorators = {
    "nzValueChange": [{ type: Output },],
    "nzValue": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
let scrollbarWidth;
// Measure scrollbar width for padding body during modal show/hide
const scrollbarMeasure = {
    position: 'absolute',
    top: '-9999px',
    width: '50px',
    height: '50px',
    overflow: 'scroll',
};
/**
 * @return {?}
 */
function measureScrollbar() {
    if (typeof document === 'undefined' || typeof window === 'undefined') {
        return 0;
    }
    if (scrollbarWidth) {
        return scrollbarWidth;
    }
    const /** @type {?} */ scrollDiv = document.createElement('div');
    for (const /** @type {?} */ scrollProp in scrollbarMeasure) {
        if (scrollbarMeasure.hasOwnProperty(scrollProp)) {
            scrollDiv.style[scrollProp] = scrollbarMeasure[scrollProp];
        }
    }
    document.body.appendChild(scrollDiv);
    const /** @type {?} */ width = scrollDiv.offsetWidth - scrollDiv.clientWidth;
    document.body.removeChild(scrollDiv);
    scrollbarWidth = width;
    return scrollbarWidth;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTableComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _cd
     */
    constructor(_elementRef, _cd) {
        this._elementRef = _elementRef;
        this._cd = _cd;
        this._bordered = false;
        this._customNoResult = false;
        this._isPageIndexReset = true;
        this._isPagination = true;
        this._loading = false;
        this._showSizeChanger = false;
        this._showQuickJumper = false;
        this._showTotal = false;
        this._showFooter = false;
        this._showTitle = false;
        /**
         * public data for ngFor tr
         */
        this.data = [];
        this._current = 1;
        this._pageSize = 10;
        /* tslint:disable-next-line:no-any */
        this._dataSet = [];
        this._isInit = false;
        this._isAjax = false;
        this.ths = [];
        this.nzPageSizeChange = new EventEmitter();
        this.nzPageIndexChange = new EventEmitter();
        /* tslint:disable-next-line:no-any */
        this.nzDataChange = new EventEmitter();
        this.nzPageIndexChangeClick = new EventEmitter();
        /**
         * page size changer select values
         */
        this.nzPageSizeSelectorValues = [10, 20, 30, 40, 50];
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzBordered(value) {
        this._bordered = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzBordered() {
        return this._bordered;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCustomNoResult(value) {
        this._customNoResult = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCustomNoResult() {
        return this._customNoResult;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIsPagination(value) {
        this._isPagination = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIsPagination() {
        return this._isPagination;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzLoading(value) {
        this._loading = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzLoading() {
        return this._loading;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowSizeChanger(value) {
        this._showSizeChanger = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowSizeChanger() {
        return this._showSizeChanger;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowQuickJumper(value) {
        this._showQuickJumper = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowQuickJumper() {
        return this._showQuickJumper;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowTotal(value) {
        this._showTotal = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowTotal() {
        return this._showTotal;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowFooter(value) {
        this._showFooter = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowFooter() {
        return this._showFooter;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowTitle(value) {
        this._showTitle = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowTitle() {
        return this._showTitle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzIsPageIndexReset(value) {
        this._isPageIndexReset = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzIsPageIndexReset() {
        return this._isPageIndexReset;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set setThs(value) {
        this.ths = value.toArray();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzScroll(value) {
        this._scroll = value;
        this._cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get nzScroll() {
        return this._scroll;
    }
    /**
     * async data
     * @param {?} data
     * @return {?}
     */
    /* tslint:disable-next-line:no-any */
    set nzAjaxData(data) {
        this._isAjax = true;
        this.data = data;
    }
    /**
     * @return {?}
     */
    get nzAjaxData() {
        return this.data;
    }
    /**
     * sync data
     * @param {?} value
     * @return {?}
     */
    /* tslint:disable-next-line:no-any */
    set nzDataSource(value) {
        this._dataSet = value;
        this.nzTotal = this._dataSet.length;
        this._generateData(true);
    }
    /**
     * @return {?}
     */
    get nzDataSource() {
        return this._dataSet;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageIndex(value) {
        if (this._current === value) {
            return;
        }
        this._current = value;
        this._generateData();
        this.nzPageIndexChange.emit(this.nzPageIndex);
    }
    /**
     * @return {?}
     */
    get nzPageIndex() {
        return this._current;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    pageChangeClick(value) {
        this.nzPageIndexChangeClick.emit(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPageSize(value) {
        if (this._pageSize === value) {
            return;
        }
        this._pageSize = value;
        this._generateData();
        if (this._isInit) {
            this.nzPageSizeChange.emit(value);
        }
    }
    /**
     * @return {?}
     */
    get nzPageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTotal(value) {
        if (this._total === value) {
            return;
        }
        this._total = value;
    }
    /**
     * @return {?}
     */
    get nzTotal() {
        return this._total;
    }
    /**
     * @param {?=} forceRefresh
     * @return {?}
     */
    _generateData(forceRefresh = false) {
        if (!this._isAjax) {
            if (this.nzIsPagination) {
                if (forceRefresh) {
                    if (this.nzIsPageIndexReset) {
                        this.nzPageIndex = 1;
                    }
                    else {
                        const /** @type {?} */ maxPageIndex = Math.ceil(this._dataSet.length / this.nzPageSize);
                        this.nzPageIndex = !this.nzPageIndex ? 1 : (this.nzPageIndex > maxPageIndex ? maxPageIndex : this.nzPageIndex);
                    }
                }
                this.data = this._dataSet.slice((this.nzPageIndex - 1) * this.nzPageSize, this.nzPageIndex * this.nzPageSize);
            }
            else {
                this.data = this._dataSet;
            }
            this.nzDataChange.emit(this.data);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ scrollbarWidth = measureScrollbar();
        this._headerBottomStyle = {
            marginBottom: `-${scrollbarWidth}px`,
            paddingBottom: `0px`
        };
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._isInit = true;
    }
}
NzTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-table',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div
      class="ant-table-wrapper"
      [class.ant-table-empty]="data.length==0">
      <nz-spin [nzSpinning]="nzLoading">
        <div>
          <div
            class="ant-table"
            [class.ant-table-fixed-header]="nzScroll"
            [class.ant-table-scroll-position-left]="nzScroll"
            [class.ant-table-bordered]="nzBordered"
            [class.ant-table-large]="(nzSize!=='middle')&&(nzSize!=='small')"
            [class.ant-table-middle]="nzSize=='middle'"
            [class.ant-table-small]="nzSize=='small'">
            <div class="ant-table-title" *ngIf="nzShowTitle">
              <ng-content select="[nz-table-title]"></ng-content>
            </div>
            <div class="ant-table-content">
              <div [class.ant-table-scroll]="nzScroll">
                <div class="ant-table-header" [ngStyle]="_headerBottomStyle" *ngIf="nzScroll">
                  <table>
                    <colgroup>
                      <col *ngFor="let th of ths" [style.width]="th.nzWidth" [style.minWidth]="th.nzWidth">
                    </colgroup>
                    <ng-template [ngTemplateOutlet]="fixedHeader"></ng-template>
                  </table>
                </div>
                <div class="ant-table-body" [style.maxHeight.px]="nzScroll?.y" [style.overflowY]="nzScroll?.y?'scroll':''">
                  <table>
                    <colgroup>
                      <col [style.width]="th.nzWidth" [style.minWidth]="th.nzWidth" *ngFor="let th of ths">
                    </colgroup>
                    <ng-content></ng-content>
                  </table>
                </div>
                <div class="ant-table-placeholder" *ngIf="data.length==0 && !nzCustomNoResult">
                  <span>{{ 'Table.emptyText' | nzTranslate }}</span>
                </div>
                <div class="ant-table-placeholder" *ngIf="data.length==0 && nzCustomNoResult">
                  <ng-content select="[noResult]"></ng-content>
                </div>
                <div class="ant-table-footer" *ngIf="nzShowFooter">
                  <ng-content select="[nz-table-footer]"></ng-content>
                </div>
              </div>
            </div>
          </div>
        </div>
        <nz-pagination
          *ngIf="nzIsPagination&&data.length"
          [nzInTable]="true"
          [nzShowSizeChanger]="nzShowSizeChanger"
          [nzPageSizeSelectorValues]="nzPageSizeSelectorValues"
          [nzShowQuickJumper]="nzShowQuickJumper"
          [nzShowTotal]="nzShowTotal"
          [nzSize]="(nzSize=='middle'||nzSize=='small')?'small':''"
          [(nzPageSize)]="nzPageSize"
          [nzTotal]="nzTotal"
          [(nzPageIndex)]="nzPageIndex"
          (nzPageIndexClickChange)="pageChangeClick($event)">
        </nz-pagination>
      </nz-spin>
    </div>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-table-wrapper {
  zoom: 1;
}
.ant-table-wrapper:before,
.ant-table-wrapper:after {
  content: " ";
  display: table;
}
.ant-table-wrapper:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-table {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.65);
  overflow: hidden;
  position: relative;
  border-radius: 4px 4px 0 0;
}
.ant-table-body {
  transition: opacity 0.3s ease;
}
.ant-table table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  text-align: left;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-thead > tr > th {
  background: #f7f7f7;
  font-weight: 500;
  transition: background .3s ease;
  text-align: left;
  color: rgba(0, 0, 0, 0.85);
}
.ant-table-thead > tr > th[colspan] {
  text-align: center;
}
.ant-table-thead > tr > th .anticon-filter,
.ant-table-thead > tr > th .ant-table-filter-icon {
  position: relative;
  margin-left: 4px;
  font-size: 12px;
  cursor: pointer;
  color: #999;
  transition: all .3s;
  width: 14px;
}
.ant-table-thead > tr > th .anticon-filter:hover,
.ant-table-thead > tr > th .ant-table-filter-icon:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-thead > tr > th .anticon-filter:after,
.ant-table-thead > tr > th .ant-table-filter-icon:after {
  content: '';
  position: absolute;
  width: 14px;
  height: 50px;
  left: 0;
  top: -19px;
}
.ant-table-thead > tr > th .ant-table-filter-selected.anticon-filter {
  color: #108ee9;
}
.ant-table-tbody > tr > td {
  border-bottom: 1px solid #e9e9e9;
  transition: all .3s;
}
.ant-table-thead > tr,
.ant-table-tbody > tr {
  transition: all .3s;
}
.ant-table-thead > tr.ant-table-row-hover > td,
.ant-table-tbody > tr.ant-table-row-hover > td,
.ant-table-thead > tr:hover > td,
.ant-table-tbody > tr:hover > td {
  background: #ecf6fd;
}
.ant-table-thead > tr:hover {
  background: none;
}
.ant-table-footer {
  padding: 16px 8px;
  background: #f7f7f7;
  border-radius: 0 0 4px 4px;
  position: relative;
}
.ant-table-footer:before {
  content: '';
  height: 1px;
  background: #f7f7f7;
  position: absolute;
  top: -1px;
  width: 100%;
  left: 0;
}
.ant-table.ant-table-bordered .ant-table-footer {
  border: 1px solid #e9e9e9;
}
.ant-table-title {
  padding: 16px 0;
  position: relative;
  top: 1px;
  border-radius: 4px 4px 0 0;
}
.ant-table.ant-table-bordered .ant-table-title {
  border: 1px solid #e9e9e9;
  padding-left: 8px;
  padding-right: 8px;
}
.ant-table-title + .ant-table-content {
  position: relative;
  border-radius: 4px 4px 0 0;
  overflow: hidden;
}
.ant-table-bordered .ant-table-title + .ant-table-content,
.ant-table-bordered .ant-table-title + .ant-table-content table {
  border-radius: 0;
}
.ant-table-without-column-header .ant-table-title + .ant-table-content,
.ant-table-without-column-header table {
  border-radius: 0;
}
.ant-table-tbody > tr.ant-table-row-selected {
  background: #fafafa;
}
.ant-table-thead > tr > th.ant-table-column-sort {
  background: #eee;
}
.ant-table-thead > tr > th,
.ant-table-tbody > tr > td {
  padding: 16px 8px;
  word-break: break-all;
}
.ant-table-thead > tr > th.ant-table-selection-column-custom {
  padding-left: 16px;
  padding-right: 0;
}
.ant-table-thead > tr > th.ant-table-selection-column,
.ant-table-tbody > tr > td.ant-table-selection-column {
  text-align: center;
  min-width: 62px;
  width: 62px;
}
.ant-table-thead > tr > th.ant-table-selection-column .ant-radio-wrapper,
.ant-table-tbody > tr > td.ant-table-selection-column .ant-radio-wrapper {
  margin-right: 0;
}
.ant-table-expand-icon-th,
.ant-table-row-expand-icon-cell {
  text-align: center;
  min-width: 50px;
  width: 50px;
}
.ant-table-header {
  background: #f7f7f7;
  overflow: hidden;
}
.ant-table-header table {
  border-radius: 4px 4px 0 0;
}
.ant-table-loading {
  position: relative;
}
.ant-table-loading .ant-table-body {
  background: #fff;
  opacity: 0.5;
}
.ant-table-loading .ant-table-spin-holder {
  height: 20px;
  line-height: 20px;
  left: 50%;
  top: 50%;
  margin-left: -30px;
  position: absolute;
}
.ant-table-loading .ant-table-with-pagination {
  margin-top: -20px;
}
.ant-table-loading .ant-table-without-pagination {
  margin-top: 10px;
}
.ant-table-middle .ant-table-thead > tr > th,
.ant-table-middle .ant-table-tbody > tr > td {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-title,
.ant-table-middle .ant-table-footer {
  padding: 10px 8px;
}
.ant-table-middle .ant-table-column-sorter-up:after {
  top: -13px;
  height: 13px;
}
.ant-table-middle .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-middle .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-middle .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 38px;
  top: -13px;
}
.ant-table-small {
  border: 1px solid #e9e9e9;
  border-radius: 4px;
}
.ant-table-small .ant-table-header > table,
.ant-table-small .ant-table-body > table {
  border: 0;
  padding: 0 8px;
}
.ant-table-small .ant-table-thead > tr > th {
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-small .ant-table-tbody > tr > td {
  padding: 6px 8px;
}
.ant-table-small .ant-table-title,
.ant-table-small .ant-table-footer,
.ant-table-small .ant-table-thead > tr > th {
  padding: 10px 8px;
}
.ant-table-small .ant-table-title {
  border-bottom: 1px solid #e9e9e9;
  top: 0;
}
.ant-table-small .ant-table-header {
  background: #fff;
}
.ant-table-small .ant-table-placeholder,
.ant-table-small .ant-table-row:last-child td {
  border-bottom: 0;
}
.ant-table-small .ant-table-column-sorter-up:after {
  top: -14px;
  height: 13px;
}
.ant-table-small .ant-table-column-sorter-down:after {
  bottom: -11px;
  height: 13px;
}
.ant-table-small .ant-table-thead > tr > th .anticon-filter:after,
.ant-table-small .ant-table-thead > tr > th .ant-table-filter-icon:after {
  height: 39px;
  top: -14px;
}
.ant-table-column-sorter {
  position: relative;
  margin-left: 4px;
  display: inline-block;
  width: 14px;
  vertical-align: middle;
  text-align: center;
}
.ant-table-column-sorter-up,
.ant-table-column-sorter-down {
  line-height: 4px;
  display: block;
  width: 14px;
  height: 6px;
  cursor: pointer;
}
.ant-table-column-sorter-up:hover .anticon,
.ant-table-column-sorter-down:hover .anticon {
  color: rgba(0, 0, 0, 0.65);
}
.ant-table-column-sorter-up.on .anticon-caret-up,
.ant-table-column-sorter-down.on .anticon-caret-up,
.ant-table-column-sorter-up.on .anticon-caret-down,
.ant-table-column-sorter-down.on .anticon-caret-down {
  color: #108ee9;
}
.ant-table-column-sorter-up:after,
.ant-table-column-sorter-down:after {
  position: absolute;
  content: '';
  height: 20px;
  width: 14px;
  left: 0;
}
.ant-table-column-sorter-up:after {
  top: -19px;
}
.ant-table-column-sorter-down:after {
  bottom: -17px;
}
.ant-table-column-sorter .anticon-caret-up,
.ant-table-column-sorter .anticon-caret-down {
  display: inline-block;
  font-size: 12px;
  font-size: 8px \9;
  transform: scale(0.66666667) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  line-height: 4px;
  height: 4px;
  color: #999;
  transition: all .3s;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  filter: none;
}
:root .ant-table-column-sorter .anticon-caret-up,
:root .ant-table-column-sorter .anticon-caret-down {
  font-size: 12px;
}
.ant-table-bordered .ant-table-header > table,
.ant-table-bordered .ant-table-body > table,
.ant-table-bordered .ant-table-fixed-left table,
.ant-table-bordered .ant-table-fixed-right table {
  border: 1px solid #e9e9e9;
  border-right: 0;
  border-bottom: 0;
}
.ant-table-bordered.ant-table-empty .ant-table-placeholder {
  border-left: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-header > table {
  border-bottom: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body > table {
  border-top: 0;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-body-inner > table {
  border-top: 0;
}
.ant-table-bordered.ant-table-fixed-header .ant-table-placeholder {
  border: 0;
}
.ant-table-bordered .ant-table-thead > tr > th {
  border-bottom: 1px solid #e9e9e9;
}
.ant-table-bordered .ant-table-thead > tr > th,
.ant-table-bordered .ant-table-tbody > tr > td {
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small {
  border-right: 0;
}
.ant-table-bordered.ant-table-small .ant-table-header > table,
.ant-table-bordered.ant-table-small .ant-table-body > table,
.ant-table-bordered.ant-table-small .ant-table-fixed-left table,
.ant-table-bordered.ant-table-small .ant-table-fixed-right table {
  border: 0;
  padding: 0;
}
.ant-table-bordered.ant-table-small .ant-table-title {
  border: 0;
  border-bottom: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer {
  border: 0;
  border-top: 1px solid #e9e9e9;
  border-right: 1px solid #e9e9e9;
}
.ant-table-bordered.ant-table-small .ant-table-footer:before {
  display: none;
}
.ant-table-bordered.ant-table-small .ant-table-placeholder {
  border-left: 0;
  border-bottom: 0;
}
.ant-table-placeholder {
  position: relative;
  padding: 16px 8px;
  background: #fff;
  border-bottom: 1px solid #e9e9e9;
  text-align: center;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  z-index: 1;
}
.ant-table-placeholder .anticon {
  margin-right: 4px;
}
.ant-table-pagination.ant-pagination {
  margin: 16px 0;
  float: right;
}
.ant-table-filter-dropdown {
  min-width: 96px;
  margin-left: -8px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu {
  border: 0;
  box-shadow: none;
  border-radius: 4px 4px 0 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-without-submenu {
  max-height: 400px;
  overflow-x: hidden;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item > label + span {
  padding-right: 0;
}
.ant-table-filter-dropdown .ant-dropdown-menu-sub {
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-filter-dropdown .ant-dropdown-menu .ant-dropdown-submenu-contain-selected .ant-dropdown-menu-submenu-title:after {
  color: #108ee9;
  font-weight: bold;
  text-shadow: 0 0 2px #d2eafb;
}
.ant-table-filter-dropdown .ant-dropdown-menu-item {
  overflow: hidden;
}
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-item:last-child,
.ant-table-filter-dropdown > .ant-dropdown-menu > .ant-dropdown-menu-submenu:last-child .ant-dropdown-menu-submenu-title {
  border-radius: 0;
}
.ant-table-filter-dropdown-btns {
  overflow: hidden;
  padding: 7px 8px;
  border-top: 1px solid #e9e9e9;
}
.ant-table-filter-dropdown-link {
  color: #108ee9;
}
.ant-table-filter-dropdown-link:hover {
  color: #49a9ee;
}
.ant-table-filter-dropdown-link:active {
  color: #0e77ca;
}
.ant-table-filter-dropdown-link.confirm {
  float: left;
}
.ant-table-filter-dropdown-link.clear {
  float: right;
}
.ant-table-selection-select-all-custom {
  margin-right: 4px !important;
}
.ant-table-selection .anticon-down {
  color: #999;
  transition: all .3s;
}
.ant-table-selection-menu {
  min-width: 96px;
  margin-top: 5px;
  margin-left: -30px;
  background: #fff;
  border-radius: 4px;
  box-shadow: 0 1px 6px rgba(0, 0, 0, 0.2);
}
.ant-table-selection-menu .ant-action-down {
  color: #999;
}
.ant-table-selection-down {
  cursor: pointer;
  padding: 0;
  display: inline-block;
  line-height: 1;
}
.ant-table-selection-down:hover .anticon-down {
  color: #666;
}
.ant-table-row-expand-icon {
  cursor: pointer;
  display: inline-block;
  width: 17px;
  height: 17px;
  text-align: center;
  line-height: 14px;
  border: 1px solid #e9e9e9;
  user-select: none;
  background: #fff;
}
.ant-table-row-expanded:after {
  content: '-';
}
.ant-table-row-collapsed:after {
  content: '+';
}
.ant-table-row-spaced {
  visibility: hidden;
}
.ant-table-row-spaced:after {
  content: '.';
}
.ant-table-row[class*="ant-table-row-level-0"] .ant-table-selection-column > span {
  display: inline-block;
}
tr.ant-table-expanded-row,
tr.ant-table-expanded-row:hover {
  background: #fbfbfb;
}
.ant-table .ant-table-row-indent + .ant-table-row-expand-icon {
  margin-right: 8px;
}
.ant-table-scroll {
  overflow: auto;
  overflow-x: hidden;
}
.ant-table-scroll table {
  width: auto;
  min-width: 100%;
}
.ant-table-body-inner {
  height: 100%;
}
.ant-table-fixed-header > .ant-table-content > .ant-table-scroll > .ant-table-body {
  position: relative;
  background: #fff;
}
.ant-table-fixed-header .ant-table-body-inner {
  overflow: scroll;
}
.ant-table-fixed-header .ant-table-scroll .ant-table-header {
  overflow: scroll;
  padding-bottom: 20px;
  margin-bottom: -20px;
}
.ant-table-fixed-left,
.ant-table-fixed-right {
  position: absolute;
  top: 0;
  overflow: hidden;
  transition: box-shadow 0.3s ease;
  border-radius: 0;
}
.ant-table-fixed-left table,
.ant-table-fixed-right table {
  width: auto;
  background: #fff;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-outer .ant-table-fixed,
.ant-table-fixed-header .ant-table-fixed-right .ant-table-body-outer .ant-table-fixed {
  border-radius: 0;
}
.ant-table-fixed-left {
  left: 0;
  box-shadow: 6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-left .ant-table-header {
  overflow-y: hidden;
}
.ant-table-fixed-left .ant-table-body-inner {
  margin-right: -20px;
  padding-right: 20px;
}
.ant-table-fixed-header .ant-table-fixed-left .ant-table-body-inner {
  padding-right: 0;
}
.ant-table-fixed-left,
.ant-table-fixed-left table {
  border-radius: 4px 0 0 0;
}
.ant-table-fixed-right {
  right: 0;
  box-shadow: -6px 0 6px -4px rgba(0, 0, 0, 0.2);
}
.ant-table-fixed-right,
.ant-table-fixed-right table {
  border-radius: 0 4px 0 0;
}
.ant-table-fixed-right .ant-table-expanded-row {
  color: transparent;
  pointer-events: none;
}
.ant-table.ant-table-scroll-position-left .ant-table-fixed-left {
  box-shadow: none;
}
.ant-table.ant-table-scroll-position-right .ant-table-fixed-right {
  box-shadow: none;
}
`,
                    `.nz-resize-container {
  position: relative;
}
.nz-resize-y {
  position: absolute;
  top: 0;
  left: 0;
  width: 10px;
  height: 102%;
  background: transparent;
  cursor: col-resize;
}
.nz-resizing th,
.nz-resizing td {
  user-select: none;
}
`
                ]
            },] },
];
/** @nocollapse */
NzTableComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
NzTableComponent.propDecorators = {
    "nzPageSizeChange": [{ type: Output },],
    "nzPageIndexChange": [{ type: Output },],
    "nzDataChange": [{ type: Output },],
    "nzPageIndexChangeClick": [{ type: Output },],
    "nzSize": [{ type: Input },],
    "nzBordered": [{ type: Input },],
    "nzCustomNoResult": [{ type: Input },],
    "nzIsPagination": [{ type: Input },],
    "nzLoading": [{ type: Input },],
    "nzShowSizeChanger": [{ type: Input },],
    "nzShowQuickJumper": [{ type: Input },],
    "nzShowTotal": [{ type: Input },],
    "nzShowFooter": [{ type: Input },],
    "nzShowTitle": [{ type: Input },],
    "nzIsPageIndexReset": [{ type: Input },],
    "nzPageSizeSelectorValues": [{ type: Input },],
    "fixedHeader": [{ type: ContentChild, args: ['nzFixedHeader',] },],
    "setThs": [{ type: ContentChildren, args: [NzThDirective, { descendants: true },] },],
    "nzScroll": [{ type: Input },],
    "nzAjaxData": [{ type: Input },],
    "nzDataSource": [{ type: Input },],
    "nzPageIndex": [{ type: Input },],
    "nzPageSize": [{ type: Input },],
    "nzTotal": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTbodyTrDirective {
}
NzTbodyTrDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tbody-tr]',
                host: {
                    '[class.ant-table-row]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTbodyTrDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTbodyDirective {
}
NzTbodyDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tbody]',
                host: {
                    '[class.ant-table-tbody]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTbodyDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTdDirective {
    /**
     * @param {?} _elementRef
     */
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._checkbox = false;
        this._expand = false;
        this._el = this._elementRef.nativeElement;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzCheckbox(value) {
        this._checkbox = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzCheckbox() {
        return this._checkbox;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzExpand(value) {
        this._expand = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzExpand() {
        return this._expand;
    }
}
NzTdDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-td]'
            },] },
];
/** @nocollapse */
NzTdDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzTdDirective.propDecorators = {
    "nzCheckbox": [{ type: Input }, { type: HostBinding, args: [`class.ant-table-selection-column`,] },],
    "nzExpand": [{ type: Input }, { type: HostBinding, args: [`class.ant-table-row-expand-icon-cell`,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTheadDirective {
}
NzTheadDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-thead]',
                host: {
                    '[class.ant-table-thead]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTheadDirective.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTableModule {
}
NzTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzRowIndentComponent, NzRowExpandIconComponent, NzTableFilterComponent, NzTableComponent, NzThDirective, NzTdDirective, NzTheadDirective, NzTbodyDirective, NzTbodyTrDirective, NzTableDividerDirective, NzTableSortComponent],
                exports: [NzRowIndentComponent, NzRowExpandIconComponent, NzTableFilterComponent, NzTableComponent, NzThDirective, NzTdDirective, NzTheadDirective, NzTbodyDirective, NzTbodyTrDirective, NzTableDividerDirective, NzTableSortComponent],
                imports: [CommonModule, NzPaginationModule, NzSpinModule, NzLocaleModule]
            },] },
];
/** @nocollapse */
NzTableModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTabBodyComponent {
}
NzTabBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tab-body',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ng-template [ngTemplateOutlet]="content"></ng-template>
  `,
            },] },
];
/** @nocollapse */
NzTabBodyComponent.ctorParameters = () => [];
NzTabBodyComponent.propDecorators = {
    "content": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTabLabelDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this._disabled = false;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    getOffsetLeft() {
        return this.elementRef.nativeElement.offsetLeft;
    }
    /**
     * @return {?}
     */
    getOffsetWidth() {
        return this.elementRef.nativeElement.offsetWidth;
    }
    /**
     * @return {?}
     */
    getOffsetTop() {
        return this.elementRef.nativeElement.offsetTop;
    }
    /**
     * @return {?}
     */
    getOffsetHeight() {
        return this.elementRef.nativeElement.offsetHeight;
    }
}
NzTabLabelDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tab-label]',
                host: {
                    '[class.ant-tabs-tab]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTabLabelDirective.ctorParameters = () => [
    { type: ElementRef, },
];
NzTabLabelDirective.propDecorators = {
    "disabled": [{ type: Input }, { type: HostBinding, args: ['class.ant-tabs-tab-disabled',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTabsInkBarDirective {
    /**
     * @param {?} _renderer
     * @param {?} _elementRef
     * @param {?} _ngZone
     */
    constructor(_renderer, _elementRef, _ngZone) {
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._animated = false;
        this.nzPositionMode = 'horizontal';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAnimated(value) {
        this._animated = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAnimated() {
        return this._animated;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    alignToElement(element) {
        this.show();
        this._ngZone.runOutsideAngular(() => {
            reqAnimFrame(() => {
                /** when horizontal remove height style and add transfrom left **/
                if (this.nzPositionMode === 'horizontal') {
                    this._renderer.removeStyle(this._elementRef.nativeElement, 'height');
                    this._renderer.setStyle(this._elementRef.nativeElement, 'transform', `translate3d(${this._getLeftPosition(element)}, 0px, 0px)`);
                    this._renderer.setStyle(this._elementRef.nativeElement, 'width', this._getElementWidth(element));
                }
                else {
                    /** when vertical remove width style and add transfrom top **/
                    this._renderer.removeStyle(this._elementRef.nativeElement, 'width');
                    this._renderer.setStyle(this._elementRef.nativeElement, 'transform', `translate3d(0px, ${this._getTopPosition(element)}, 0px)`);
                    this._renderer.setStyle(this._elementRef.nativeElement, 'height', this._getElementHeight(element));
                }
            });
        });
    }
    /**
     * @return {?}
     */
    show() {
        this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'visible');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setDisplay(value) {
        this._renderer.setStyle(this._elementRef.nativeElement, 'display', value);
    }
    /**
     * @return {?}
     */
    hide() {
        this._renderer.setStyle(this._elementRef.nativeElement, 'visibility', 'hidden');
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getLeftPosition(element) {
        return element ? element.offsetLeft + 'px' : '0';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getElementWidth(element) {
        return element ? element.offsetWidth + 'px' : '0';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getTopPosition(element) {
        return element ? element.offsetTop + 'px' : '0';
    }
    /**
     * @param {?} element
     * @return {?}
     */
    _getElementHeight(element) {
        return element ? element.offsetHeight + 'px' : '0';
    }
}
NzTabsInkBarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[nz-tabs-ink-bar]',
                host: {
                    '[class.ant-tabs-ink-bar]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTabsInkBarDirective.ctorParameters = () => [
    { type: Renderer2, },
    { type: ElementRef, },
    { type: NgZone, },
];
NzTabsInkBarDirective.propDecorators = {
    "nzAnimated": [{ type: Input }, { type: HostBinding, args: ['class.ant-tabs-ink-bar-animated',] },],
    "nzPositionMode": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const EXAGGERATED_OVERSCROLL = 64;
class NzTabsNavComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _ngZone
     * @param {?} _renderer
     * @param {?} _dir
     */
    constructor(_elementRef, _ngZone, _renderer, _dir) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this._dir = _dir;
        this._animated = true;
        this._hideBar = false;
        this._showPagination = true;
        this._showPaginationControls = false;
        this._disableScrollAfter = true;
        this._disableScrollBefore = true;
        this._scrollDistance = 0;
        this._selectedIndexChanged = false;
        this._realignInkBar = null;
        this._selectedIndex = 0;
        this._tabPositionMode = 'horizontal';
        this.nzSize = 'default';
        this._type = 'line';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzAnimated(value) {
        this._animated = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzAnimated() {
        return this._animated;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzHideBar(value) {
        this._hideBar = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzHideBar() {
        return this._hideBar;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        this._type = value;
        if (this._type !== 'line') {
            this._inkBar.setDisplay('none');
        }
        else {
            this._inkBar.setDisplay('block');
        }
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowPagination(value) {
        this._showPagination = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowPagination() {
        return this._showPagination;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzPositionMode(value) {
        this._tabPositionMode = value;
        this._alignInkBarToSelectedTab();
        if (this.nzShowPagination) {
            this._updatePagination();
        }
    }
    /**
     * @return {?}
     */
    get nzPositionMode() {
        return this._tabPositionMode;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set selectedIndex(value) {
        this._selectedIndexChanged = this._selectedIndex !== value;
        this._selectedIndex = value;
    }
    /**
     * @return {?}
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @return {?}
     */
    _onContentChanges() {
        if (this.nzShowPagination) {
            this._updatePagination();
        }
        this._alignInkBarToSelectedTab();
    }
    /**
     * @param {?} scrollDir
     * @return {?}
     */
    _scrollHeader(scrollDir) {
        // Move the scroll distance one-third the length of the tab list's viewport.
        this.scrollDistance += (scrollDir === 'before' ? -1 : 1) * this.viewWidthHeightPix / 3;
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        if (this._tabLabelCount !== this._labelWrappers.length) {
            if (this.nzShowPagination) {
                this._updatePagination();
            }
            this._tabLabelCount = this._labelWrappers.length;
        }
        if (this._selectedIndexChanged) {
            this._scrollToLabel(this._selectedIndex);
            if (this.nzShowPagination) {
                this._checkScrollingControls();
            }
            this._alignInkBarToSelectedTab();
            this._selectedIndexChanged = false;
        }
        if (this._scrollDistanceChanged) {
            if (this.nzShowPagination) {
                this._updateTabScrollPosition();
            }
            this._scrollDistanceChanged = false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._realignInkBar = this._ngZone.runOutsideAngular(() => {
            const /** @type {?} */ dirChange = this._dir ? this._dir.change : of$1(null);
            const /** @type {?} */ resize = typeof window !== 'undefined' ?
                fromEvent$1(window, 'resize').pipe(auditTime$1(10)) :
                of$1(null);
            return merge$3(dirChange, resize).pipe(startWith$1(null)).subscribe(() => {
                if (this.nzShowPagination) {
                    this._updatePagination();
                }
                this._alignInkBarToSelectedTab();
            });
        });
    }
    /**
     * @return {?}
     */
    _updateTabScrollPosition() {
        const /** @type {?} */ scrollDistance = this.scrollDistance;
        if (this.nzPositionMode === 'horizontal') {
            const /** @type {?} */ translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;
            this._renderer.setStyle(this._tabList.nativeElement, 'transform', `translate3d(${translateX}px, 0, 0)`);
        }
        else {
            this._renderer.setStyle(this._tabList.nativeElement, 'transform', `translate3d(0,${-scrollDistance}px, 0)`);
        }
    }
    /**
     * @return {?}
     */
    _updatePagination() {
        this._checkPaginationEnabled();
        this._checkScrollingControls();
        this._updateTabScrollPosition();
    }
    /**
     * @return {?}
     */
    _checkPaginationEnabled() {
        this._showPaginationControls =
            this.tabListScrollWidthHeightPix > this.elementRefOffSetWidthHeight;
        if (!this._showPaginationControls) {
            this.scrollDistance = 0;
        }
    }
    /**
     * @param {?} labelIndex
     * @return {?}
     */
    _scrollToLabel(labelIndex) {
        const /** @type {?} */ selectedLabel = this._labelWrappers
            ? this._labelWrappers.toArray()[labelIndex]
            : null;
        if (!selectedLabel) {
            return;
        }
        // The view length is the visible width of the tab labels.
        let /** @type {?} */ labelBeforePos;
        let /** @type {?} */ labelAfterPos;
        if (this.nzPositionMode === 'horizontal') {
            if (this._getLayoutDirection() === 'ltr') {
                labelBeforePos = selectedLabel.getOffsetLeft();
                labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();
            }
            else {
                labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();
                labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();
            }
        }
        else {
            labelBeforePos = selectedLabel.getOffsetTop();
            labelAfterPos = labelBeforePos + selectedLabel.getOffsetHeight();
        }
        const /** @type {?} */ beforeVisiblePos = this.scrollDistance;
        const /** @type {?} */ afterVisiblePos = this.scrollDistance + this.viewWidthHeightPix;
        if (labelBeforePos < beforeVisiblePos) {
            // Scroll header to move label to the before direction
            this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;
        }
        else if (labelAfterPos > afterVisiblePos) {
            // Scroll header to move label to the after direction
            this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;
        }
    }
    /**
     * @return {?}
     */
    _checkScrollingControls() {
        // Check if the pagination arrows should be activated.
        this._disableScrollBefore = this.scrollDistance === 0;
        this._disableScrollAfter = this.scrollDistance === this._getMaxScrollDistance();
    }
    /**
     * Determines what is the maximum length in pixels that can be set for the scroll distance. This
     * is equal to the difference in width between the tab list container and tab header container.
     *
     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and
     * should be called sparingly.
     * @return {?}
     */
    _getMaxScrollDistance() {
        return (this.tabListScrollWidthHeightPix - this.viewWidthHeightPix) || 0;
    }
    /**
     * Sets the distance in pixels that the tab header should be transformed in the X-axis.
     * @param {?} v
     * @return {?}
     */
    set scrollDistance(v) {
        this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));
        // Mark that the scroll distance has changed so that after the view is checked, the CSS
        // transformation can move the header.
        this._scrollDistanceChanged = true;
        this._checkScrollingControls();
    }
    /**
     * @return {?}
     */
    get scrollDistance() {
        return this._scrollDistance;
    }
    /**
     * @return {?}
     */
    get viewWidthHeightPix() {
        let /** @type {?} */ PAGINATION_PIX = 0;
        if (this._showPaginationControls) {
            PAGINATION_PIX = 64;
        }
        if (this.nzPositionMode === 'horizontal') {
            return this._tabListContainer.nativeElement.offsetWidth - PAGINATION_PIX;
        }
        else {
            return this._tabListContainer.nativeElement.offsetHeight - PAGINATION_PIX;
        }
    }
    /**
     * @return {?}
     */
    get tabListScrollWidthHeightPix() {
        if (this.nzPositionMode === 'horizontal') {
            return this._tabList.nativeElement.scrollWidth;
        }
        else {
            return this._tabList.nativeElement.scrollHeight;
        }
    }
    /**
     * @return {?}
     */
    get elementRefOffSetWidthHeight() {
        if (this.nzPositionMode === 'horizontal') {
            return this._elementRef.nativeElement.offsetWidth;
        }
        else {
            return this._elementRef.nativeElement.offsetHeight;
        }
    }
    /**
     * @return {?}
     */
    _getLayoutDirection() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    /**
     * @return {?}
     */
    _alignInkBarToSelectedTab() {
        if (this.nzType === 'line') {
            const /** @type {?} */ selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length
                ? this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement
                : null;
            if (this._inkBar) {
                this._inkBar.alignToElement(selectedLabelWrapper);
            }
        }
    }
}
NzTabsNavComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tabs-nav',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div style="float:right;" *ngIf="_tabBarExtraContent">
      <div class="ant-tabs-extra-content">
        <ng-template [ngTemplateOutlet]="_tabBarExtraContent">
        </ng-template>
      </div>
    </div>
    <div class="ant-tabs-nav-container" [class.ant-tabs-nav-container-scrolling]="_showPaginationControls" #tabListContainer>
      <span class="ant-tabs-tab-prev ant-tabs-tab-arrow-show" (click)="_scrollHeader('before')" [class.ant-tabs-tab-btn-disabled]="_disableScrollBefore" *ngIf="_showPaginationControls">
        <span class="ant-tabs-tab-prev-icon"></span>
      </span>
      <span class="ant-tabs-tab-next ant-tabs-tab-arrow-show" (click)="_scrollHeader('after')" [class.ant-tabs-tab-btn-disabled]="_disableScrollAfter" *ngIf="_showPaginationControls">
        <span class="ant-tabs-tab-next-icon"></span>
      </span>
      <div class="ant-tabs-nav-wrap">
        <div class="ant-tabs-nav-scroll">
          <div class="ant-tabs-nav" [class.ant-tabs-nav-animated]="nzAnimated" #tabList (cdkObserveContent)="_onContentChanges()">
            <div nz-tabs-ink-bar [hidden]="nzHideBar" [nzAnimated]="nzAnimated" [nzPositionMode]="nzPositionMode" style="display: block;"></div>
            <ng-content></ng-content>
          </div>
        </div>
      </div>
    </div>
  `,
                host: {
                    '[class.ant-tabs-bar]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTabsNavComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
    { type: Renderer2, },
    { type: Directionality, decorators: [{ type: Optional },] },
];
NzTabsNavComponent.propDecorators = {
    "nzSize": [{ type: Input },],
    "nzAnimated": [{ type: Input },],
    "nzHideBar": [{ type: Input },],
    "nzType": [{ type: Input },],
    "_tabBarExtraContent": [{ type: ContentChild, args: ['tabBarExtraContent',] },],
    "_labelWrappers": [{ type: ContentChildren, args: [NzTabLabelDirective,] },],
    "_inkBar": [{ type: ViewChild, args: [NzTabsInkBarDirective,] },],
    "_tabListContainer": [{ type: ViewChild, args: ['tabListContainer',] },],
    "_tabList": [{ type: ViewChild, args: ['tabList',] },],
    "nzShowPagination": [{ type: Input },],
    "nzPositionMode": [{ type: Input },],
    "selectedIndex": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/** code from https://github.com/angular/material2 */
/**
 * @record
 */

class NzTabChangeEvent {
}
class NzTabSetComponent {
    /**
     * @param {?} _renderer
     */
    constructor(_renderer) {
        this._renderer = _renderer;
        this._prefixCls = 'ant-tabs';
        this._tabPosition = 'top';
        this._tabPositionMode = 'horizontal';
        this._indexToSelect = 0;
        this._selectedIndex = null;
        this._isViewInit = false;
        this._tabs = [];
        this.nzAnimated = true;
        this.nzShowPagination = true;
        this.nzHide = false;
        this.nzSelectChange = new EventEmitter(true);
        this.nzSize = 'default';
        this._type = 'line';
        this.tabs = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzSelectedIndex(value) {
        this._indexToSelect = value;
    }
    /**
     * @return {?}
     */
    get nzSelectedIndex() {
        return this._selectedIndex;
    }
    /**
     * @return {?}
     */
    get nzSelectedIndexChange() {
        return this.nzSelectChange.pipe(map$1(event => event.index));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzTabPosition(value) {
        if (this._tabPosition === value) {
            return;
        }
        this._tabPosition = value;
        if ((this._tabPosition === 'top') || (this._tabPosition === 'bottom')) {
            this._tabPositionMode = 'horizontal';
        }
        else {
            this._tabPositionMode = 'vertical';
        }
        this._setPosition(value);
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzTabPosition() {
        return this._tabPosition;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzType(value) {
        if (this._type === value) {
            return;
        }
        this._type = value;
        if (this._type === 'card') {
            this.nzAnimated = false;
        }
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    get nzType() {
        return this._type;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _setPosition(value) {
        if (this._isViewInit) {
            if (value === 'bottom') {
                this._renderer.insertBefore(this._hostContent.nativeElement, this._tabContent.nativeElement, this._tabNav._elementRef.nativeElement);
            }
            else {
                this._renderer.insertBefore(this._hostContent.nativeElement, this._tabNav._elementRef.nativeElement, this._tabContent.nativeElement);
            }
        }
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classMap = {
            [this._prefixCls]: true,
            [`${this._prefixCls}-vertical`]: (this._tabPosition === 'left') || (this._tabPosition === 'right'),
            [`${this._prefixCls}-${this._tabPosition}`]: this._tabPosition,
            [`${this._prefixCls}-no-animation`]: (this.nzAnimated === false) || ((/** @type {?} */ (this.nzAnimated)).tabPane === false),
            [`${this._prefixCls}-${this._type}`]: this._type,
            [`${this._prefixCls}-mini`]: (this.nzSize === 'small')
        };
    }
    /**
     * @param {?} index
     * @return {?}
     */
    clickLabel(index) {
        this.nzSelectedIndex = index;
        this._tabs[index].nzClick.emit();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        // Clamp the next selected index to the bounds of 0 and the tabs length. Note the `|| 0`, which
        // ensures that values like NaN can't get through and which would otherwise throw the
        // component into an infinite loop (since Math.max(NaN, 0) === NaN).
        const /** @type {?} */ indexToSelect = this._indexToSelect =
            Math.min(this._tabs.length - 1, Math.max(this._indexToSelect || 0, 0));
        // If there is a change in selected index, emit a change event. Should not trigger if
        // the selected index has not yet been initialized.
        if (this._selectedIndex !== indexToSelect && this._selectedIndex != null) {
            this.nzSelectChange.emit(this._createChangeEvent(indexToSelect));
        }
        // Setup the position for each tab and optionally setup an origin on the next selected tab.
        this._tabs.forEach((tab, index) => {
            tab.position = index - indexToSelect;
            // If there is already a selected tab, then set up an origin for the next selected tab
            // if it doesn't have one already.
            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {
                tab.origin = indexToSelect - this._selectedIndex;
            }
        });
        this._selectedIndex = indexToSelect;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._isViewInit = true;
        this._setPosition(this._tabPosition);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    _createChangeEvent(index) {
        const /** @type {?} */ event = new NzTabChangeEvent();
        event.index = index;
        if (this._tabs && this._tabs.length) {
            event.tab = this._tabs[index];
            this._tabs.forEach((item, i) => {
                if (i !== index) {
                    item.nzDeselect.emit();
                }
            });
            event.tab.nzSelect.emit();
        }
        return event;
    }
    /**
     * @return {?}
     */
    get inkBarAnimated() {
        return (this.nzAnimated === true) || ((/** @type {?} */ (this.nzAnimated)).inkBar === true);
    }
    /**
     * @return {?}
     */
    get tabPaneAnimated() {
        return (this.nzAnimated === true) || ((/** @type {?} */ (this.nzAnimated)).tabPane === true);
    }
}
NzTabSetComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tabset',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div [ngClass]="_classMap" #hostContent>
      <nz-tabs-nav
        #tabNav
        [nzSize]="nzSize"
        [nzType]="nzType"
        [nzShowPagination]="nzShowPagination"
        [nzPositionMode]="_tabPositionMode"
        [nzAnimated]="inkBarAnimated"
        [nzHideBar]="nzHide"
        [selectedIndex]="nzSelectedIndex">
        <ng-template #tabBarExtraContent>
          <ng-template [ngTemplateOutlet]="nzTabBarExtraTemplate || nzTabBarExtraContent"></ng-template>
        </ng-template>
        <div
          nz-tab-label
          [class.ant-tabs-tab-active]="(nzSelectedIndex == i)&&!nzHide"
          [disabled]="tab.disabled"
          (click)="clickLabel(i)"
          *ngFor="let tab of _tabs; let i = index">
          <ng-template [ngTemplateOutlet]="tab._tabHeading"></ng-template>
        </div>
      </nz-tabs-nav>
      <div class="ant-tabs-content"
        #tabContent
        [class.ant-tabs-content-animated]="tabPaneAnimated"
        [class.ant-tabs-content-no-animated]="!tabPaneAnimated"
        [style.margin-left.%]="tabPaneAnimated&&(-nzSelectedIndex*100)">
        <nz-tab-body
          class="ant-tabs-tabpane"
          [class.ant-tabs-tabpane-active]="(nzSelectedIndex == i)&&!nzHide"
          [class.ant-tabs-tabpane-inactive]="(nzSelectedIndex != i)||nzHide"
          [content]="tab.content"
          *ngFor="let tab of _tabs; let i = index">
        </nz-tab-body>
      </div>
    </div>`,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-nav-container {
  height: 32px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-ink-bar {
  visibility: hidden;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {
  margin: 0;
  border: 1px solid #d9d9d9;
  border-bottom: 0;
  border-radius: 4px 4px 0 0;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  background: #f9f9f9;
  margin-right: 2px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {
  padding: 5px 16px 4px;
  transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {
  background: #fff;
  border-color: #d9d9d9;
  color: #108ee9;
  padding-bottom: 5px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-inactive {
  padding: 0;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-bottom: 0;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close {
  color: rgba(0, 0, 0, 0.43);
  transition: all .3s;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  margin-right: 0;
  opacity: 0;
  position: absolute;
  right: 2px;
  top: 50%;
  margin-top: -5px;
  overflow: hidden;
  text-align: center;
  border-radius: 2px;
  width: 14px;
  height: 14px;
  line-height: 1;
}
:root .ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close {
  filter: none;
}
:root .ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close {
  font-size: 12px;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab .anticon-close:hover {
  color: rgba(0, 0, 0, 0.85);
}
.ant-tabs.ant-tabs-card .ant-tabs-content > .ant-tabs-tabpane,
.ant-tabs.ant-tabs-editable-card .ant-tabs-content > .ant-tabs-tabpane {
  transition: none !important;
}
.ant-tabs.ant-tabs-card .ant-tabs-content > .ant-tabs-tabpane-inactive,
.ant-tabs.ant-tabs-editable-card .ant-tabs-content > .ant-tabs-tabpane-inactive {
  overflow: hidden;
}
.ant-tabs.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab:hover .anticon-close {
  opacity: 1;
}
.ant-tabs-extra-content {
  line-height: 32px;
}
.ant-tabs-extra-content .ant-tabs-new-tab {
  width: 20px;
  height: 20px;
  line-height: 20px;
  text-align: center;
  cursor: pointer;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  color: rgba(0, 0, 0, 0.43);
  transition: all .3s;
}
:root .ant-tabs-extra-content .ant-tabs-new-tab {
  filter: none;
}
:root .ant-tabs-extra-content .ant-tabs-new-tab {
  font-size: 12px;
}
.ant-tabs-extra-content .ant-tabs-new-tab:hover {
  color: #108ee9;
  border-color: #108ee9;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-nav-container {
  height: auto;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab {
  border-bottom: 1px solid #d9d9d9;
  margin-bottom: 8px;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab-active {
  padding-bottom: 4px;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-tab:last-child {
  margin-bottom: 8px;
}
.ant-tabs-vertical.ant-tabs-card > .ant-tabs-bar .ant-tabs-new-tab {
  width: 90%;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-left > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-right: 0;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-left > .ant-tabs-bar .ant-tabs-tab {
  border-right: 0;
  border-radius: 4px 0 0 4px;
  margin-right: 1px;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-left > .ant-tabs-bar .ant-tabs-tab-active {
  margin-right: -1px;
  padding-right: 18px;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-right > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-left: 0;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-right > .ant-tabs-bar .ant-tabs-tab {
  border-left: 0;
  border-radius: 0 4px 4px 0;
  margin-left: 1px;
}
.ant-tabs-vertical.ant-tabs-card.ant-tabs-right > .ant-tabs-bar .ant-tabs-tab-active {
  margin-left: -1px;
  padding-left: 18px;
}
.ant-tabs {
  box-sizing: border-box;
  position: relative;
  overflow: hidden;
  zoom: 1;
  color: rgba(0, 0, 0, 0.65);
}
.ant-tabs:before,
.ant-tabs:after {
  content: " ";
  display: table;
}
.ant-tabs:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-tabs-ink-bar {
  z-index: 1;
  position: absolute;
  left: 0;
  bottom: 1px;
  box-sizing: border-box;
  height: 2px;
  background-color: #108ee9;
  transform-origin: 0 0;
}
.ant-tabs-bar {
  border-bottom: 1px solid #d9d9d9;
  margin-bottom: 16px;
  outline: none;
  transition: padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs-nav-container {
  overflow: hidden;
  font-size: 14px;
  line-height: 1.5;
  box-sizing: border-box;
  position: relative;
  white-space: nowrap;
  margin-bottom: -1px;
  transition: padding 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  zoom: 1;
}
.ant-tabs-nav-container:before,
.ant-tabs-nav-container:after {
  content: " ";
  display: table;
}
.ant-tabs-nav-container:after {
  clear: both;
  visibility: hidden;
  font-size: 0;
  height: 0;
}
.ant-tabs-nav-container-scrolling {
  padding-left: 32px;
  padding-right: 32px;
}
.ant-tabs-tab-prev,
.ant-tabs-tab-next {
  user-select: none;
  z-index: 2;
  width: 0;
  height: 100%;
  line-height: 32px;
  cursor: pointer;
  border: 0;
  background-color: transparent;
  position: absolute;
  text-align: center;
  color: rgba(0, 0, 0, 0.43);
  transition: width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  opacity: 0;
  pointer-events: none;
}
.ant-tabs-tab-prev.ant-tabs-tab-arrow-show,
.ant-tabs-tab-next.ant-tabs-tab-arrow-show {
  opacity: 1;
  width: 32px;
  height: 100%;
  pointer-events: auto;
}
.ant-tabs-tab-prev:hover,
.ant-tabs-tab-next:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-tabs-tab-prev-icon,
.ant-tabs-tab-next-icon {
  font-style: normal;
  font-weight: bold;
  font-variant: normal;
  line-height: inherit;
  vertical-align: baseline;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  text-transform: none;
}
.ant-tabs-tab-prev-icon:before,
.ant-tabs-tab-next-icon:before {
  display: block;
  font-family: "anticon" !important;
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-tabs-tab-prev-icon:before,
:root .ant-tabs-tab-next-icon:before {
  filter: none;
}
:root .ant-tabs-tab-prev-icon:before,
:root .ant-tabs-tab-next-icon:before {
  font-size: 12px;
}
.ant-tabs-tab-btn-disabled {
  cursor: not-allowed;
}
.ant-tabs-tab-btn-disabled,
.ant-tabs-tab-btn-disabled:hover {
  color: rgba(0, 0, 0, 0.25);
}
.ant-tabs-tab-next {
  right: 2px;
}
.ant-tabs-tab-next-icon:before {
  content: "\\e61f";
}
.ant-tabs-tab-prev {
  left: 0;
}
.ant-tabs-tab-prev-icon:before {
  content: "\\e620";
}
:root .ant-tabs-tab-prev {
  filter: none;
}
.ant-tabs-nav-wrap {
  overflow: hidden;
  margin-bottom: -1px;
}
.ant-tabs-nav-scroll {
  overflow: hidden;
  white-space: nowrap;
}
.ant-tabs-nav {
  box-sizing: border-box;
  padding-left: 0;
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  position: relative;
  margin: 0;
  list-style: none;
  display: inline-block;
}
.ant-tabs-nav:before,
.ant-tabs-nav:after {
  display: table;
  content: " ";
}
.ant-tabs-nav:after {
  clear: both;
}
.ant-tabs-nav .ant-tabs-tab-disabled {
  pointer-events: none;
  cursor: default;
  color: rgba(0, 0, 0, 0.25);
}
.ant-tabs-nav .ant-tabs-tab {
  display: inline-block;
  height: 100%;
  margin-right: 24px;
  box-sizing: border-box;
  position: relative;
  padding: 8px 20px;
  transition: color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
  cursor: pointer;
  text-decoration: none;
}
.ant-tabs-nav .ant-tabs-tab:last-child {
  margin-right: 0;
}
.ant-tabs-nav .ant-tabs-tab:hover {
  color: #49a9ee;
}
.ant-tabs-nav .ant-tabs-tab:active {
  color: #0e77ca;
}
.ant-tabs-nav .ant-tabs-tab .anticon {
  width: 14px;
  height: 14px;
  margin-right: 8px;
}
.ant-tabs-nav .ant-tabs-tab-active {
  color: #108ee9;
}
.ant-tabs-mini .ant-tabs-nav-container {
  font-size: 12px;
}
.ant-tabs-mini .ant-tabs-tab {
  margin-right: 0;
  padding: 8px 16px;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content {
  width: 100%;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content > .ant-tabs-tabpane {
  flex-shrink: 0;
  width: 100%;
  transition: opacity .45s;
  opacity: 1;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content > .ant-tabs-tabpane-inactive {
  opacity: 0;
  height: 0;
  padding: 0 !important;
  pointer-events: none;
}
.ant-tabs:not(.ant-tabs-vertical) > .ant-tabs-content-animated {
  display: flex;
  flex-direction: row;
  will-change: margin-left;
  transition: margin-left 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs-vertical > .ant-tabs-bar {
  border-bottom: 0;
  height: 100%;
}
.ant-tabs-vertical > .ant-tabs-bar-tab-prev,
.ant-tabs-vertical > .ant-tabs-bar-tab-next {
  width: 32px;
  height: 0;
  transition: height 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), opacity 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), color 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs-vertical > .ant-tabs-bar-tab-prev.ant-tabs-tab-arrow-show,
.ant-tabs-vertical > .ant-tabs-bar-tab-next.ant-tabs-tab-arrow-show {
  width: 100%;
  height: 32px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab {
  float: none;
  margin-right: 0;
  margin-bottom: 16px;
  display: block;
  padding: 8px 24px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab:last-child {
  margin-bottom: 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-extra-content {
  text-align: center;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-scroll {
  width: auto;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-container,
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-wrap {
  height: 100%;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-container {
  margin-bottom: 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-container.ant-tabs-nav-container-scrolling {
  padding: 32px 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-bottom: 0;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-nav {
  width: 100%;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-ink-bar {
  width: 2px;
  left: auto;
  height: auto;
  top: 0;
}
.ant-tabs-vertical > .ant-tabs-content {
  overflow: hidden;
  width: auto;
  margin-top: 0 !important;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-next {
  width: 100%;
  bottom: 0;
  height: 32px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-next-icon:before {
  content: "\\e61d";
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-prev {
  top: 0;
  width: 100%;
  height: 32px;
}
.ant-tabs-vertical > .ant-tabs-bar .ant-tabs-tab-prev-icon:before {
  content: "\\e61e";
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar {
  float: left;
  border-right: 1px solid #e9e9e9;
  margin-right: -1px;
  margin-bottom: 0;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-tab {
  text-align: right;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-nav-container {
  margin-right: -1px;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-right: -1px;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-bar .ant-tabs-ink-bar {
  right: 1px;
}
.ant-tabs-vertical.ant-tabs-left > .ant-tabs-content {
  padding-left: 24px;
  border-left: 1px solid #e9e9e9;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar {
  float: right;
  border-left: 1px solid #e9e9e9;
  margin-left: -1px;
  margin-bottom: 0;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar .ant-tabs-nav-container {
  margin-left: -1px;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar .ant-tabs-nav-wrap {
  margin-left: -1px;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-bar .ant-tabs-ink-bar {
  left: 1px;
}
.ant-tabs-vertical.ant-tabs-right > .ant-tabs-content {
  padding-right: 24px;
  border-right: 1px solid #e9e9e9;
}
.ant-tabs-bottom > .ant-tabs-bar {
  margin-bottom: 0;
  margin-top: 16px;
}
.ant-tabs-top .ant-tabs-ink-bar-animated,
.ant-tabs-bottom .ant-tabs-ink-bar-animated {
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), width 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.ant-tabs-left .ant-tabs-ink-bar-animated,
.ant-tabs-right .ant-tabs-ink-bar-animated {
  transition: transform 0.3s cubic-bezier(0.645, 0.045, 0.355, 1), height 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);
}
.no-flex > .ant-tabs-content-animated,
.ant-tabs-no-animation > .ant-tabs-content-animated,
.ant-tabs-vertical > .ant-tabs-content-animated {
  transform: none !important;
  margin-left: 0 !important;
}
.no-flex > .ant-tabs-content > .ant-tabs-tabpane-inactive,
.ant-tabs-no-animation > .ant-tabs-content > .ant-tabs-tabpane-inactive,
.ant-tabs-vertical > .ant-tabs-content > .ant-tabs-tabpane-inactive {
  display: none;
}
`,
                    `nz-tab {
  display: block;
}
nz-tabs-nav {
  display: block;
}
nz-tabset {
  display: block;
  position: relative;
  overflow: hidden;
}
nz-tabset .ant-tabs {
  height: 100%;
}
nz-tab-body {
  display: block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzTabSetComponent.ctorParameters = () => [
    { type: Renderer2, },
];
NzTabSetComponent.propDecorators = {
    "nzTabBarExtraTemplate": [{ type: Input },],
    "nzTabBarExtraContent": [{ type: ContentChild, args: ['nzTabBarExtraContent',] },],
    "_tabNav": [{ type: ViewChild, args: ['tabNav',] },],
    "_tabContent": [{ type: ViewChild, args: ['tabContent',] },],
    "_hostContent": [{ type: ViewChild, args: ['hostContent',] },],
    "nzAnimated": [{ type: Input },],
    "nzShowPagination": [{ type: Input },],
    "nzHide": [{ type: Input },],
    "nzSelectedIndex": [{ type: Input },],
    "nzSelectedIndexChange": [{ type: Output },],
    "nzSelectChange": [{ type: Output },],
    "nzSize": [{ type: Input },],
    "nzTabPosition": [{ type: Input },],
    "nzType": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTabComponent {
    /**
     * @param {?} nzTabSetComponent
     */
    constructor(nzTabSetComponent) {
        this.nzTabSetComponent = nzTabSetComponent;
        this.disabled = false;
        this.position = null;
        this.origin = null;
        this.nzSelect = new EventEmitter();
        this.nzClick = new EventEmitter();
        this.nzDeselect = new EventEmitter();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this.disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this.disabled;
    }
    /**
     * @return {?}
     */
    get content() {
        return this._content;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.nzTabSetComponent._tabs.push(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.nzTabSetComponent._tabs.splice(this.nzTabSetComponent._tabs.indexOf(this), 1);
    }
}
NzTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tab',
                template: `
    <ng-template>
      <ng-content></ng-content>
    </ng-template>
  `,
                styles: [],
                host: {
                    '[class.ant-tabs-tabpane]': 'true'
                }
            },] },
];
/** @nocollapse */
NzTabComponent.ctorParameters = () => [
    { type: NzTabSetComponent, },
];
NzTabComponent.propDecorators = {
    "nzDisabled": [{ type: Input },],
    "nzSelect": [{ type: Output },],
    "nzClick": [{ type: Output },],
    "nzDeselect": [{ type: Output },],
    "_tabHeading": [{ type: ContentChild, args: ['nzTabHeading',] },],
    "_content": [{ type: ViewChild, args: [TemplateRef,] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTabsModule {
}
NzTabsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzTabComponent, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabsInkBarDirective, NzTabBodyComponent],
                exports: [NzTabComponent, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabsInkBarDirective, NzTabBodyComponent],
                imports: [CommonModule, ObserversModule]
            },] },
];
/** @nocollapse */
NzTabsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzCheckableTagComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._checked = false;
        this._closable = false;
        this._prefixCls = 'ant-tag';
        this._closed = false;
        /**
         * Event: emit before close
         */
        this.nzBeforeClose = new EventEmitter();
        /**
         * Event: emit after close
         */
        this.nzClose = new EventEmitter();
        /**
         * Event: emit on change
         */
        this.nzChange = new EventEmitter();
    }
    /**
     * Whether tag is checked
     * @param {?} value
     * @return {?}
     */
    set nzChecked(value) {
        this._checked = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzChecked() {
        return this._checked;
    }
    /**
     * Whether tag is closable
     * @param {?} value
     * @return {?}
     */
    set nzClosable(value) {
        this._closable = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzClosable() {
        return this._closable;
    }
    /**
     * @return {?}
     */
    get _dataShow() {
        return !this._closed;
    }
    /**
     * @return {?}
     */
    get _backgroundColor() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return (this.nzColor && !isPresetColor) ? this.nzColor : null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _afterClose(event) {
        if (this._closed) {
            this.nzClose.emit(event);
        }
    }
    /**
     * @return {?}
     */
    get _tagCls() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this.nzColor}`]: isPresetColor,
            [`${this._prefixCls}-has-color`]: (this.nzColor && !isPresetColor),
            [`${this._prefixCls}-checkable`]: true,
            [`${this._prefixCls}-checkable-checked`]: this.nzChecked
        };
    }
    /**
     * @return {?}
     */
    get _textClass() {
        return `${this._prefixCls}-text`;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _handleClick(event) {
        event.preventDefault();
        this.nzChange.emit(!this.nzChecked);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _close(event) {
        this.nzBeforeClose.emit(event);
        if (event.defaultPrevented) {
            return;
        }
        this._closed = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    _isPresetColor(color) {
        return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._render.addClass(this._elementRef.nativeElement, `${this._prefixCls}-root`);
    }
}
NzCheckableTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-checkable-tag',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    tagAnimation
                ],
                template: `
    <span *ngIf="!_closed"
      [ngClass]="_tagCls"
      [style.backgroundColor]="_backgroundColor"
      [@tagAnimation]
      (@tagAnimation.done)="_afterClose($event)">
      <span [class]="_textClass"><ng-content></ng-content></span>
      <i class="anticon anticon-cross" (click)="_close($event)" *ngIf="nzClosable"></i>
    </span>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag {
  display: inline-block;
  line-height: 20px;
  height: 22px;
  padding: 0 8px;
  border-radius: 4px;
  border: 1px solid #e9e9e9;
  background: #f3f3f3;
  font-size: 12px;
  transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
  opacity: 1;
  margin-right: 8px;
  cursor: pointer;
  white-space: nowrap;
}
.ant-tag:hover {
  opacity: 0.85;
}
.ant-tag,
.ant-tag a,
.ant-tag a:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-tag-text a:first-child:last-child {
  display: inline-block;
  margin: 0 -8px;
  padding: 0 8px;
}
.ant-tag .anticon-cross {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  cursor: pointer;
  font-weight: bold;
  margin-left: 3px;
  transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
  opacity: 0.66;
}
:root .ant-tag .anticon-cross {
  filter: none;
}
:root .ant-tag .anticon-cross {
  font-size: 12px;
}
.ant-tag .anticon-cross:hover {
  opacity: 1;
}
.ant-tag-has-color {
  border-color: transparent;
}
.ant-tag-has-color,
.ant-tag-has-color a,
.ant-tag-has-color a:hover,
.ant-tag-has-color .anticon-cross,
.ant-tag-has-color .anticon-cross:hover {
  color: #fff;
}
.ant-tag-checkable {
  background-color: transparent;
  border-color: transparent;
}
.ant-tag-checkable:not(.ant-tag-checkable-checked):hover {
  color: #108ee9;
}
.ant-tag-checkable:active,
.ant-tag-checkable-checked {
  color: #fff;
}
.ant-tag-checkable-checked {
  background-color: #108ee9;
}
.ant-tag-checkable:active {
  background-color: #0e77ca;
}
.ant-tag-close {
  width: 0 !important;
  padding: 0;
  margin: 0;
}
.ant-tag-zoom-enter,
.ant-tag-zoom-appear {
  animation: antFadeIn 0.2s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-zoom-leave {
  animation: antZoomOut 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-pink {
  color: #f5317f;
  background: #fdd8e7;
  border-color: #fdd8e7;
}
.ant-tag-pink-inverse {
  background: #f5317f;
  border-color: #f5317f;
  color: #fff;
}
.ant-tag-red {
  color: #f04134;
  background: #fcdbd9;
  border-color: #fcdbd9;
}
.ant-tag-red-inverse {
  background: #f04134;
  border-color: #f04134;
  color: #fff;
}
.ant-tag-orange {
  color: #f56a00;
  background: #fde3cf;
  border-color: #fde3cf;
}
.ant-tag-orange-inverse {
  background: #f56a00;
  border-color: #f56a00;
  color: #fff;
}
.ant-tag-yellow {
  color: #ffbf00;
  background: #fff3cf;
  border-color: #fff3cf;
}
.ant-tag-yellow-inverse {
  background: #ffbf00;
  border-color: #ffbf00;
  color: #fff;
}
.ant-tag-cyan {
  color: #00a2ae;
  background: #cfedf0;
  border-color: #cfedf0;
}
.ant-tag-cyan-inverse {
  background: #00a2ae;
  border-color: #00a2ae;
  color: #fff;
}
.ant-tag-green {
  color: #00a854;
  background: #cfefdf;
  border-color: #cfefdf;
}
.ant-tag-green-inverse {
  background: #00a854;
  border-color: #00a854;
  color: #fff;
}
.ant-tag-blue {
  color: #108ee9;
  background: #d2eafb;
  border-color: #d2eafb;
}
.ant-tag-blue-inverse {
  background: #108ee9;
  border-color: #108ee9;
  color: #fff;
}
.ant-tag-purple {
  color: #7265e6;
  background: #e4e2fa;
  border-color: #e4e2fa;
}
.ant-tag-purple-inverse {
  background: #7265e6;
  border-color: #7265e6;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag-root {
  display: inline-block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzCheckableTagComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzCheckableTagComponent.propDecorators = {
    "nzChecked": [{ type: Input },],
    "nzClosable": [{ type: Input },],
    "nzColor": [{ type: Input },],
    "nzBeforeClose": [{ type: Output },],
    "nzClose": [{ type: Output },],
    "nzChange": [{ type: Output },],
    "_dataShow": [{ type: HostBinding, args: ['attr.data-show',] },],
    "_handleClick": [{ type: HostListener, args: ['click', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTagComponent {
    /**
     * @param {?} _elementRef
     * @param {?} _render
     */
    constructor(_elementRef, _render) {
        this._elementRef = _elementRef;
        this._render = _render;
        this._closable = false;
        this._prefixCls = 'ant-tag';
        this._closed = false;
        /**
         * Event: emit before close
         */
        this.nzBeforeClose = new EventEmitter();
        /**
         * Event: emit after close
         */
        this.nzClose = new EventEmitter();
    }
    /**
     * Whether tag is closable
     * @param {?} value
     * @return {?}
     */
    set nzClosable(value) {
        this._closable = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzClosable() {
        return this._closable;
    }
    /**
     * @return {?}
     */
    get _dataShow() {
        return !this._closed;
    }
    /**
     * @return {?}
     */
    get _backgroundColor() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return (this.nzColor && !isPresetColor) ? this.nzColor : null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _afterClose(event) {
        if (this._closed) {
            this.nzClose.emit(event);
        }
    }
    /**
     * @return {?}
     */
    get _tagCls() {
        const /** @type {?} */ isPresetColor = this._isPresetColor(this.nzColor);
        return {
            [this._prefixCls]: true,
            [`${this._prefixCls}-${this.nzColor}`]: isPresetColor,
            [`${this._prefixCls}-has-color`]: (this.nzColor && !isPresetColor)
        };
    }
    /**
     * @return {?}
     */
    get _textClass() {
        return `${this._prefixCls}-text`;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _close(event) {
        this.nzBeforeClose.emit(event);
        if (event.defaultPrevented) {
            return;
        }
        this._closed = true;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    _isPresetColor(color) {
        return /^(pink|red|yellow|orange|cyan|green|blue|purple)(-inverse)?$/.test(color);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._render.addClass(this._elementRef.nativeElement, `${this._prefixCls}-root`);
    }
}
NzTagComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-tag',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    tagAnimation
                ],
                template: `
    <span *ngIf="!_closed"
      [ngClass]="_tagCls"
      [style.backgroundColor]="_backgroundColor"
      [@tagAnimation]
      (@tagAnimation.done)="_afterClose($event)">
      <span [class]="_textClass"><ng-content></ng-content></span>
      <i class="anticon anticon-cross" (click)="_close($event)" *ngIf="nzClosable"></i>
    </span>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag {
  display: inline-block;
  line-height: 20px;
  height: 22px;
  padding: 0 8px;
  border-radius: 4px;
  border: 1px solid #e9e9e9;
  background: #f3f3f3;
  font-size: 12px;
  transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
  opacity: 1;
  margin-right: 8px;
  cursor: pointer;
  white-space: nowrap;
}
.ant-tag:hover {
  opacity: 0.85;
}
.ant-tag,
.ant-tag a,
.ant-tag a:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-tag-text a:first-child:last-child {
  display: inline-block;
  margin: 0 -8px;
  padding: 0 8px;
}
.ant-tag .anticon-cross {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  cursor: pointer;
  font-weight: bold;
  margin-left: 3px;
  transition: all 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);
  opacity: 0.66;
}
:root .ant-tag .anticon-cross {
  filter: none;
}
:root .ant-tag .anticon-cross {
  font-size: 12px;
}
.ant-tag .anticon-cross:hover {
  opacity: 1;
}
.ant-tag-has-color {
  border-color: transparent;
}
.ant-tag-has-color,
.ant-tag-has-color a,
.ant-tag-has-color a:hover,
.ant-tag-has-color .anticon-cross,
.ant-tag-has-color .anticon-cross:hover {
  color: #fff;
}
.ant-tag-checkable {
  background-color: transparent;
  border-color: transparent;
}
.ant-tag-checkable:not(.ant-tag-checkable-checked):hover {
  color: #108ee9;
}
.ant-tag-checkable:active,
.ant-tag-checkable-checked {
  color: #fff;
}
.ant-tag-checkable-checked {
  background-color: #108ee9;
}
.ant-tag-checkable:active {
  background-color: #0e77ca;
}
.ant-tag-close {
  width: 0 !important;
  padding: 0;
  margin: 0;
}
.ant-tag-zoom-enter,
.ant-tag-zoom-appear {
  animation: antFadeIn 0.2s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-zoom-leave {
  animation: antZoomOut 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86);
  animation-fill-mode: both;
}
.ant-tag-pink {
  color: #f5317f;
  background: #fdd8e7;
  border-color: #fdd8e7;
}
.ant-tag-pink-inverse {
  background: #f5317f;
  border-color: #f5317f;
  color: #fff;
}
.ant-tag-red {
  color: #f04134;
  background: #fcdbd9;
  border-color: #fcdbd9;
}
.ant-tag-red-inverse {
  background: #f04134;
  border-color: #f04134;
  color: #fff;
}
.ant-tag-orange {
  color: #f56a00;
  background: #fde3cf;
  border-color: #fde3cf;
}
.ant-tag-orange-inverse {
  background: #f56a00;
  border-color: #f56a00;
  color: #fff;
}
.ant-tag-yellow {
  color: #ffbf00;
  background: #fff3cf;
  border-color: #fff3cf;
}
.ant-tag-yellow-inverse {
  background: #ffbf00;
  border-color: #ffbf00;
  color: #fff;
}
.ant-tag-cyan {
  color: #00a2ae;
  background: #cfedf0;
  border-color: #cfedf0;
}
.ant-tag-cyan-inverse {
  background: #00a2ae;
  border-color: #00a2ae;
  color: #fff;
}
.ant-tag-green {
  color: #00a854;
  background: #cfefdf;
  border-color: #cfefdf;
}
.ant-tag-green-inverse {
  background: #00a854;
  border-color: #00a854;
  color: #fff;
}
.ant-tag-blue {
  color: #108ee9;
  background: #d2eafb;
  border-color: #d2eafb;
}
.ant-tag-blue-inverse {
  background: #108ee9;
  border-color: #108ee9;
  color: #fff;
}
.ant-tag-purple {
  color: #7265e6;
  background: #e4e2fa;
  border-color: #e4e2fa;
}
.ant-tag-purple-inverse {
  background: #7265e6;
  border-color: #7265e6;
  color: #fff;
}
`,
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-tag-root {
  display: inline-block;
}
`
                ]
            },] },
];
/** @nocollapse */
NzTagComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
];
NzTagComponent.propDecorators = {
    "nzClosable": [{ type: Input },],
    "nzColor": [{ type: Input },],
    "nzBeforeClose": [{ type: Output },],
    "nzClose": [{ type: Output },],
    "_dataShow": [{ type: HostBinding, args: ['attr.data-show',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTagModule {
}
NzTagModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    NzTagComponent, NzCheckableTagComponent
                ],
                exports: [
                    NzTagComponent, NzCheckableTagComponent
                ]
            },] },
];
/** @nocollapse */
NzTagModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTimelineItemComponent {
    constructor() {
        this.itemHeadClass = { 'ant-timeline-item-head-blue': true };
        this._color = 'blue';
        this._custom = false;
        this._lastItem = false;
    }
    /**
     * @param {?} color
     * @return {?}
     */
    set nzColor(color) {
        this._color = color;
        // TODO: There is no removal process, is the result correct?
        if (color === 'green') {
            this.itemHeadClass['ant-timeline-item-head-green'] = true;
        }
        else if (color === 'red') {
            this.itemHeadClass['ant-timeline-item-head-red'] = true;
        }
        else {
            this.itemHeadClass['ant-timeline-item-head-blue'] = true;
        }
    }
    /**
     * @return {?}
     */
    get nzColor() {
        return this._color;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._customContent) {
            this._custom = true;
        }
    }
}
NzTimelineItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timeline-item',
                encapsulation: ViewEncapsulation.None,
                template: `
    <li
      class="ant-timeline-item"
      [class.ant-timeline-item-last]="_lastItem">
      <div class="ant-timeline-item-tail"></div>
      <div class="ant-timeline-item-head"
        [class.ant-timeline-item-head-custom]="_custom"
        [ngClass]="itemHeadClass">
        <ng-template [ngTemplateOutlet]="_customContent">
        </ng-template>
      </div>
      <div class="ant-timeline-item-content">
        <ng-content></ng-content>
      </div>
    </li>`,
                styles: []
            },] },
];
/** @nocollapse */
NzTimelineItemComponent.ctorParameters = () => [];
NzTimelineItemComponent.propDecorators = {
    "_customContent": [{ type: ContentChild, args: ['custom',] },],
    "nzColor": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTimelineComponent {
    constructor() {
        this._isPending = false;
        this.items = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this._pendingContent) {
            this._isPending = true;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout(_ => {
            if (this._listOfTimeline && this._listOfTimeline.length) {
                const /** @type {?} */ listArray = this._listOfTimeline.toArray();
                listArray[listArray.length - 1]._lastItem = true;
            }
        });
    }
}
NzTimelineComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-timeline',
                encapsulation: ViewEncapsulation.None,
                template: `
    <ul class="ant-timeline" [class.ant-timeline-pending]="_isPending">
      <ng-content></ng-content>
      <li *ngIf="_isPending" class="ant-timeline-item ant-timeline-item-pending">
        <div class="ant-timeline-item-tail"></div>
        <div class="ant-timeline-item-head ant-timeline-item-head-blue"></div>
        <div class="ant-timeline-item-content">
          <ng-template [ngTemplateOutlet]="_pendingContent">
          </ng-template>
        </div>
      </li>
    </ul>`,
                styles: [`/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-timeline {
  list-style: none;
  margin: 0;
  padding: 0;
}
.ant-timeline-item {
  position: relative;
  padding: 0 0 12px;
  list-style: none;
  margin: 0;
}
.ant-timeline-item-tail {
  position: absolute;
  left: 5px;
  top: 0;
  height: 100%;
  border-left: 2px solid #e9e9e9;
}
.ant-timeline-item-pending .ant-timeline-item-tail {
  display: none;
}
.ant-timeline-item-head {
  position: absolute;
  width: 12px;
  height: 12px;
  background-color: #fff;
  border-radius: 100px;
  border: 2px solid transparent;
}
.ant-timeline-item-head-blue {
  border-color: #108ee9;
  color: #108ee9;
}
.ant-timeline-item-head-red {
  border-color: #f04134;
  color: #f04134;
}
.ant-timeline-item-head-green {
  border-color: #00a854;
  color: #00a854;
}
.ant-timeline-item-head-custom {
  position: absolute;
  text-align: center;
  width: 40px;
  left: -14px;
  line-height: 1;
  margin-top: 6px;
  border: 0;
  height: auto;
  border-radius: 0;
  padding: 3px 0;
  font-size: 12px;
  transform: translateY(-50%);
}
.ant-timeline-item-content {
  padding: 0 0 10px 24px;
  font-size: 12px;
  position: relative;
  top: -3px;
}
.ant-timeline-item-last .ant-timeline-item-tail {
  border-left: 2px dotted #e9e9e9;
  display: none;
}
.ant-timeline-item-last .ant-timeline-item-content {
  min-height: 48px;
}
.ant-timeline.ant-timeline-pending .ant-timeline-item-last .ant-timeline-item-tail {
  display: block;
}
`]
            },] },
];
/** @nocollapse */
NzTimelineComponent.ctorParameters = () => [];
NzTimelineComponent.propDecorators = {
    "_listOfTimeline": [{ type: ContentChildren, args: [NzTimelineItemComponent,] },],
    "_pendingContent": [{ type: ContentChild, args: ['pending',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTimelineModule {
}
NzTimelineModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NzTimelineItemComponent, NzTimelineComponent],
                exports: [NzTimelineItemComponent, NzTimelineComponent],
                imports: [CommonModule]
            },] },
];
/** @nocollapse */
NzTimelineModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTransferListComponent {
    /**
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} differs
     */
    constructor(_el, _renderer, differs) {
        this._el = _el;
        this._renderer = _renderer;
        this._showSearch = false;
        // region: fields
        this.direction = '';
        this.titleText = '';
        this.dataSource = [];
        this.itemUnit = '';
        this.itemsUnit = '';
        this.filter = '';
        // events
        this.handleSelectAll = new EventEmitter();
        this.handleSelect = new EventEmitter();
        this.filterChange = new EventEmitter();
        // endregion
        // region: styles
        this._prefixCls = 'ant-transfer-list';
        this._classList = [];
        // endregion
        // region: select all
        this.stat = {
            checkAll: false,
            checkHalf: false,
            checkCount: 0,
            shownCount: 0
        };
        this._listDiffer = differs.find([]).create(null);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set showSearch(value) {
        this._showSearch = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get showSearch() {
        return this._showSearch;
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(cls => this._renderer.removeClass(this._el.nativeElement, cls));
        this._classList = [
            this._prefixCls,
            !!this.footer && `${this._prefixCls}-with-footer`
        ].filter(item => !!item);
        this._classList.forEach(cls => this._renderer.addClass(this._el.nativeElement, cls));
    }
    /**
     * @param {?} status
     * @return {?}
     */
    onHandleSelectAll(status) {
        this.dataSource.forEach(item => {
            if (!item.disabled && !item._hiden) {
                item.checked = status;
            }
        });
        // // ngModelChange 事件内对状态的变更会无效，因此使用延迟改变执行顺序
        // setTimeout(() => this.updateCheckStatus());
        this.updateCheckStatus();
        this.handleSelectAll.emit(status);
    }
    /**
     * @return {?}
     */
    updateCheckStatus() {
        const /** @type {?} */ validCount = this.dataSource.filter(w => !w.disabled).length;
        this.stat.checkCount = this.dataSource.filter(w => w.checked && !w.disabled).length;
        this.stat.shownCount = this.dataSource.filter(w => !w._hiden).length;
        this.stat.checkAll = validCount > 0 && validCount === this.stat.checkCount;
        this.stat.checkHalf = this.stat.checkCount > 0 && !this.stat.checkAll;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    handleFilter(value) {
        this.filter = value;
        this.dataSource.forEach(item => {
            item._hiden = value.length > 0 && !this.matchFilter(value, item);
        });
        this.stat.shownCount = this.dataSource.filter(w => !w._hiden).length;
        this.filterChange.emit({ direction: this.direction, value });
    }
    /**
     * @return {?}
     */
    handleClear() {
        this.handleFilter('');
    }
    /**
     * @param {?} text
     * @param {?} item
     * @return {?}
     */
    matchFilter(text, item) {
        if (this.filterOption) {
            return this.filterOption(text, item);
        }
        return item.title.includes(text);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('footer' in changes) {
            this._setClassMap();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        const /** @type {?} */ change = this._listDiffer.diff(this.dataSource);
        if (change) {
            this.updateCheckStatus();
        }
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _handleSelect(item) {
        if (item.disabled) {
            return;
        }
        item.checked = !item.checked;
        this.updateCheckStatus();
        this.handleSelect.emit(item);
    }
}
NzTransferListComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-transfer-list',
                template: `
    <div class="ant-transfer-list-header">
      <label nz-checkbox [(ngModel)]="stat.checkAll" (ngModelChange)="onHandleSelectAll($event)"
        [nzIndeterminate]="stat.checkHalf"></label><span class="ant-transfer-list-header-selected">
        <span>{{ (stat.checkCount > 0 ? stat.checkCount + '/' : '') + stat.shownCount }} {{ dataSource.length > 1 ? itemsUnit : itemUnit }}</span>
        <span *ngIf="titleText" class="ant-transfer-list-header-title">{{ titleText }}</span>
      </span>
    </div>
    <div class="{{showSearch ? 'ant-transfer-list-body ant-transfer-list-body-with-search' : 'ant-transfer-list-body'}}"
      [ngClass]="{'ant-transfer__nodata': stat.shownCount === 0}">
      <div *ngIf="showSearch" class="ant-transfer-list-body-search-wrapper">
        <nz-transfer-search class="ant-transfer-list-search"
          (valueChanged)="handleFilter($event)"
          (valueClear)="handleClear()"
          [placeholder]="searchPlaceholder"
          [value]="filter"></nz-transfer-search>
      </div>
      <ul class="ant-transfer-list-content">
        <ng-container *ngFor="let item of dataSource">
          <li *ngIf="!item._hiden" (click)="_handleSelect(item)" class="ant-transfer-list-content-item">
            <label nz-checkbox [ngModel]="item.checked" [nzDisabled]="item.disabled">
              <span>
                <ng-container *ngIf="!render; else renderContainer">{{ item.title }}</ng-container>
                <ng-template #renderContainer [ngTemplateOutlet]="render" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>
              </span>
            </label>
          </li>
        </ng-container>
      </ul>
      <div class="ant-transfer-list-body-not-found">{{ notFoundContent }}</div>
    </div>
    <div *ngIf="footer" class="ant-transfer-list-footer">
        <ng-template [ngTemplateOutlet]="footer" [ngTemplateOutletContext]="{ $implicit: direction }"></ng-template>
    </div>
  `
            },] },
];
/** @nocollapse */
NzTransferListComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: IterableDiffers, },
];
NzTransferListComponent.propDecorators = {
    "direction": [{ type: Input },],
    "titleText": [{ type: Input },],
    "dataSource": [{ type: Input },],
    "itemUnit": [{ type: Input },],
    "itemsUnit": [{ type: Input },],
    "filter": [{ type: Input },],
    "showSearch": [{ type: Input },],
    "searchPlaceholder": [{ type: Input },],
    "notFoundContent": [{ type: Input },],
    "filterOption": [{ type: Input },],
    "render": [{ type: Input },],
    "footer": [{ type: Input },],
    "handleSelectAll": [{ type: Output },],
    "handleSelect": [{ type: Output },],
    "filterChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTransferSearchComponent {
    constructor() {
        this.valueChanged = new EventEmitter();
        this.valueClear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    _handle() {
        this.valueChanged.emit(this.value);
    }
    /**
     * @return {?}
     */
    _clear() {
        this.value = '';
        this.valueClear.emit();
    }
}
NzTransferSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-transfer-search',
                template: `
    <input nz-input [(ngModel)]="value" (ngModelChange)="_handle()"
        [placeholder]="placeholder" class="ant-transfer-list-search">
    <a *ngIf="value && value.length > 0; else def" class="ant-transfer-list-search-action" (click)="_clear()">
        <i class="anticon anticon-cross-circle"></i>
    </a>
    <ng-template #def><span class="ant-transfer-list-search-action"><i class="anticon anticon-search"></i></span></ng-template>
  `
            },] },
];
/** @nocollapse */
NzTransferSearchComponent.ctorParameters = () => [];
NzTransferSearchComponent.propDecorators = {
    "placeholder": [{ type: Input },],
    "value": [{ type: Input },],
    "valueChanged": [{ type: Output },],
    "valueClear": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

/**
 * @record
 */

class NzTransferComponent {
    /**
     * @param {?} _locale
     * @param {?} el
     * @param {?} cd
     */
    constructor(_locale, el, cd) {
        this._locale = _locale;
        this.el = el;
        this.cd = cd;
        this._showSearch = false;
        this.leftFilter = '';
        this.rightFilter = '';
        // region: fields
        this.nzDataSource = [];
        this.nzTitles = this._locale.translate('Transfer.titles').split(',');
        this.nzOperations = [];
        this.nzItemUnit = this._locale.translate('Transfer.itemUnit');
        this.nzItemsUnit = this._locale.translate('Transfer.itemsUnit');
        this.canMove = (arg) => of$1(arg.list);
        this.nzSearchPlaceholder = this._locale.translate('Transfer.searchPlaceholder');
        this.nzNotFoundContent = this._locale.translate('Transfer.notFoundContent');
        // events
        this.nzChange = new EventEmitter();
        this.nzSearchChange = new EventEmitter();
        this.nzSelectChange = new EventEmitter();
        // endregion
        // region: process data
        // left
        this.leftDataSource = [];
        // right
        this.rightDataSource = [];
        this.handleLeftSelectAll = (checked) => this.handleSelect('left', checked);
        this.handleRightSelectAll = (checked) => this.handleSelect('right', checked);
        this.handleLeftSelect = (item) => this.handleSelect('left', item.checked, item);
        this.handleRightSelect = (item) => this.handleSelect('right', item.checked, item);
        // endregion
        // region: operation
        this.leftActive = false;
        this.rightActive = false;
        this.moveToLeft = () => this.moveTo('left');
        this.moveToRight = () => this.moveTo('right');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowSearch(value) {
        this._showSearch = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowSearch() {
        return this._showSearch;
    }
    /**
     * @return {?}
     */
    splitDataSource() {
        this.leftDataSource = [];
        this.rightDataSource = [];
        this.nzDataSource.forEach(record => {
            if (record.direction === 'right') {
                this.rightDataSource.push(record);
            }
            else {
                this.leftDataSource.push(record);
            }
        });
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    getCheckedData(direction) {
        return this[direction === 'left' ? 'leftDataSource' : 'rightDataSource'].filter(w => w.checked);
    }
    /**
     * @param {?} direction
     * @param {?} checked
     * @param {?=} item
     * @return {?}
     */
    handleSelect(direction, checked, item) {
        const /** @type {?} */ list = this.getCheckedData(direction);
        this.updateOperationStatus(direction, list.length);
        this.nzSelectChange.emit({ direction, checked, list, item });
    }
    /**
     * @param {?} ret
     * @return {?}
     */
    handleFilterChange(ret) {
        this.nzSearchChange.emit(ret);
        this.cd.detectChanges();
    }
    /**
     * @param {?} direction
     * @param {?=} count
     * @return {?}
     */
    updateOperationStatus(direction, count) {
        this[direction === 'right' ? 'leftActive' : 'rightActive'] = (typeof count === 'undefined' ? this.getCheckedData(direction).filter(w => !w.disabled).length : count) > 0;
        this.cd.detectChanges();
    }
    /**
     * @param {?} direction
     * @return {?}
     */
    moveTo(direction) {
        const /** @type {?} */ oppositeDirection = direction === 'left' ? 'right' : 'left';
        this.updateOperationStatus(oppositeDirection, 0);
        const /** @type {?} */ datasource = direction === 'left' ? this.rightDataSource : this.leftDataSource;
        const /** @type {?} */ moveList = datasource.filter(item => item.checked === true && !item.disabled);
        this.canMove({ direction, list: moveList })
            .subscribe(newMoveList => this.truthMoveTo(direction, newMoveList.filter(i => !!i)), () => moveList.forEach(i => i.checked = false));
    }
    /**
     * @param {?} direction
     * @param {?} list
     * @return {?}
     */
    truthMoveTo(direction, list) {
        const /** @type {?} */ oppositeDirection = direction === 'left' ? 'right' : 'left';
        const /** @type {?} */ datasource = direction === 'left' ? this.rightDataSource : this.leftDataSource;
        const /** @type {?} */ targetDatasource = direction === 'left' ? this.leftDataSource : this.rightDataSource;
        for (const /** @type {?} */ item of list) {
            const /** @type {?} */ idx = datasource.indexOf(item);
            if (idx === -1)
                continue;
            item.checked = false;
            targetDatasource.push(item);
            datasource.splice(idx, 1);
        }
        this.updateOperationStatus(oppositeDirection);
        this.nzChange.emit({
            from: oppositeDirection,
            to: direction,
            list
        });
        // this.nzSelectChange.emit({ direction: oppositeDirection, list: [] });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('nzDataSource' in changes || 'nzTargetKeys' in changes) {
            this.splitDataSource();
            this.updateOperationStatus('left');
            this.updateOperationStatus('right');
        }
        this.cd.detectChanges();
    }
}
NzTransferComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-transfer',
                template: `
    <nz-transfer-list class="ant-transfer-list" [ngStyle]="nzListStyle" data-direction="left"
        [titleText]="nzTitles[0]"
        [dataSource]="leftDataSource"
        [filter]="leftFilter"
        [filterOption]="nzFilterOption"
        (filterChange)="handleFilterChange($event)"
        [render]="render"
        [showSearch]="nzShowSearch"
        [searchPlaceholder]="nzSearchPlaceholder"
        [notFoundContent]="nzNotFoundContent"
        [itemUnit]="nzItemUnit"
        [itemsUnit]="nzItemsUnit"
        [footer]="footer"
        (handleSelect)="handleLeftSelect($event)"
        (handleSelectAll)="handleLeftSelectAll($event)"></nz-transfer-list>
    <div class="ant-transfer-operation">
        <button nz-button (click)="moveToLeft()" [disabled]="!leftActive" [nzType]="'primary'" [nzSize]="'small'">
            <i class="anticon anticon-left"></i><span *ngIf="nzOperations[1]">{{ nzOperations[1] }}</span>
        </button>
        <button nz-button (click)="moveToRight()" [disabled]="!rightActive" [nzType]="'primary'" [nzSize]="'small'">
            <i class="anticon anticon-right"></i><span *ngIf="nzOperations[0]">{{ nzOperations[0] }}</span>
        </button>
    </div>
    <nz-transfer-list class="ant-transfer-list" [ngStyle]="nzListStyle" data-direction="right"
        [titleText]="nzTitles[1]"
        [dataSource]="rightDataSource"
        [filter]="rightFilter"
        [filterOption]="nzFilterOption"
        (filterChange)="handleFilterChange($event)"
        [render]="render"
        [showSearch]="nzShowSearch"
        [searchPlaceholder]="nzSearchPlaceholder"
        [notFoundContent]="nzNotFoundContent"
        [itemUnit]="nzItemUnit"
        [itemsUnit]="nzItemsUnit"
        [footer]="footer"
        (handleSelect)="handleRightSelect($event)"
        (handleSelectAll)="handleRightSelectAll($event)"></nz-transfer-list>
  `,
                encapsulation: ViewEncapsulation.None,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
@keyframes antCheckboxEffect {
  0% {
    transform: scale(1);
    opacity: 0.5;
  }
  100% {
    transform: scale(1.6);
    opacity: 0;
  }
}
.ant-transfer {
  position: relative;
  line-height: 1.5;
}
.ant-transfer-list {
  font-size: 12px;
  border: 1px solid #d9d9d9;
  display: inline-block;
  border-radius: 4px;
  vertical-align: middle;
  position: relative;
  width: 180px;
  height: 200px;
  padding-top: 33px;
}
.ant-transfer-list-with-footer {
  padding-bottom: 33px;
}
.ant-transfer-list-search-action {
  color: rgba(0, 0, 0, 0.25);
  position: absolute;
  top: 4px;
  right: 4px;
  bottom: 4px;
  width: 28px;
  line-height: 26px;
  text-align: center;
  font-size: 14px;
}
.ant-transfer-list-search-action .anticon {
  transition: all .3s;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.25);
}
.ant-transfer-list-search-action .anticon:hover {
  color: rgba(0, 0, 0, 0.43);
}
span.ant-transfer-list-search-action {
  pointer-events: none;
}
.ant-transfer-list-header {
  padding: 7px 15px;
  border-radius: 4px 4px 0 0;
  background: #fff;
  color: rgba(0, 0, 0, 0.65);
  border-bottom: 1px solid #e9e9e9;
  overflow: hidden;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
}
.ant-transfer-list-header-title {
  position: absolute;
  right: 15px;
}
.ant-transfer-list-body {
  font-size: 12px;
  position: relative;
  height: 100%;
}
.ant-transfer-list-body-search-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  padding: 4px;
  width: 100%;
}
.ant-transfer-list-body-with-search {
  padding-top: 34px;
}
.ant-transfer-list-content {
  height: 100%;
  overflow: auto;
}
.ant-transfer-list-content > .LazyLoad {
  animation: transferHighlightIn 1s;
}
.ant-transfer-list-content-item {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
  padding: 7px 15px;
  min-height: 32px;
  transition: all .3s;
}
.ant-transfer-list-content-item:not(.ant-transfer-list-content-item-disabled):hover {
  cursor: pointer;
  background-color: #ecf6fd;
}
.ant-transfer-list-content-item-disabled {
  cursor: not-allowed;
  color: rgba(0, 0, 0, 0.25);
}
.ant-transfer-list-body-not-found {
  padding-top: 0;
  color: rgba(0, 0, 0, 0.25);
  text-align: center;
  display: none;
  position: absolute;
  top: 50%;
  width: 100%;
  margin-top: -10px;
}
.ant-transfer-list-content:empty + .ant-transfer-list-body-not-found {
  display: block;
}
.ant-transfer-list-footer {
  border-top: 1px solid #e9e9e9;
  border-radius: 0 0 4px 4px;
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
}
.ant-transfer-operation {
  display: inline-block;
  overflow: hidden;
  margin: 0 8px;
  vertical-align: middle;
}
.ant-transfer-operation .ant-btn {
  display: block;
}
.ant-transfer-operation .ant-btn:first-child {
  margin-bottom: 4px;
}
.ant-transfer-operation .ant-btn .anticon {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
}
:root .ant-transfer-operation .ant-btn .anticon {
  filter: none;
}
:root .ant-transfer-operation .ant-btn .anticon {
  font-size: 12px;
}
@keyframes transferHighlightIn {
  0% {
    background: #d2eafb;
  }
  100% {
    background: transparent;
  }
}
`,
                    `nz-transfer {
  display: block;
}
nz-transfer-list .ant-checkbox-wrapper {
  margin-right: 0 !important;
}
.ant-transfer__nodata .ant-transfer-list-content {
  display: none;
}
.ant-transfer__nodata .ant-transfer-list-body-not-found {
  display: block;
}
`
                ],
                // tslint:disable-next-line:use-host-property-decorator
                host: {
                    '[class.ant-transfer]': 'true'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
NzTransferComponent.ctorParameters = () => [
    { type: NzLocaleService, },
    { type: ElementRef, },
    { type: ChangeDetectorRef, },
];
NzTransferComponent.propDecorators = {
    "nzDataSource": [{ type: Input },],
    "nzTitles": [{ type: Input },],
    "nzOperations": [{ type: Input },],
    "nzListStyle": [{ type: Input },],
    "nzItemUnit": [{ type: Input },],
    "nzItemsUnit": [{ type: Input },],
    "canMove": [{ type: Input },],
    "render": [{ type: ContentChild, args: ['render',] },],
    "footer": [{ type: ContentChild, args: ['footer',] },],
    "nzShowSearch": [{ type: Input },],
    "nzFilterOption": [{ type: Input },],
    "nzSearchPlaceholder": [{ type: Input },],
    "nzNotFoundContent": [{ type: Input },],
    "nzChange": [{ type: Output },],
    "nzSearchChange": [{ type: Output },],
    "nzSelectChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzTransferModule {
}
NzTransferModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, NzCheckboxModule, NzButtonModule, NzInputModule, NzLocaleModule],
                declarations: [NzTransferComponent, NzTransferListComponent, NzTransferSearchComponent],
                exports: [NzTransferComponent]
            },] },
];
/** @nocollapse */
NzTransferModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzUploadBtnComponent {
    /**
     * @param {?} http
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} cd
     */
    constructor(http$$1, _el, _renderer, cd) {
        this.http = http$$1;
        this._el = _el;
        this._renderer = _renderer;
        this.cd = cd;
        this.reqs = {};
        this.inited = false;
        this.destroy = false;
        // region: fields
        this.classes = [];
        // region: styles
        this._prefixCls = 'ant-upload';
        this._classList = [];
    }
    /**
     * @return {?}
     */
    onClick() {
        if (this.options.disabled || !this.file)
            return;
        (/** @type {?} */ (this.file.nativeElement)).click();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (this.options.disabled)
            return;
        if (e.key === 'Enter') {
            this.onClick();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFileDrop(e) {
        if (this.options.disabled)
            return;
        if (e.type === 'dragover') {
            e.preventDefault();
            return;
        }
        const /** @type {?} */ files = Array.prototype.slice.call(e.dataTransfer.files).filter(file => this.attrAccept(file, this.options.accept));
        this.uploadFiles(files);
        e.preventDefault();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onChange(e) {
        if (this.options.disabled)
            return;
        this.uploadFiles(e.target.files);
        e.target.value = '';
    }
    /**
     * @param {?} file
     * @param {?} acceptedFiles
     * @return {?}
     */
    attrAccept(file, acceptedFiles) {
        if (file && acceptedFiles) {
            const /** @type {?} */ acceptedFilesArray = Array.isArray(acceptedFiles)
                ? acceptedFiles
                : acceptedFiles.split(',');
            const /** @type {?} */ fileName = file.name || '';
            const /** @type {?} */ mimeType = file.type || '';
            const /** @type {?} */ baseMimeType = mimeType.replace(/\/.*$/, '');
            return acceptedFilesArray.some(type => {
                const /** @type {?} */ validType = type.trim();
                if (validType.charAt(0) === '.') {
                    return fileName.toLowerCase().indexOf(validType.toLowerCase(), fileName.toLowerCase().length - validType.toLowerCase().length) !== -1;
                }
                else if (/\/\*$/.test(validType)) {
                    // This is something like a image/* mime type
                    return baseMimeType === validType.replace(/\/.*$/, '');
                }
                return mimeType === validType;
            });
        }
        return true;
    }
    /**
     * @param {?} fileList
     * @return {?}
     */
    uploadFiles(fileList) {
        let /** @type {?} */ postFiles = Array.prototype.slice.call(fileList);
        this.options.filters.forEach(f => postFiles = f.fn(postFiles));
        postFiles.forEach((file) => {
            file.uid = Math.random().toString(36).substring(2);
            this.upload(file, postFiles);
        });
    }
    /**
     * @param {?} file
     * @param {?} fileList
     * @return {?}
     */
    upload(file, fileList) {
        if (!this.options.beforeUpload) {
            return this.post(file);
        }
        const /** @type {?} */ before = this.options.beforeUpload(file, fileList);
        if (before instanceof Observable$1) {
            before.subscribe((processedFile) => {
                const /** @type {?} */ processedFileType = Object.prototype.toString.call(processedFile);
                if (processedFileType === '[object File]' || processedFileType === '[object Blob]') {
                    this.post(processedFile);
                }
                else {
                    this.post(file);
                }
            }, (err) => {
                // tslint:disable-next-line:no-unused-expression
                console && console.log(err);
            });
        }
        else if (before !== false) {
            return this.post(file);
        }
    }
    /**
     * @param {?} file
     * @return {?}
     */
    post(file) {
        if (this.destroy)
            return;
        const /** @type {?} */ opt = this.options;
        const { uid } = file;
        let { data } = opt;
        if (typeof data === 'function') {
            data = data(file);
        }
        this.reqs[uid] = (opt.customRequest || this.xhr).call(this, {
            action: opt.action,
            name: opt.name,
            headers: opt.headers,
            file,
            data,
            withCredentials: opt.withCredentials,
            onProgress: opt.onProgress ? e => {
                opt.onProgress(e, file);
            } : null,
            onSuccess: (ret, xhr) => {
                delete this.reqs[uid];
                opt.onSuccess(ret, file, xhr);
            },
            onError: (xhr) => {
                delete this.reqs[uid];
                opt.onError(xhr, file);
            }
        });
        opt.onStart(file);
    }
    /**
     * @param {?} args
     * @return {?}
     */
    xhr(args) {
        const /** @type {?} */ formData = new FormData();
        formData.append(args.name, args.file);
        if (args.data) {
            Object.keys(args.data).map(key => {
                formData.append(key, args.data[key]);
            });
        }
        if (!args.headers)
            args.headers = {};
        if (args.headers['X-Requested-With'] !== null) {
            args.headers['X-Requested-With'] = `XMLHttpRequest`;
        }
        const /** @type {?} */ req = new HttpRequest('POST', args.action, formData, {
            reportProgress: true,
            withCredentials: args.withCredentials,
            headers: new HttpHeaders(args.headers)
        });
        return this.http.request(req).subscribe((event) => {
            if (event.type === HttpEventType.UploadProgress) {
                if (event.total > 0) {
                    event.percent = event.loaded / event.total * 100;
                }
                args.onProgress(event);
            }
            else if (event instanceof HttpResponse) {
                args.onSuccess(event.body, event);
            }
        }, (err) => {
            this.abort(args);
            args.onError(err);
        });
    }
    /**
     * @param {?=} file
     * @return {?}
     */
    abort(file) {
        if (file) {
            let /** @type {?} */ uid = file;
            if (file && file.uid) {
                uid = file.uid;
            }
            if (this.reqs[uid]) {
                this.reqs[uid].unsubscribe();
                delete this.reqs[uid];
            }
        }
        else {
            Object.keys(this.reqs).forEach((uid) => {
                if (this.reqs[uid]) {
                    this.reqs[uid].unsubscribe();
                }
                delete this.reqs[uid];
            });
        }
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(cls => this._renderer.removeClass(this._el.nativeElement, cls));
        this._classList = [
            this._prefixCls,
            this.options.disabled && `${this._prefixCls}-disabled`,
            ...this.classes
        ].filter(item => !!item);
        this._classList.forEach(cls => this._renderer.addClass(this._el.nativeElement, cls));
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inited = true;
        this._setClassMap();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.inited) {
            this._setClassMap();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy = true;
        this.abort();
    }
}
NzUploadBtnComponent.decorators = [
    { type: Component, args: [{
                selector: '[nz-upload-btn]',
                template: `
  <input type="file" #file (change)="onChange($event)"
    [attr.accept]="options.accept" [multiple]="options.multiple" style="display: none;">
  <ng-content></ng-content>
  `,
                host: {
                    '[class.ant-upload]': 'true',
                    '[attr.tabindex]': '"0"',
                    '[attr.role]': '"button"'
                },
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
NzUploadBtnComponent.ctorParameters = () => [
    { type: HttpClient, },
    { type: ElementRef, },
    { type: Renderer2, },
    { type: ChangeDetectorRef, },
];
NzUploadBtnComponent.propDecorators = {
    "file": [{ type: ViewChild, args: ['file',] },],
    "classes": [{ type: Input },],
    "options": [{ type: Input },],
    "onClick": [{ type: HostListener, args: ['click',] },],
    "onKeyDown": [{ type: HostListener, args: ['keydown', ['$event'],] },],
    "onFileDrop": [{ type: HostListener, args: ['drop', ['$event'],] }, { type: HostListener, args: ['dragover', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzUploadListComponent {
    /**
     * @param {?} _el
     * @param {?} _renderer
     * @param {?} _locale
     */
    constructor(_el, _renderer, _locale) {
        this._el = _el;
        this._renderer = _renderer;
        this._locale = _locale;
        // endregion
        // region: styles
        this._prefixCls = 'ant-upload-list';
        this._classList = [];
        this.locale = {
            uploading: this._locale.translate('Upload.uploading'),
            previewFile: this._locale.translate('Upload.previewFile'),
            removeFile: this._locale.translate('Upload.removeFile'),
        };
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        this._classList.forEach(cls => this._renderer.removeClass(this._el.nativeElement, cls));
        this._classList = [
            this._prefixCls,
            `${this._prefixCls}-${this.listType}`
        ].filter(item => !!item);
        this._classList.forEach(cls => this._renderer.addClass(this._el.nativeElement, cls));
    }
    /**
     * @param {?} file
     * @param {?} e
     * @return {?}
     */
    handlePreview(file, e) {
        if (!this.onPreview)
            return;
        e.preventDefault();
        return this.onPreview(file);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    handleClose(file) {
        if (this.onRemove)
            this.onRemove(file);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._setClassMap();
    }
}
NzUploadListComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-upload-list',
                template: `
  <div *ngFor="let file of items" class="ant-upload-list-item ant-upload-list-item-{{file.status}}" @itemState>
    <ng-template #icon>
      <ng-container *ngIf="listType === 'picture' || listType === 'picture-card'; else defIcon">
        <ng-container *ngIf="file.status === 'uploading' || (!file.thumbUrl && !file.url); else thumbIcon">
          <div *ngIf="listType === 'picture-card'" class="ant-upload-list-item-uploading-text">{{ locale.uploading }}</div>
          <i *ngIf="listType !== 'picture-card'" class="anticon anticon-picture ant-upload-list-item-thumbnail"></i>
        </ng-container>
      </ng-container>
      <ng-template #defIcon>
        <i class="anticon anticon-{{file.status === 'uploading' ? 'loading anticon-spin' : 'paper-clip'}}"></i>
      </ng-template>
      <ng-template #thumbIcon>
        <a class="ant-upload-list-item-thumbnail" target="_blank" rel="noopener noreferrer"
          [href]="file.thumbUrl || file.url"
          (click)="handlePreview(file, $event)">
          <img [src]="file.thumbUrl || file.url" [attr.alt]="file.name" />
        </a>
      </ng-template>
    </ng-template>
    <ng-template #preview>
      <ng-container *ngIf="file.url; else prevText">
        <a [href]="file.thumbUrl || file.url" target="_blank" rel="noopener noreferrer"
          (click)="handlePreview(file, $event)" class="ant-upload-list-item-name" title="{{ file.name }}">{{ file.name }}</a>
      </ng-container>
      <ng-template #prevText>
        <span (click)="handlePreview(file, $event)" class="ant-upload-list-item-name" title="{{ file.name }}">{{ file.name }}</span>
      </ng-template>
    </ng-template>
    <div class="ant-upload-list-item-info">
      <nz-tooltip *ngIf="file.status === 'error'" [nzTitle]="file.message">
        <span nz-tooltip>
          <ng-template [ngTemplateOutlet]="icon"></ng-template>
          <ng-template [ngTemplateOutlet]="preview"></ng-template>
        </span>
      </nz-tooltip>
      <span *ngIf="file.status !== 'error'">
        <ng-template [ngTemplateOutlet]="icon"></ng-template>
        <ng-template [ngTemplateOutlet]="preview"></ng-template>
      </span>
    </div>
    <ng-container *ngIf="listType === 'picture-card' && file.status !== 'uploading'; else cross">
      <span class="ant-upload-list-item-actions">
        <a *ngIf="icons.showPreviewIcon" [href]="file.thumbUrl || file.url"
          target="_blank" rel="noopener noreferrer"
          title="{{ locale.previewFile }}"
          [ngStyle]="!(file.url || file.thumbUrl) && {'opacity': .5, 'pointer-events': 'none'}"
          (click)="handlePreview(file, $event)">
            <i class="anticon anticon-eye-o"></i>
        </a>
        <i *ngIf="icons.showRemoveIcon" (click)="handleClose(file)" class="anticon anticon-delete" title="{{ locale.removeFile }}"></i>
      </span>
    </ng-container>
    <ng-template #cross>
      <i *ngIf="icons.showRemoveIcon" (click)="handleClose(file)" class="anticon anticon-cross" title="{{ locale.removeFile }}"></i>
    </ng-template>
    <div *ngIf="file.status === 'uploading'" class="ant-upload-list-item-progress">
      <nz-progress [ngModel]="file.percent" [nzShowInfo]="false" [nzStrokeWidth]="2"></nz-progress>
    </div>
  </div>
  `,
                animations: [
                    trigger('itemState', [
                        transition(':enter', [
                            style({ height: '0', width: '0', opacity: 0 }),
                            animate(150, style({ height: '*', width: '*', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            animate(150, style({ height: '0', width: '0', opacity: 0 }))
                        ])
                    ])
                ],
                preserveWhitespaces: false
            },] },
];
/** @nocollapse */
NzUploadListComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: Renderer2, },
    { type: NzLocaleService, },
];
NzUploadListComponent.propDecorators = {
    "listType": [{ type: Input },],
    "items": [{ type: Input },],
    "icons": [{ type: Input },],
    "onPreview": [{ type: Input },],
    "onRemove": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzUploadComponent {
    /**
     * @param {?} cd
     * @param {?} _locale
     */
    constructor(cd, _locale) {
        this.cd = cd;
        this._locale = _locale;
        this.inited = false;
        // region: fields
        this.nzType = 'select';
        this.nzLimit = 0;
        this.nzSize = 0;
        this.nzFilter = [];
        this.nzFileList = [];
        this.nzFileListChange = new EventEmitter();
        this._disabled = false;
        this.nzListType = 'text';
        this._multiple = false;
        this.nzName = 'file';
        this._showUploadList = true;
        this._showBtn = true;
        this._withCredentials = false;
        this.nzChange = new EventEmitter();
        this.uploadErrorText = this._locale.translate('Upload.uploadError');
        this.onStart = (file) => {
            if (!this.nzFileList)
                this.nzFileList = [];
            const /** @type {?} */ targetItem = this.fileToObject(file);
            targetItem.status = 'uploading';
            this.nzFileList.push(targetItem);
            this.genThumb(targetItem);
            this.nzFileListChange.emit(this.nzFileList);
            this.nzChange.emit({ file: targetItem, fileList: this.nzFileList });
            // fix ie progress
            if (!(/** @type {?} */ (window)).FormData) {
                this.autoUpdateProgress(targetItem);
            }
            this.cd.detectChanges();
        };
        this.onProgress = (e, file) => {
            const /** @type {?} */ fileList = this.nzFileList;
            const /** @type {?} */ targetItem = this.getFileItem(file, fileList);
            // removed
            if (!targetItem)
                return;
            targetItem.percent = e.percent;
            this.nzChange.emit({
                event: e,
                file: Object.assign({}, targetItem),
                fileList: this.nzFileList,
            });
            this.cd.detectChanges();
        };
        this.onSuccess = (res, file, xhr) => {
            this.clearProgressTimer();
            const /** @type {?} */ fileList = this.nzFileList;
            const /** @type {?} */ targetItem = this.getFileItem(file, fileList);
            // removed
            if (!targetItem)
                return;
            targetItem.status = 'done';
            targetItem.response = res;
            this.nzChange.emit({
                file: Object.assign({}, targetItem),
                fileList,
            });
            this.cd.detectChanges();
        };
        this.onError = (err, file) => {
            this.clearProgressTimer();
            const /** @type {?} */ fileList = this.nzFileList;
            const /** @type {?} */ targetItem = this.getFileItem(file, fileList);
            // removed
            if (!targetItem)
                return;
            targetItem.error = err;
            targetItem.status = 'error';
            targetItem["message"] = this.genErr(file);
            this.nzChange.emit({
                file: Object.assign({}, targetItem),
                fileList,
            });
            this.cd.detectChanges();
        };
        // endregion
        // region: list
        this.onRemove = (file) => {
            this.upload.abort(file);
            file.status = 'removed';
            (this.nzRemove ? this.nzRemove instanceof Observable$1 ? this.nzRemove : of$1(this.nzRemove(file)) : of$1(true))
                .pipe(filter$1((res) => res))
                .subscribe(res => {
                const /** @type {?} */ removedFileList = this.removeFileItem(file, this.nzFileList);
                if (removedFileList) {
                    this.nzFileList = removedFileList;
                    this.nzChange.emit({
                        file,
                        fileList: removedFileList
                    });
                    this.nzFileListChange.emit(this.nzFileList);
                    this.cd.detectChanges();
                }
            });
        };
        // endregion
        // region: styles
        this._prefixCls = 'ant-upload';
        this._classList = [];
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzDisabled(value) {
        this._disabled = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzDisabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzMultiple(value) {
        this._multiple = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzMultiple() {
        return this._multiple;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowUploadList(value) {
        this._showUploadList = typeof value === 'boolean' ? toBoolean(value) : value;
    }
    /**
     * @return {?}
     */
    get nzShowUploadList() {
        return this._showUploadList;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzShowButton(value) {
        this._showBtn = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzShowButton() {
        return this._showBtn;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set nzWithCredentials(value) {
        this._withCredentials = toBoolean(value);
    }
    /**
     * @return {?}
     */
    get nzWithCredentials() {
        return this._withCredentials;
    }
    /**
     * @return {?}
     */
    zipOptions() {
        if (typeof this.nzShowUploadList === 'boolean' && this.nzShowUploadList) {
            this.nzShowUploadList = {
                showPreviewIcon: true,
                showRemoveIcon: true
            };
        }
        // filters
        const /** @type {?} */ filters = this.nzFilter.slice();
        if (this.nzMultiple && this.nzLimit > 0 && filters.findIndex(w => w.name === 'limit') === -1) {
            filters.push({
                name: 'limit',
                fn: (fileList) => fileList.slice(-this.nzLimit)
            });
        }
        if (this.nzSize > 0 && filters.findIndex(w => w.name === 'size') === -1) {
            filters.push({
                name: 'size',
                fn: (fileList) => fileList.filter(w => (w.size / 1024) <= this.nzSize)
            });
        }
        if (this.nzFileType && this.nzFileType.length > 0 && filters.findIndex(w => w.name === 'type') === -1) {
            const /** @type {?} */ types = this.nzFileType.split(',');
            filters.push({
                name: 'type',
                fn: (fileList) => fileList.filter(w => ~types.indexOf(w.type))
            });
        }
        this._btnOptions = {
            disabled: this.nzDisabled,
            accept: this.nzAccept,
            action: this.nzAction,
            beforeUpload: this.nzBeforeUpload,
            customRequest: this.nzCustomRequest,
            data: this.nzData,
            headers: this.nzHeaders,
            name: this.nzName,
            multiple: this.nzMultiple,
            withCredentials: this.nzWithCredentials,
            filters,
            onStart: this.onStart,
            onProgress: this.onProgress,
            onSuccess: this.onSuccess,
            onError: this.onError
        };
        return this;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    fileToObject(file) {
        return {
            lastModified: file.lastModified,
            lastModifiedDate: file.lastModifiedDate,
            name: file.filename || file.name,
            size: file.size,
            type: file.type,
            uid: file.uid,
            response: file.response,
            error: file.error,
            percent: 0,
            // tslint:disable-next-line:no-angle-bracket-type-assertion
            originFileObj: /** @type {?} */ (file)
        };
    }
    /**
     * @param {?} file
     * @param {?} fileList
     * @return {?}
     */
    getFileItem(file, fileList) {
        const /** @type {?} */ matchKey = file.uid !== undefined ? 'uid' : 'name';
        return fileList.filter(item => item[matchKey] === file[matchKey])[0];
    }
    /**
     * @param {?} file
     * @param {?} fileList
     * @return {?}
     */
    removeFileItem(file, fileList) {
        const /** @type {?} */ matchKey = file.uid !== undefined ? 'uid' : 'name';
        const /** @type {?} */ removed = fileList.filter(item => item[matchKey] !== file[matchKey]);
        if (removed.length === fileList.length) {
            return null;
        }
        return removed;
    }
    /**
     * @param {?} file
     * @return {?}
     */
    genErr(file) {
        return file.response && typeof file.response === 'string' ?
            file.response :
            (file.error && file.error.statusText) || this.uploadErrorText;
    }
    /**
     * @return {?}
     */
    clearProgressTimer() {
        clearInterval(this.progressTimer);
    }
    /**
     * @return {?}
     */
    genPercentAdd() {
        let /** @type {?} */ k = 0.1;
        const /** @type {?} */ i = 0.01;
        const /** @type {?} */ end = 0.98;
        return (s) => {
            let /** @type {?} */ start = s;
            if (start >= end) {
                return start;
            }
            start += k;
            k = k - i;
            if (k < 0.001) {
                k = 0.001;
            }
            return start * 100;
        };
    }
    /**
     * @param {?} file
     * @return {?}
     */
    autoUpdateProgress(file) {
        const /** @type {?} */ getPercent = this.genPercentAdd();
        let /** @type {?} */ curPercent = 0;
        this.clearProgressTimer();
        this.progressTimer = setInterval(() => {
            curPercent = getPercent(curPercent);
            this.onProgress({
                percent: curPercent,
            }, file);
        }, 200);
    }
    /**
     * @param {?} file
     * @return {?}
     */
    genThumb(file) {
        if (typeof document === 'undefined' ||
            typeof window === 'undefined' ||
            !(/** @type {?} */ (window)).FileReader || !(/** @type {?} */ (window)).File ||
            !(file.originFileObj instanceof File) ||
            file.thumbUrl !== undefined) {
            return;
        }
        file.thumbUrl = '';
        const /** @type {?} */ reader = new FileReader();
        reader.onloadend = () => file.thumbUrl = reader.result;
        reader.readAsDataURL(file.originFileObj);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    fileDrop(e) {
        if (e.type === this.dragState)
            return;
        this.dragState = e.type;
        this._setClassMap();
    }
    /**
     * @return {?}
     */
    _setClassMap() {
        let /** @type {?} */ subCls = [];
        if (this.nzType === 'drag') {
            subCls = [
                this.nzFileList.some(file => file.status === 'uploading') && `${this._prefixCls}-drag-uploading`,
                this.dragState === 'dragover' && `${this._prefixCls}-drag-hover`
            ];
        }
        else {
            subCls = [
                `${this._prefixCls}-select-${this.nzListType}`
            ];
        }
        this._classList = [
            this._prefixCls,
            `${this._prefixCls}-${this.nzType}`,
            ...subCls,
            this.nzDisabled && `${this._prefixCls}-disabled`
        ].filter(item => !!item);
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.inited = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.nzFileList) {
            (this.nzFileList || []).forEach(file => file["message"] = this.genErr(file));
            if (!changes.nzFileList.firstChange)
                return;
        }
        if (this.inited) {
            if (changes.nzPreview || changes.nzCustomRequest || changes.nzBeforeUpload || changes.nzRemove)
                return;
        }
        this.zipOptions()._setClassMap();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.clearProgressTimer();
    }
}
NzUploadComponent.decorators = [
    { type: Component, args: [{
                selector: 'nz-upload',
                template: `
  <ng-template #list>
    <nz-upload-list *ngIf="nzShowUploadList"
      [listType]="nzListType"
      [items]="nzFileList"
      [icons]="nzShowUploadList"
      [onPreview]="nzPreview"
      [onRemove]="onRemove"></nz-upload-list>
  </ng-template>
  <ng-template #con><ng-content></ng-content></ng-template>
  <ng-template #btn>
    <div [ngClass]="_classList" [style.display]="nzShowButton ? '' : 'none'">
      <div nz-upload-btn #upload [options]="_btnOptions">
        <ng-template [ngTemplateOutlet]="con"></ng-template>
      </div>
    </div>
  </ng-template>
  <ng-container *ngIf="nzType === 'drag'; else select">
    <div [ngClass]="_classList"
        (drop)="fileDrop($event)"
        (dragover)="fileDrop($event)"
        (dragleave)="fileDrop($event)">
        <div nz-upload-btn #upload [options]="_btnOptions" [classes]="['ant-upload-btn']">
          <div class="ant-upload-drag-container">
            <ng-template [ngTemplateOutlet]="con"></ng-template>
          </div>
        </div>
    </div>
    <ng-template [ngTemplateOutlet]="list"></ng-template>
  </ng-container>
  <ng-template #select>
    <ng-container *ngIf="nzListType === 'picture-card'; else pic">
      <ng-template [ngTemplateOutlet]="list"></ng-template>
      <ng-template [ngTemplateOutlet]="btn"></ng-template>
    </ng-container>
  </ng-template>
  <ng-template #pic>
    <ng-template [ngTemplateOutlet]="btn"></ng-template>
    <ng-template [ngTemplateOutlet]="list"></ng-template>
  </ng-template>
  `,
                styles: [
                    `/* stylelint-disable at-rule-empty-line-before,at-rule-name-space-after,at-rule-no-unknown */
/* stylelint-disable declaration-bang-space-before */
/* stylelint-disable declaration-bang-space-before */
.ant-upload {
  font-size: 12px;
  outline: 0;
}
.ant-upload-btn {
  display: block;
  width: 100%;
  outline: none;
}
.ant-upload input[type="file"] {
  cursor: pointer;
}
.ant-upload.ant-upload-select {
  display: inline-block;
}
.ant-upload.ant-upload-select-picture-card {
  border: 1px dashed #d9d9d9;
  width: 96px;
  height: 96px;
  border-radius: 4px;
  background-color: #fbfbfb;
  text-align: center;
  cursor: pointer;
  transition: border-color 0.3s ease;
  display: inline-block;
  vertical-align: top;
  margin-right: 8px;
  margin-bottom: 8px;
}
.ant-upload.ant-upload-select-picture-card > .ant-upload {
  display: block;
  width: 100%;
  height: 100%;
  padding: 20px 0;
}
.ant-upload.ant-upload-select-picture-card:hover {
  border-color: #108ee9;
}
.ant-upload.ant-upload-drag {
  border: 1px dashed #d9d9d9;
  transition: border-color 0.3s ease;
  cursor: pointer;
  border-radius: 4px;
  text-align: center;
  width: 100%;
  height: 100%;
  position: relative;
}
.ant-upload.ant-upload-drag.ant-upload-drag-hover:not(.ant-upload-disabled) {
  border: 2px dashed #49a9ee;
}
.ant-upload.ant-upload-drag.ant-upload-disabled {
  cursor: not-allowed;
}
.ant-upload.ant-upload-drag .ant-upload-btn {
  display: table;
  height: 100%;
}
.ant-upload.ant-upload-drag .ant-upload-drag-container {
  display: table-cell;
  vertical-align: middle;
}
.ant-upload.ant-upload-drag:not(.ant-upload-disabled):hover {
  border-color: #49a9ee;
}
.ant-upload.ant-upload-drag p.ant-upload-drag-icon {
  height: 60px;
  margin-bottom: 24px;
}
.ant-upload.ant-upload-drag p.ant-upload-drag-icon .anticon {
  font-size: 80px;
  margin-top: -5px;
  color: #49a9ee;
}
.ant-upload.ant-upload-drag p.ant-upload-text {
  font-size: 14px;
}
.ant-upload.ant-upload-drag p.ant-upload-hint {
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-upload.ant-upload-drag .anticon-plus {
  font-size: 30px;
  transition: all 0.3s ease;
  color: rgba(0, 0, 0, 0.25);
}
.ant-upload.ant-upload-drag .anticon-plus:hover {
  color: rgba(0, 0, 0, 0.43);
}
.ant-upload.ant-upload-drag:hover .anticon-plus {
  color: rgba(0, 0, 0, 0.43);
}
.ant-upload-list {
  overflow: hidden;
}
.ant-upload-list-item {
  overflow: hidden;
  margin-top: 8px;
  font-size: 12px;
  position: relative;
  height: 24px;
}
.ant-upload-list-item-name {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding-left: 16px;
  width: 100%;
  display: inline-block;
}
.ant-upload-list-item-info {
  line-height: 24px;
  padding: 0 12px 0 4px;
  transition: background-color 0.3s;
}
.ant-upload-list-item-info .anticon-loading,
.ant-upload-list-item-info .anticon-paper-clip {
  margin-right: 4px;
  font-size: 12px;
  color: rgba(0, 0, 0, 0.43);
  position: absolute;
  top: 5.5px;
}
.ant-upload-list-item .anticon-cross {
  display: inline-block;
  font-size: 12px;
  font-size: 10px \9;
  transform: scale(0.83333333) rotate(0deg);
  /* IE6-IE8 */
  -ms-filter: "progid:DXImageTransform.Microsoft.Matrix(sizingMethod='auto expand', M11=1, M12=0, M21=0, M22=1)";
  zoom: 1;
  transition: all .3s;
  opacity: 0;
  cursor: pointer;
  position: absolute;
  top: 0;
  right: 4px;
  color: rgba(0, 0, 0, 0.43);
  line-height: 24px;
}
:root .ant-upload-list-item .anticon-cross {
  filter: none;
}
:root .ant-upload-list-item .anticon-cross {
  font-size: 12px;
}
.ant-upload-list-item .anticon-cross:hover {
  color: rgba(0, 0, 0, 0.65);
}
.ant-upload-list-item:hover .ant-upload-list-item-info {
  background-color: #ecf6fd;
}
.ant-upload-list-item:hover .anticon-cross {
  opacity: 1;
}
.ant-upload-list-item-error,
.ant-upload-list-item-error .anticon-paper-clip,
.ant-upload-list-item-error .ant-upload-list-item-name {
  color: #f04134;
}
.ant-upload-list-item-error .anticon-cross {
  opacity: 1;
  color: #f04134 !important;
}
.ant-upload-list-item-progress {
  line-height: 0;
  font-size: 12px;
  position: absolute;
  width: 100%;
  bottom: 0;
}
.ant-upload-list-picture .ant-upload-list-item,
.ant-upload-list-picture-card .ant-upload-list-item {
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #d9d9d9;
  height: 66px;
  position: relative;
}
.ant-upload-list-picture .ant-upload-list-item:hover,
.ant-upload-list-picture-card .ant-upload-list-item:hover {
  background: transparent;
}
.ant-upload-list-picture .ant-upload-list-item-error,
.ant-upload-list-picture-card .ant-upload-list-item-error {
  border-color: #f04134;
}
.ant-upload-list-picture .ant-upload-list-item-info,
.ant-upload-list-picture-card .ant-upload-list-item-info {
  padding: 0;
}
.ant-upload-list-picture .ant-upload-list-item:hover .ant-upload-list-item-info,
.ant-upload-list-picture-card .ant-upload-list-item:hover .ant-upload-list-item-info {
  background: transparent;
}
.ant-upload-list-picture .ant-upload-list-item-uploading,
.ant-upload-list-picture-card .ant-upload-list-item-uploading {
  border-style: dashed;
}
.ant-upload-list-picture .ant-upload-list-item-thumbnail,
.ant-upload-list-picture-card .ant-upload-list-item-thumbnail {
  width: 48px;
  height: 48px;
  position: absolute;
  top: 8px;
  left: 8px;
}
.ant-upload-list-picture .ant-upload-list-item-thumbnail img,
.ant-upload-list-picture-card .ant-upload-list-item-thumbnail img {
  width: 48px;
  height: 48px;
  display: block;
  overflow: hidden;
  border-radius: 4px;
}
.ant-upload-list-picture .ant-upload-list-item-thumbnail.anticon:before,
.ant-upload-list-picture-card .ant-upload-list-item-thumbnail.anticon:before {
  line-height: 48px;
  font-size: 24px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-upload-list-picture .ant-upload-list-item-name,
.ant-upload-list-picture-card .ant-upload-list-item-name {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  margin: 0 0 0 8px;
  line-height: 44px;
  transition: all .3s;
  padding-left: 48px;
  padding-right: 8px;
  max-width: 100%;
  display: inline-block;
  box-sizing: border-box;
}
.ant-upload-list-picture .ant-upload-list-item-uploading .ant-upload-list-item-name,
.ant-upload-list-picture-card .ant-upload-list-item-uploading .ant-upload-list-item-name {
  line-height: 28px;
}
.ant-upload-list-picture .ant-upload-list-item-progress,
.ant-upload-list-picture-card .ant-upload-list-item-progress {
  padding-left: 56px;
  margin-top: 0;
  bottom: 24px;
  width: calc(100% - 24px);
}
.ant-upload-list-picture .anticon-cross,
.ant-upload-list-picture-card .anticon-cross {
  position: absolute;
  right: 8px;
  top: 8px;
  line-height: 1;
}
.ant-upload-list-picture-card {
  display: inline;
}
.ant-upload-list-picture-card .ant-upload-list-item {
  float: left;
  width: 96px;
  height: 96px;
  margin: 0 8px 8px 0;
}
.ant-upload-list-picture-card .ant-upload-list-item-info {
  height: 100%;
  position: relative;
  overflow: hidden;
}
.ant-upload-list-picture-card .ant-upload-list-item-info:before {
  content: ' ';
  position: absolute;
  z-index: 1;
  background-color: rgba(0, 0, 0, 0.5);
  transition: all .3s;
  width: 100%;
  height: 100%;
  opacity: 0;
}
.ant-upload-list-picture-card .ant-upload-list-item:hover .ant-upload-list-item-info:before {
  opacity: 1;
}
.ant-upload-list-picture-card .ant-upload-list-item-actions {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
  white-space: nowrap;
  opacity: 0;
  transition: all .3s;
}
.ant-upload-list-picture-card .ant-upload-list-item-actions .anticon-eye-o,
.ant-upload-list-picture-card .ant-upload-list-item-actions .anticon-delete {
  z-index: 10;
  transition: all .3s;
  cursor: pointer;
  font-size: 16px;
  width: 16px;
  color: rgba(255, 255, 255, 0.91);
  margin: 0 4px;
}
.ant-upload-list-picture-card .ant-upload-list-item-actions .anticon-eye-o:hover,
.ant-upload-list-picture-card .ant-upload-list-item-actions .anticon-delete:hover {
  color: #fff;
}
.ant-upload-list-picture-card .ant-upload-list-item-info:hover + .ant-upload-list-item-actions,
.ant-upload-list-picture-card .ant-upload-list-item-actions:hover {
  opacity: 1;
}
.ant-upload-list-picture-card .ant-upload-list-item-thumbnail,
.ant-upload-list-picture-card .ant-upload-list-item-thumbnail img {
  display: block;
  width: 100%;
  height: 100%;
  position: static;
}
.ant-upload-list-picture-card .ant-upload-list-item-name {
  display: none;
}
.ant-upload-list-picture-card .ant-upload-list-item-uploading.ant-upload-list-item {
  background-color: #fbfbfb;
}
.ant-upload-list-picture-card .ant-upload-list-item-uploading .ant-upload-list-item-info {
  height: auto;
}
.ant-upload-list-picture-card .ant-upload-list-item-uploading .ant-upload-list-item-info:before,
.ant-upload-list-picture-card .ant-upload-list-item-uploading .ant-upload-list-item-info .anticon-eye-o,
.ant-upload-list-picture-card .ant-upload-list-item-uploading .ant-upload-list-item-info .anticon-delete {
  display: none;
}
.ant-upload-list-picture-card .ant-upload-list-item-uploading-text {
  margin-top: 18px;
  color: rgba(0, 0, 0, 0.43);
}
.ant-upload-list-picture-card .ant-upload-list-item-progress {
  padding-left: 0;
  bottom: 32px;
}
.ant-upload-list .ant-upload-success-icon {
  color: #00a854;
  font-weight: bold;
}
.ant-upload-list .ant-upload-animate-enter,
.ant-upload-list .ant-upload-animate-leave,
.ant-upload-list .ant-upload-animate-inline-enter,
.ant-upload-list .ant-upload-animate-inline-leave {
  animation-duration: .3s;
  animation-fill-mode: cubic-bezier(0.78, 0.14, 0.15, 0.86);
}
.ant-upload-list .ant-upload-animate-enter {
  animation-name: uploadAnimateIn;
}
.ant-upload-list .ant-upload-animate-leave {
  animation-name: uploadAnimateOut;
}
.ant-upload-list .ant-upload-animate-inline-enter {
  animation-name: uploadAnimateInlineIn;
}
.ant-upload-list .ant-upload-animate-inline-leave {
  animation-name: uploadAnimateInlineOut;
}
@keyframes uploadAnimateIn {
  from {
    height: 0;
    margin: 0;
    opacity: 0;
    padding: 0;
  }
}
@keyframes uploadAnimateOut {
  to {
    height: 0;
    margin: 0;
    padding: 0;
    opacity: 0;
  }
}
@keyframes uploadAnimateInlineIn {
  from {
    width: 0;
    height: 0;
    margin: 0;
    opacity: 0;
    padding: 0;
  }
}
@keyframes uploadAnimateInlineOut {
  to {
    width: 0;
    height: 0;
    margin: 0;
    padding: 0;
    opacity: 0;
  }
}
`,
                    `nz-upload-list {
  display: block;
}
`
                ],
                encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
NzUploadComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: NzLocaleService, },
];
NzUploadComponent.propDecorators = {
    "upload": [{ type: ViewChild, args: ['upload',] },],
    "nzType": [{ type: Input },],
    "nzLimit": [{ type: Input },],
    "nzSize": [{ type: Input },],
    "nzFileType": [{ type: Input },],
    "nzAccept": [{ type: Input },],
    "nzAction": [{ type: Input },],
    "nzBeforeUpload": [{ type: Input },],
    "nzCustomRequest": [{ type: Input },],
    "nzData": [{ type: Input },],
    "nzFilter": [{ type: Input },],
    "nzFileList": [{ type: Input },],
    "nzFileListChange": [{ type: Output },],
    "nzDisabled": [{ type: Input },],
    "nzHeaders": [{ type: Input },],
    "nzListType": [{ type: Input },],
    "nzMultiple": [{ type: Input },],
    "nzName": [{ type: Input },],
    "nzShowUploadList": [{ type: Input },],
    "nzShowButton": [{ type: Input },],
    "nzWithCredentials": [{ type: Input },],
    "nzRemove": [{ type: Input },],
    "nzPreview": [{ type: Input },],
    "nzChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzUploadModule {
}
NzUploadModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, HttpClientModule, NzToolTipModule, NzProgressModule, NzLocaleModule],
                declarations: [NzUploadComponent, NzUploadBtnComponent, NzUploadListComponent],
                exports: [NzUploadComponent]
            },] },
];
/** @nocollapse */
NzUploadModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzMessageBaseService {
    /**
     * @param {?} overlay
     * @param {?} containerClass
     * @param {?=} _idPrefix
     */
    constructor(overlay$$1, containerClass, _idPrefix = '') {
        this._idPrefix = _idPrefix;
        this._counter = 0;
        this._container = overlay$$1.create().attach(new ComponentPortal(containerClass)).instance;
    }
    /**
     * @param {?=} messageId
     * @return {?}
     */
    remove(messageId) {
        if (messageId) {
            this._container.removeMessage(messageId);
        }
        else {
            this._container.removeMessageAll();
        }
    }
    /**
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    createMessage(message, options) {
        // TODO: spread on literal has been disallow on latest proposal
        const /** @type {?} */ resultMessage = Object.assign({}, message, {
            messageId: this._generateMessageId(),
            options,
            createdAt: new Date()
        });
        this._container.createMessage(resultMessage);
        return resultMessage;
    }
    /**
     * @return {?}
     */
    _generateMessageId() {
        return this._idPrefix + this._counter++;
    }
}
class NzMessageService extends NzMessageBaseService {
    /**
     * @param {?} overlay
     */
    constructor(overlay$$1) {
        super(overlay$$1, NzMessageContainerComponent, 'message-');
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    success(content, options) {
        return this.createMessage({ type: 'success', content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    error(content, options) {
        return this.createMessage({ type: 'error', content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    info(content, options) {
        return this.createMessage({ type: 'info', content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    warning(content, options) {
        return this.createMessage({ type: 'warning', content }, options);
    }
    /**
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    loading(content, options) {
        return this.createMessage({ type: 'loading', content }, options);
    }
    /**
     * @param {?} type
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    create(type, content, options) {
        return this.createMessage({ type, content }, options);
    }
    /**
     * @param {?} html
     * @param {?=} options
     * @return {?}
     */
    html(html, options) {
        return this.createMessage({ html }, options);
    }
}
NzMessageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzMessageService.ctorParameters = () => [
    { type: Overlay, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NzNotificationService extends NzMessageBaseService {
    /**
     * @param {?} overlay
     */
    constructor(overlay$$1) {
        super(overlay$$1, NzNotificationContainerComponent, 'notification-');
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    success(title, content, options) {
        return /** @type {?} */ (this.createMessage({ type: 'success', title, content }, options));
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    error(title, content, options) {
        return /** @type {?} */ (this.createMessage({ type: 'error', title, content }, options));
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    info(title, content, options) {
        return /** @type {?} */ (this.createMessage({ type: 'info', title, content }, options));
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    warning(title, content, options) {
        return /** @type {?} */ (this.createMessage({ type: 'warning', title, content }, options));
    }
    /**
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    blank(title, content, options) {
        return /** @type {?} */ (this.createMessage({ type: 'blank', title, content }, options));
    }
    /**
     * @param {?} type
     * @param {?} title
     * @param {?} content
     * @param {?=} options
     * @return {?}
     */
    create(type, title, content, options) {
        return /** @type {?} */ (this.createMessage({ type, title, content }, options));
    }
    /**
     * @param {?} html
     * @param {?=} options
     * @return {?}
     */
    html(html, options) {
        return /** @type {?} */ (this.createMessage({ html }, options));
    }
}
NzNotificationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NzNotificationService.ctorParameters = () => [
    { type: Overlay, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
// ---------------------------------------------------------
// | Imports
// ---------------------------------------------------------
class NgZorroAntdModule {
    /**
     * @param {?=} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: NgZorroAntdModule,
            providers: [
                NzNotificationService,
                NzMessageService,
                { provide: NZ_ROOT_CONFIG, useValue: options },
            ]
        };
    }
}
NgZorroAntdModule.decorators = [
    { type: NgModule, args: [{
                exports: [
                    LoggerModule,
                    NzLocaleModule,
                    NzButtonModule,
                    NzAlertModule,
                    NzBadgeModule,
                    NzCalendarModule,
                    NzCascaderModule,
                    NzCheckboxModule,
                    NzDatePickerModule,
                    NzFormModule,
                    NzInputModule,
                    NzInputNumberModule,
                    NzGridModule,
                    NzMessageModule,
                    NzModalModule,
                    NzNotificationModule,
                    NzPaginationModule,
                    NzPopconfirmModule,
                    NzPopoverModule,
                    NzRadioModule,
                    NzRateModule,
                    NzSelectModule,
                    NzSpinModule,
                    NzSliderModule,
                    NzSwitchModule,
                    NzProgressModule,
                    NzTableModule,
                    NzTabsModule,
                    NzTagModule,
                    NzTimePickerModule,
                    NzUtilModule,
                    NzStepsModule,
                    NzDropDownModule,
                    NzMenuModule,
                    NzBreadCrumbModule,
                    NzLayoutModule,
                    NzRootModule,
                    NzCarouselModule,
                    NzCardModule,
                    NzCollapseModule,
                    NzTimelineModule,
                    NzToolTipModule,
                    NzBackTopModule,
                    NzAffixModule,
                    NzAnchorModule,
                    NzAvatarModule,
                    NzTransferModule,
                    NzUploadModule
                ]
            },] },
];
/** @nocollapse */
NgZorroAntdModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { NZ_LOGGER_STATE, NzGridModule, NzButtonModule, NzAlertModule, NzBadgeModule, NzCalendarModule, NzCascaderModule, NzCheckboxModule, NzDatePickerModule, NzFormModule, NzInputModule, NzInputNumberModule, NzMessageModule, NzModalModule, NzNotificationModule, NzPaginationModule, NzPopconfirmModule, NzPopoverModule, NzRadioModule, NzRateModule, NzSelectModule, NzSpinModule, NzProgressModule, NzSliderModule, NzSwitchModule, NzTableModule, NzTabsModule, NzTagModule, NzTimePickerModule, NzUtilModule, NzStepsModule, NzDropDownModule, NzMenuModule, NzBreadCrumbModule, NzLayoutModule, NzRootModule, NzCarouselModule, NzCardModule, NzCollapseModule, NzTimelineModule, NzToolTipModule, NzBackTopModule, NzAffixModule, NzAnchorModule, NzAvatarModule, NzTransferModule, NzUploadModule, NzRowComponent, NzColComponent, NzColDirective, NzButtonGroupComponent, NzButtonComponent, NzAlertComponent, NzBadgeComponent, NzCalendarComponent, NzCascaderComponent, NzCheckboxGroupComponent, NzCheckboxComponent, NzDatePickerComponent, NzRangePickerComponent, NzFormControlComponent, NzFormExplainComponent, NzFormExtraDirective, NzFormItemRequiredDirective, NzFormItemDirective, NzFormLabelDirective, NzFormSplitDirective, NzFormTextDirective, NzFormComponent, NzInputGroupComponent, NzInputComponent, NzInputDirectiveComponent, NzMessageContainerComponent, NzMessageComponent, NzConfirmComponent, NzModalComponent, NzNotificationContainerComponent, NzNotificationComponent, NzPaginationComponent, NzPopconfirmComponent, NzPopconfirmDirective, NzPopoverComponent, NzPopoverDirective, NzRadioButtonComponent, NzRadioGroupComponent, NzRadioComponent, NzRateComponent, NzOptionComponent, NzSelectComponent, NzSpinComponent, NzProgressComponent, NzSliderComponent, NzSliderHandleComponent, NzSliderMarksComponent, NzSliderStepComponent, NzSliderTrackComponent, NzSwitchComponent, NzThDirective, NzRowIndentComponent, NzTableFilterComponent, NzTableComponent, NzTheadDirective, NzTableSortComponent, NzRowExpandIconComponent, NzTableDividerDirective, NzTbodyTrDirective, NzTbodyDirective, NzTdDirective, NzTabSetComponent, NzTabsNavComponent, NzTabLabelDirective, NzTabBodyComponent, NzTabComponent, NzCheckableTagComponent, NzTagComponent, NzTimePickerInnerComponent, NzTimePickerComponent, NzStepComponent, NzStepsComponent, NzDropDownComponent, NzDropDownDirective, NzDropDownButtonComponent, NzMenuDividerComponent, NzMenuGroupComponent, NzMenuItemComponent, NzMenuComponent, NzSubMenuComponent, NzBreadCrumbItemComponent, NzBreadCrumbComponent, NzContentComponent, NzFooterComponent, NzHeaderComponent, NzLayoutComponent, NzCarouselContentDirective, NzCarouselComponent, NzCardGridDirective, NzCardComponent, NzCollapseComponent, NzCollapsesetComponent, NzTimelineItemComponent, NzTimelineComponent, NzToolTipComponent, NzTooltipDirective, NzBackTopComponent, NzAffixComponent, NzAnchorLinkComponent, NzAnchorComponent, NzAvatarComponent, NzTransferComponent, NzUploadComponent, NzNotificationService, NzMessageService, NzModalService, NzModalSubject, NZ_MESSAGE_CONFIG, NZ_NOTIFICATION_CONFIG, NZ_ROOT_CONFIG, NgZorroAntdModule, NzLocaleModule, NZ_LOCALE, NzLocaleService, zhCN, enUS, trTR, zhTW, ruRU, NZ_COLLAPSE_DIRECTIVES as ɵg, dropDownAnimation as ɵv, fadeAnimation as ɵt, tagAnimation as ɵw, NzScrollService as ɵbc, SCROLL_SERVICE_PROVIDER as ɵbe, SCROLL_SERVICE_PROVIDER_FACTORY as ɵbd, NzInputNumberComponent as ɵy, NzSiderComponent as ɵi, NzLocale as ɵs, NZ_LOCALE_SERVICE_PROVIDER as ɵb, NZ_LOCALE_SERVICE_PROVIDER_FACTORY as ɵa, NzTranslatePipe as ɵr, NZ_MESSAGE_DEFAULT_CONFIG as ɵl, NZ_MESSAGE_DEFAULT_CONFIG_PROVIDER as ɵm, NzMessageBaseService as ɵj, NZ_NOTIFICATION_DEFAULT_CONFIG as ɵo, NZ_NOTIFICATION_DEFAULT_CONFIG_PROVIDER as ɵp, createNzRootInitializer as ɵq, NzRootStyleComponent as ɵbb, NzRootComponent as ɵba, NzOptionPipe as ɵu, NzSliderService as ɵz, NzTabsInkBarDirective as ɵh, NzTransferListComponent as ɵbf, NzTransferSearchComponent as ɵbg, NzUploadBtnComponent as ɵbh, NzUploadListComponent as ɵbi, LoggerModule as ɵc, LOGGER_SERVICE_PROVIDER as ɵf, LOGGER_SERVICE_PROVIDER_FACTORY as ɵe, LoggerService as ɵd, NzDatePipe as ɵx };
//# sourceMappingURL=antd.js.map
