import { ConnectedOverlayPositionChange, ConnectionPositionPair } from '@angular/cdk/overlay';
import { ChangeDetectorRef, ElementRef, OnInit, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DayInterface, MonthInterface, RangePart } from '../calendar/nz-calendar.component';
import { NzLocaleService } from '../locale/index';
import { NzTimePickerInnerComponent } from '../time-picker/nz-timepicker-inner.component';
export declare class NzRangePickerComponent implements ControlValueAccessor, OnInit {
    private _elementRef;
    private _cdr;
    private _locale;
    private _disabled;
    private _showTime;
    private _now;
    private _el;
    private _oldValue;
    private _value;
    private readonly _defaultRangeValue;
    private readonly start;
    private readonly end;
    _part: typeof RangePart;
    hoveringSelectValue: Date;
    _open: any;
    _disabledDate: (value: Date) => boolean;
    _disabledDatePart: Array<(value: Date) => boolean>;
    _mode: string[];
    _selectedMonth: number[];
    _selectedYear: number[];
    _selectedDate: number[];
    _showMonth: number[];
    _showYear: number[];
    _yearPanel: string[][];
    _startDecade: any[];
    _triggerWidth: number;
    _dropDownPosition: string;
    _positions: ConnectionPositionPair[];
    trigger: any;
    onTouched: () => void;
    onChange: (value: Date[]) => void;
    nzSize: string;
    nzFormat: string;
    nzAllowClear: boolean;
    nzPlaceholder: string[];
    timePickerInner: QueryList<NzTimePickerInnerComponent>;
    readonly showClearIcon: boolean;
    nzShowTime: Partial<NzTimePickerInnerComponent>;
    nzDisabled: boolean;
    nzValue: Date[];
    nzDisabledDate: (value: Date) => boolean;
    constructor(_elementRef: ElementRef, _cdr: ChangeDetectorRef, _locale: NzLocaleService);
    ngOnInit(): void;
    _bindDisabledDateToPart(): void;
    _generateYearPanel(): void;
    _openCalendar(): void;
    _closeCalendar(): void;
    _clearValue(e: MouseEvent): void;
    _setTriggerWidth(): void;
    _setShowYear(year: number, part: RangePart, $event: MouseEvent): void;
    _isValid(part: RangePart): boolean;
    _isComplete(): boolean;
    _changeTime($event: Date, part: RangePart): void;
    _blurInput(box: HTMLInputElement, part: RangePart): void;
    _hoverDay(day: DayInterface): void;
    _clickDay(day: DayInterface, part: RangePart): void;
    _clickMonth(month: MonthInterface, part: RangePart): void;
    _changeTimeView($event: MouseEvent): void;
    _changeYearView($event: MouseEvent): void;
    _showBtn(part: RangePart): boolean;
    _preYear(part: RangePart): void;
    _nextYear(part: RangePart): void;
    _preMonth(part: RangePart): void;
    _nextMonth(part: RangePart): void;
    _preDecade(part: RangePart): void;
    _nextDecade(part: RangePart): void;
    rangeValueSort(): void;
    _initShow(): void;
    adjustShowMonth(): void;
    onPositionChange(position: ConnectedOverlayPositionChange): void;
    setSelectedValue(): void;
    isValueChange(): boolean;
    writeValue(value: Date[]): void;
    registerOnChange(fn: (_: Date[]) => {}): void;
    registerOnTouched(fn: () => {}): void;
    setDisabledState(isDisabled: boolean): void;
    private _updateValue(value);
    private _onChange();
}
