import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class NzInputNumberComponent implements ControlValueAccessor {
    private _elementRef;
    private _renderer;
    private _disabled;
    _el: HTMLElement;
    _value: number;
    _size: string;
    _prefixCls: string;
    _step: number;
    _precisionStep: number;
    _precisionFactor: number;
    _displayValue: any;
    _disabledUp: boolean;
    _disabledDown: boolean;
    _focused: boolean;
    _mouseInside: boolean;
    _allowClear: boolean;
    onChange: (value: number) => void;
    onTouched: () => void;
    _inputNumber: ElementRef;
    nzPlaceHolder: string;
    nzMin: number;
    nzMax: number;
    nzFormatter: (value: any) => any;
    nzParser: (value: any) => any;
    nzDisabled: boolean;
    nzAllowClear: boolean;
    nzSize: string;
    nzStep: number;
    nzBlur: EventEmitter<FocusEvent | KeyboardEvent>;
    nzFocus: EventEmitter<FocusEvent>;
    _numberUp($event: MouseEvent): void;
    _numberDown($event: MouseEvent): void;
    nzValue: number;
    _emitBlur($event: FocusEvent): void;
    _emitFocus($event: FocusEvent): void;
    _emitKeyDown($event: KeyboardEvent): void;
    _isEmpty(value?: number | string | undefined | null): boolean;
    _checkValue(): void;
    _getBoundValue(value: number): number;
    _isNumber(value: number): boolean;
    toPrecisionAsStep(num: number): number;
    constructor(_elementRef: ElementRef, _renderer: Renderer2);
    writeValue(value: number): void;
    registerOnChange(fn: (_: number) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    private _updateValue(value, emitChange?);
}
