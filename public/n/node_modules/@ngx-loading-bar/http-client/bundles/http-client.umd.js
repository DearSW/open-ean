(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ngx-loading-bar/core'), require('@angular/core'), require('@angular/common/http'), require('rxjs/operator/do'), require('rxjs/operator/finally')) :
	typeof define === 'function' && define.amd ? define(['exports', '@ngx-loading-bar/core', '@angular/core', '@angular/common/http', 'rxjs/operator/do', 'rxjs/operator/finally'], factory) :
	(factory((global['http-client'] = {}),global['@ngx-loading-bar/core'],global.ng.core,global.ng.common.http,global.Rx.Observable.prototype,global.Rx.Observable.prototype));
}(this, (function (exports,core,core$1,http,_do,_finally) { 'use strict';

var LoadingBarInterceptor = /** @class */ (function () {
    /**
     * @param {?} loadingBar
     */
    function LoadingBarInterceptor(loadingBar) {
        this.loadingBar = loadingBar;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    LoadingBarInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        // https://github.com/angular/angular/issues/18155
        var /** @type {?} */ meta = ((req)).metadata || {};
        if (meta && meta.ignoreLoadingBar === true) {
            return next.handle(req);
        }
        var /** @type {?} */ started = false;
        return _finally._finally.call(_do._do.call(next.handle(req), function (event) {
            if (!started && event.type === http.HttpEventType.Sent) {
                started = true;
                _this.loadingBar.start();
            }
            else if (started && event.type === http.HttpEventType.Response) {
                started = false;
                _this.loadingBar.complete();
            }
        }), function () { return started && _this.loadingBar.complete(); });
    };
    return LoadingBarInterceptor;
}());
LoadingBarInterceptor.decorators = [
    { type: core$1.Injectable },
];
/**
 * @nocollapse
 */
LoadingBarInterceptor.ctorParameters = function () { return [
    { type: core.LoadingBarService, },
]; };
var LoadingBarHttpClientModule = /** @class */ (function () {
    function LoadingBarHttpClientModule() {
    }
    return LoadingBarHttpClientModule;
}());
LoadingBarHttpClientModule.decorators = [
    { type: core$1.NgModule, args: [{
                imports: [
                    http.HttpClientModule,
                    core.LoadingBarModule.forRoot(),
                ],
                exports: [
                    http.HttpClientModule,
                    core.LoadingBarModule,
                ],
                providers: [
                    { provide: http.HTTP_INTERCEPTORS, useClass: LoadingBarInterceptor, multi: true },
                ],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarHttpClientModule.ctorParameters = function () { return []; };

exports.LoadingBarHttpClientModule = LoadingBarHttpClientModule;
exports.Éµa = LoadingBarInterceptor;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=http-client.umd.js.map
