import { ChangeDetectionStrategy, Component, Injectable, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { debounceTime as debounceTime$1 } from 'rxjs/operator/debounceTime';

class LoadingBarService {
    constructor() {
        this.progress$ = debounceTime$1.call(new Subject$1());
        this._pending = new Subject$1();
        this._pendingRequests = 0;
        this._value = 0;
    }
    /**
     * @return {?}
     */
    start() {
        ++this._pendingRequests;
        if (this._value === 0) {
            // Inserts the loading bar element into the dom, and sets it to 2%
            this.set(2);
        }
    }
    /**
     * @return {?}
     */
    complete() {
        if (this._pendingRequests === 0) {
            return;
        }
        --this._pendingRequests;
        if (this._pendingRequests === 0 && this._value !== 100) {
            if (this._value > 0) {
                this.set(100);
                // Attempt to aggregate any start/complete calls within 500ms:
                setTimeout(() => this.set(0), 500);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.progress$.complete();
    }
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    set(n) {
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(() => this.increment(), 250);
        }
    }
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @return {?}
     */
    increment() {
        let /** @type {?} */ rnd = 0;
        const /** @type {?} */ stat = this._value;
        if (stat >= 0 && stat < 25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            // finally, increment it .5 %
            rnd = 0.5;
        }
        else {
            // after 99%, don't increment:
            rnd = 0;
        }
        this.set(this._value + rnd);
    }
}
LoadingBarService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
LoadingBarService.ctorParameters = () => [];

class LoadingBarComponent {
    /**
     * @param {?} loader
     */
    constructor(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
    }
}
LoadingBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-loading-bar',
                template: `
    <ng-container *ngIf="(loader.progress$|async) as progress">
      <div id="loading-bar-spinner" *ngIf="includeSpinner" [style.color]="color"><div class="spinner-icon"></div></div>
      <div id="loading-bar" *ngIf="includeBar" [style.color]="color">
        <div class="bar" [style.background]="color" [style.width]="progress + '%'">
          <div class="peg"></div>
        </div>
      </div>
    </ng-container>
  `,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
    /* Make clicks pass-through */
    :host > div {
      pointer-events: none;
      -webkit-pointer-events: none;
      -webkit-transition: 350ms linear all;
      transition: 350ms linear all;
      color: #29d;
      /* Fancy blur effect */ }
      :host > div .bar {
        -webkit-transition: width 350ms;
        transition: width 350ms;
        background: #29d;
        position: fixed;
        z-index: 10002;
        top: 0;
        left: 0;
        width: 100%;
        height: 2px;
        border-bottom-right-radius: 1px;
        border-top-right-radius: 1px; }
      :host > div .peg {
        position: absolute;
        width: 70px;
        right: 0;
        top: 0;
        height: 2px;
        opacity: .45;
        -ms-box-shadow: 1px 0 6px 1px;
        -webkit-box-shadow: 1px 0 6px 1px;
        box-shadow: 1px 0 6px 1px;
        color: inherit;
        border-radius: 100%; }
      :host > div:first-child {
        display: block;
        position: fixed;
        z-index: 10002;
        top: 10px;
        left: 10px; }
        :host > div:first-child .spinner-icon {
          width: 14px;
          height: 14px;
          border: solid 2px transparent;
          border-top-color: inherit;
          border-left-color: inherit;
          border-radius: 50%;
          -webkit-animation: loading-bar-spinner 400ms linear infinite;
          animation: loading-bar-spinner 400ms linear infinite; }

    @-webkit-keyframes loading-bar-spinner {
      0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg); }
      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg); } }

    @keyframes loading-bar-spinner {
      0% {
        -webkit-transform: rotate(0deg);
                transform: rotate(0deg); }
      100% {
        -webkit-transform: rotate(360deg);
                transform: rotate(360deg); } }
  `],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarComponent.ctorParameters = () => [
    { type: LoadingBarService, },
];
LoadingBarComponent.propDecorators = {
    'includeSpinner': [{ type: Input },],
    'includeBar': [{ type: Input },],
    'color': [{ type: Input },],
};

class LoadingBarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: LoadingBarModule,
            providers: [LoadingBarService],
        };
    }
}
LoadingBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [LoadingBarComponent],
                exports: [LoadingBarComponent],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { LoadingBarModule, LoadingBarComponent, LoadingBarService };
//# sourceMappingURL=core.js.map
