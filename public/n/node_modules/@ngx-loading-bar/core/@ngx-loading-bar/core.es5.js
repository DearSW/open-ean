import { ChangeDetectionStrategy, Component, Injectable, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { debounceTime as debounceTime$1 } from 'rxjs/operator/debounceTime';
var LoadingBarService = /** @class */ (function () {
    function LoadingBarService() {
        this.progress$ = debounceTime$1.call(new Subject$1());
        this._pending = new Subject$1();
        this._pendingRequests = 0;
        this._value = 0;
    }
    /**
     * @return {?}
     */
    LoadingBarService.prototype.start = function () {
        ++this._pendingRequests;
        if (this._value === 0) {
            // Inserts the loading bar element into the dom, and sets it to 2%
            this.set(2);
        }
    };
    /**
     * @return {?}
     */
    LoadingBarService.prototype.complete = function () {
        var _this = this;
        if (this._pendingRequests === 0) {
            return;
        }
        --this._pendingRequests;
        if (this._pendingRequests === 0 && this._value !== 100) {
            if (this._value > 0) {
                this.set(100);
                // Attempt to aggregate any start/complete calls within 500ms:
                setTimeout(function () { return _this.set(0); }, 500);
            }
        }
    };
    /**
     * @return {?}
     */
    LoadingBarService.prototype.ngOnDestroy = function () {
        this.progress$.complete();
    };
    /**
     * Set the loading bar's width to a certain percent.
     *
     * @param {?} n any value between 0 and 100
     * @return {?}
     */
    LoadingBarService.prototype.set = function (n) {
        var _this = this;
        if (n === 0 && this._pendingRequests > 0) {
            n = 2;
        }
        this._value = n;
        this.progress$.next(n);
        // increment loadingbar to give the illusion that there is always
        // progress but make sure to cancel the previous timeouts so we don't
        // have multiple incs running at the same time.
        clearTimeout(this._incTimeout);
        if (this._value > 0 && this._value < 100) {
            this._incTimeout = setTimeout(function () { return _this.increment(); }, 250);
        }
    };
    /**
     * Increments the loading bar by a random amount
     * but slows down as it progresses
     * @return {?}
     */
    LoadingBarService.prototype.increment = function () {
        var /** @type {?} */ rnd = 0;
        var /** @type {?} */ stat = this._value;
        if (stat >= 0 && stat < 25) {
            // Start out between 3 - 6% increments
            rnd = (Math.random() * (5 - 3 + 1) + 3);
        }
        else if (stat >= 25 && stat < 65) {
            // increment between 0 - 3%
            rnd = (Math.random() * 3);
        }
        else if (stat >= 65 && stat < 90) {
            // increment between 0 - 2%
            rnd = (Math.random() * 2);
        }
        else if (stat >= 90 && stat < 99) {
            // finally, increment it .5 %
            rnd = 0.5;
        }
        else {
            // after 99%, don't increment:
            rnd = 0;
        }
        this.set(this._value + rnd);
    };
    return LoadingBarService;
}());
LoadingBarService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
LoadingBarService.ctorParameters = function () { return []; };
var LoadingBarComponent = /** @class */ (function () {
    /**
     * @param {?} loader
     */
    function LoadingBarComponent(loader) {
        this.loader = loader;
        this.includeSpinner = true;
        this.includeBar = true;
    }
    return LoadingBarComponent;
}());
LoadingBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-loading-bar',
                template: "\n    <ng-container *ngIf=\"(loader.progress$|async) as progress\">\n      <div id=\"loading-bar-spinner\" *ngIf=\"includeSpinner\" [style.color]=\"color\"><div class=\"spinner-icon\"></div></div>\n      <div id=\"loading-bar\" *ngIf=\"includeBar\" [style.color]=\"color\">\n        <div class=\"bar\" [style.background]=\"color\" [style.width]=\"progress + '%'\">\n          <div class=\"peg\"></div>\n        </div>\n      </div>\n    </ng-container>\n  ",
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: ["\n    /* Make clicks pass-through */\n    :host > div {\n      pointer-events: none;\n      -webkit-pointer-events: none;\n      -webkit-transition: 350ms linear all;\n      transition: 350ms linear all;\n      color: #29d;\n      /* Fancy blur effect */ }\n      :host > div .bar {\n        -webkit-transition: width 350ms;\n        transition: width 350ms;\n        background: #29d;\n        position: fixed;\n        z-index: 10002;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 2px;\n        border-bottom-right-radius: 1px;\n        border-top-right-radius: 1px; }\n      :host > div .peg {\n        position: absolute;\n        width: 70px;\n        right: 0;\n        top: 0;\n        height: 2px;\n        opacity: .45;\n        -ms-box-shadow: 1px 0 6px 1px;\n        -webkit-box-shadow: 1px 0 6px 1px;\n        box-shadow: 1px 0 6px 1px;\n        color: inherit;\n        border-radius: 100%; }\n      :host > div:first-child {\n        display: block;\n        position: fixed;\n        z-index: 10002;\n        top: 10px;\n        left: 10px; }\n        :host > div:first-child .spinner-icon {\n          width: 14px;\n          height: 14px;\n          border: solid 2px transparent;\n          border-top-color: inherit;\n          border-left-color: inherit;\n          border-radius: 50%;\n          -webkit-animation: loading-bar-spinner 400ms linear infinite;\n          animation: loading-bar-spinner 400ms linear infinite; }\n\n    @-webkit-keyframes loading-bar-spinner {\n      0% {\n        -webkit-transform: rotate(0deg);\n        transform: rotate(0deg); }\n      100% {\n        -webkit-transform: rotate(360deg);\n        transform: rotate(360deg); } }\n\n    @keyframes loading-bar-spinner {\n      0% {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg); }\n      100% {\n        -webkit-transform: rotate(360deg);\n                transform: rotate(360deg); } }\n  "],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarComponent.ctorParameters = function () { return [
    { type: LoadingBarService, },
]; };
LoadingBarComponent.propDecorators = {
    'includeSpinner': [{ type: Input },],
    'includeBar': [{ type: Input },],
    'color': [{ type: Input },],
};
var LoadingBarModule = /** @class */ (function () {
    function LoadingBarModule() {
    }
    /**
     * @return {?}
     */
    LoadingBarModule.forRoot = function () {
        return {
            ngModule: LoadingBarModule,
            providers: [LoadingBarService],
        };
    };
    return LoadingBarModule;
}());
LoadingBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [LoadingBarComponent],
                exports: [LoadingBarComponent],
            },] },
];
/**
 * @nocollapse
 */
LoadingBarModule.ctorParameters = function () { return []; };
/**
 * Generated bundle index. Do not edit.
 */
export { LoadingBarModule, LoadingBarComponent, LoadingBarService };
//# sourceMappingURL=core.es5.js.map
